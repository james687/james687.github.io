{"pages":[],"posts":[{"title":"用 pipenv 管理 requirements 搭配 docker-compose local 開發","text":"Local 開發是跑在 Docker 的虛擬環境裡，所以 Pipenv 產生的虛擬環境只是用來裝套件產生 Pipfile.lock 而已 用 pipenv 就不用自己寫 requirements.txt，不但可以自動安裝最新版的套件，而且可以很輕鬆的固定住對應 sub-packages 的版本 想一次更新所有套件也很容易 步驟：(以裝一個 package 為例) pip install --user pipenv 裝完後 command line 找不到 pipenv 的需把對應資料夾加入 PATH cd 到專案資料夾 pipenv install {target-package} 這邊不要指定版號，pipenv 就會安裝最新版 pipenv 會產生 Pipfile 和 Pipfile.lock, 後者有記錄這個 package 和 sub-packages 的固定版號 pipenv lock -r &gt; requirements.txt 將 Pipfile.lock 輸出為 requirements.txt 格式 接著就可以在 Dockerfile 裡直接用這個 requirements.txt 啦 之後假如要把 requirements.txt 裡所有的 top-level 套件都更新的話: pipenv update 這個我自己沒試過，不過看文件應該是用這指令 重新輸出 requirements.txt 有看到另一種做法是可以不用自己產生 requirements.txt，直接在 Dockerfile 裡用 pipenv 動態生成 requirements.txt 來用，不過我自己還沒試過 Ref.","link":"/2020/02/06/pipenv-intro/"},{"title":"PostgreSQL local docker 開發的初始 setup","text":"為了讓 web framework 可以跟你的 DB 連線，在你的 PostgreSQL container run 起來之後： docker exec -it {db-container-name} psql -U postgres 以預設 user postgres 連進 DB create user {username} with password {password}; create database with owner {username}; 大功告成，可以用 \\l 列出所有 database &amp; \\du 列出所有 user 來確認","link":"/2020/02/07/postgresql-init-setup/"}],"tags":[{"name":"python","slug":"python","link":"/tags/python/"},{"name":"pipenv","slug":"pipenv","link":"/tags/pipenv/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"postgresql","slug":"postgresql","link":"/tags/postgresql/"}],"categories":[{"name":"Database","slug":"Database","link":"/categories/Database/"}]}