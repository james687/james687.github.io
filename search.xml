<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PostgreSQL/MySQL local docker 開發的初始 setup</title>
      <link href="/2022/09/01/postgresql-mysql-init-setup/"/>
      <url>/2022/09/01/postgresql-mysql-init-setup/</url>
      
        <content type="html"><![CDATA[<p>container run 起來之後：<br><strong>PostgreSQL:</strong></p><ol><li><code>docker exec -it {db-container-name} psql -U postgres</code><ul><li>以預設 user <code>postgres</code> 連進 DB</li></ul></li><li><code>create user {username} with password &#39;{password}&#39;;</code></li><li><code>create database {database_name} with owner {username};</code></li><li>大功告成，可以用 <code>\l</code> 列出所有 database &amp; <code>\du</code> 列出所有 user 來確認</li></ol><ul><li>P.S. 假如一開始忘了指定 database owner 或想改變 owner: <code>alter database {database_name} owner to {owner_name};</code></li></ul><p><strong>MySQL: (以 5.7 為例)</strong></p><ol><li>環境變數須設置 <code>MYSQL_ROOT_PASSWORD</code></li><li>docker exec -it {db-container-name} mysql -p<ul><li>以預設 user <code>root</code> 連進去，輸入上面環境變數設置的密碼</li></ul></li><li><code>create user &#39;{username}&#39;@&#39;localhost&#39; identified by &#39;{password}&#39;;</code><ul><li>Use <code>localhost</code> due to working on the machine with MySQL.</li></ul></li><li><code>create database {database_name};</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> postgresql </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>為什麼 Python dict 的 get item operation 時間複雜度為 O(1) ？</title>
      <link href="/2022/07/25/why-dict-o1/"/>
      <url>/2022/07/25/why-dict-o1/</url>
      
        <content type="html"><![CDATA[<p>如果去 google，大部分查到的都會說因為 Python 會把 key 經過 hash function 運算，得到一個 dict 真正內部在使用的 key，從而找到對應的 value。而一個好的 hash function 它的運算所需時間是不會隨著 n 增加而變大的，所以 dict 的 get item operation 時間複雜度為 O(1) 。</p><p>不過我的疑惑是，經過 hash function 運算得到 key 之後，由這個 key 去找到 value 的時間複雜度是 O(1) 嗎？除非這個也是 O(1) 才能說整個 get item operation 是 O(1) 。</p><p>後來再多翻了一些說明，終於看到一兩個回答可以解釋這個疑惑。可以想像成今天我們有一個 array，我們只要知道 index 就可以知道要去哪裡找到對應的 value ( 因此是 O(1) )，經由 hash function 算出來的 key 就好像 array 的 index 一樣，只要看到這個 key 就知道要去哪裡找對應的 value，不會受 n 大小的影響，所以是 O(1)</p><p>另一個比較生活化的例子：hash function 算出來的 key，就好像你在圖書館要找書時用的索引，看到索引你就會知道書在哪一區、哪個櫃子裡，即使你需要照著圖書館的索引指示找一下才能找到，但這個過程所花的時間，跟圖書館有多少書沒有關係。</p><p>References:</p><ul><li><a href="https://qr.ae/pvMCpM">https://qr.ae/pvMCpM</a></li><li><a href="https://qr.ae/pvMCIv">https://qr.ae/pvMCIv</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Mac 加入 ssh key 的步驟</title>
      <link href="/2021/01/14/add-ssh-steps/"/>
      <url>/2021/01/14/add-ssh-steps/</url>
      
        <content type="html"><![CDATA[<ol><li><p><code>ssh-keygen -t ed25519 -C &quot;{你的 email}&quot;</code></p><ul><li>預設路徑假如已有相同檔案，記得指定新的<strong>完整</strong>路徑</li><li>如檔名不用預設的，下面 <code>id_ed25519</code> 自行替換成自己的檔名</li></ul></li><li><p><code>vi ~/.ssh/config</code></p><ul><li><p>舉例：加上如下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host GitHub</span><br><span class="line"> HostName github.com</span><br><span class="line"> IdentityFile ~&#x2F;.ssh&#x2F;id_ed25519</span><br><span class="line"> IdentitiesOnly yes</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>ssh-add -K ~/.ssh/id_ed25519</code></p></li><li><p><code>pbcopy &lt; ~/.ssh/id_ed25519.pub</code></p></li><li><p>貼到所使用的服務網站的相對應設定頁面</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Authentication </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>簡單統整 JWT 相對於傳統 Session 驗證的好處</title>
      <link href="/2021/01/14/jwt-digest/"/>
      <url>/2021/01/14/jwt-digest/</url>
      
        <content type="html"><![CDATA[<ul><li>Server 不用存 Session</li><li>只有在 Client 拿新 JWT 時才需要跟 DB 溝通<ul><li>Clent 拿的時機：JWT 到期或第一次拿</li><li>為何不需跟 DB 溝通？<ul><li>因為 JWT 裡已有所需資訊</li><li>但假如業務需求需要另外取敏感資訊的話還是需要碰 DB</li></ul></li></ul></li><li><a href="https://medium.com/%E9%BA%A5%E5%85%8B%E7%9A%84%E5%8D%8A%E8%B7%AF%E5%87%BA%E5%AE%B6%E7%AD%86%E8%A8%98/%E7%AD%86%E8%A8%98-%E9%80%8F%E9%81%8E-jwt-%E5%AF%A6%E4%BD%9C%E9%A9%97%E8%AD%89%E6%A9%9F%E5%88%B6-2e64d72594f8">參考</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Authentication </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 pipenv 管理 requirements 搭配 docker-compose local 開發</title>
      <link href="/2020/02/06/pipenv-intro/"/>
      <url>/2020/02/06/pipenv-intro/</url>
      
        <content type="html"><![CDATA[<ul><li>Local 開發是跑在 Docker 的虛擬環境裡，所以 Pipenv 產生的虛擬環境只是用來裝套件產生 Pipfile.lock 而已</li><li>用 pipenv 就不用自己寫 requirements.txt，不但可以自動安裝最新版的套件，而且可以很輕鬆的固定住對應 sub-packages 的版本</li><li>想一次更新所有套件也很容易</li><li>步驟：(以裝一個 package 為例)<a id="more"></a><ol><li><code>pip install --user pipenv</code><ul><li>裝完後 command line 找不到 pipenv 的需把對應資料夾加入 PATH</li></ul></li><li><code>cd</code> 到專案資料夾</li><li><code>pipenv install {target-package}</code><ul><li>假如原本沒有 virtual environment，pipenv 會先幫你產生一個基於這個資料夾的 virtual environment<ul><li>假如上層資料夾有 Pipfile，pipenv 會直接用那個 Pipfile 的 virtual environment，不會產生新的<ul><li>這是因為 pipenv 的虛擬環境是 project base 的，所以你可以在一個 Django project 裡的任何一個資料夾執行 pipenv 都可以用到這個 project 的虛擬環境</li><li>而且正常情況下不會有 Django project 裡還有 Django project 的情況，所以不需要在上層已有 Pipfile 的情況下，又在目前資料夾產生 Pipfile</li></ul></li></ul></li><li>這邊不要指定版號，pipenv 就會安裝最新版</li><li>pipenv 會產生 Pipfile 和 Pipfile.lock, 後者有記錄這個 package 和 sub-packages 的固定版號</li></ul></li><li><code>pipenv lock -r &gt; requirements.txt</code><ul><li>將 Pipfile.lock 輸出為 requirements.txt 格式</li></ul></li><li>接著就可以在 Dockerfile 裡直接用這個 requirements.txt 啦</li></ol></li><li>如果要開新的 Django project:<ol><li><code>cd {你想要 project 資料夾放的位置}</code></li><li><code>mkdir {project-name}; cd {project-name}</code></li><li><code>pipenv install Django</code></li><li><code>pipenv run django-admin startproject {project-name} .</code><ul><li><code>.</code>: 要把 <code>manage.py</code> 放在當前資料夾</li></ul></li></ol></li><li>之後假如要把 requirements.txt 裡所有的 top-level 套件都更新的話:<ol><li><code>pipenv update</code><ul><li>這個我自己沒試過，不過看文件應該是用這指令</li></ul></li><li>重新輸出 requirements.txt</li></ol></li><li>有看到另一種做法是可以不用自己產生 requirements.txt，直接在 Dockerfile 裡用 pipenv 動態生成 requirements.txt 來用，不過我自己還沒試過<ul><li><a href="https://www.evernote.com/l/ACwHCpgvaTNHOY2_L9U8Hso6dvJ9jGpp-Qc">Ref.</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Package Management </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pipenv </tag>
            
            <tag> docker </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
