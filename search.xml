<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Validate Binary Search Tree</title>
      <link href="/2023/04/12/validate-binary-search-tree/"/>
      <url>/2023/04/12/validate-binary-search-tree/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/validate-binary-search-tree/">題目</a><br>思路</p><ol><li>樹的問題用遞迴來解相對上比較直覺，所以先試試遞迴解</li><li>拆解到最小單位來找 recursive case: 隨機取樹中一個點，判斷它是否 valid</li><li>大部分情況下會有上限和下限。以左邊的點為例，上限就是父節點的值，下限就是它所在的右子樹的父節點的值，所以這個值必須由上到下一層層傳遞下來。反之，右邊的點的話，就變成上限必須一層層傳遞下來</li><li>因為上下限必須用傳遞的，所以寫一個 function <code>node_valid</code> 接受上下限的參數<a id="more"></a>Python3 solution:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValidBST</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; bool:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">node_valid</span><span class="params">(node, floor=float<span class="params">(<span class="string">'-inf'</span>)</span>, ceiling=float<span class="params">(<span class="string">'inf'</span>)</span>)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        v = node.val</span><br><span class="line">        <span class="keyword">if</span> v &lt;= floor <span class="keyword">or</span> v &gt;= ceiling:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node_valid(node.left, floor, v):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node_valid(node.right, v, ceiling):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> node_valid(root)</span><br></pre></td></tr></table></figure><p>假設樹有 n 個 node</p><ul><li>時間複雜度：O(n)<ul><li>因為每個點都會做一次，而每次的複雜度為 O(1)</li><li><a name="time-complexity-example"></a>另一個算法可參考<a href="/2023/03/21/recursion-time-complexity">這邊</a>的快速解：<ul><li><code>node_valid</code> 的遞迴深度為這棵樹的深度，在樹為平衡的情況下，深度為 log2 n，所以複雜度為 O(2^(log2 n)) = O(n)</li></ul></li></ul></li></ul><h3 id="接下來嘗試用迭代解"><a href="#接下來嘗試用迭代解" class="headerlink" title="接下來嘗試用迭代解"></a>接下來嘗試用迭代解</h3><ol><li>可以用跟遞迴類似的思路，只是改成把要處理的 nodes 都放到 stack 裡，然後每次迴圈都從裡面拿一個出來做，一直做到 stack 為空。迴圈裡的內容就是 recursive case</li><li>因為 floor 和 ceiling 必須一直傳下去，所以跟 node 一起包成 tuple 放入 stack</li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValidBST</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; bool:</span></span><br><span class="line">    stack = [(root, float(<span class="string">'-inf'</span>), float(<span class="string">'inf'</span>))]  <span class="comment"># node, floor, ceiling</span></span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node, floor, ceiling = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        v = node.val</span><br><span class="line">        <span class="keyword">if</span> v &lt;= floor <span class="keyword">or</span> v &gt;= ceiling:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        stack.extend([</span><br><span class="line">            (node.left, floor, v),</span><br><span class="line">            (node.right, v, ceiling)</span><br><span class="line">        ])</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tree </tag>
            
            <tag> depth-first search </tag>
            
            <tag> binary tree </tag>
            
            <tag> recursion </tag>
            
            <tag> binary search tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Dokku 將 Web App 部署在 DigitalOcean</title>
      <link href="/2023/04/05/use-dokku-on-digitalocean/"/>
      <url>/2023/04/05/use-dokku-on-digitalocean/</url>
      
        <content type="html"><![CDATA[<p>因為 Heroku 現在要收費了，原本放在上面<a href="https://github.com/james687/Tweetme">用免費方案的 project</a> 就需要找新的方法。於是找到了 <a href="https://github.com/dokku/dokku">Dokku</a>，他的 GitHub page 介紹如下：</p><blockquote><p>Docker powered mini-Heroku. The smallest PaaS implementation you’ve ever seen.</p></blockquote><p>的確是很傳神，因為使用方法跟 Heroku 很像，基本上可以從 Heroku 無痛遷移，差別在你需要用自己的 VM &amp; domain，配合 dokku 就可以在上面用 docker 管理你的 application，就像他的 about 寫的：<a id="more"></a></p><blockquote><p>A docker-powered PaaS that helps you build and manage the lifecycle of applications</p></blockquote><p>這邊使用 DigitalOcean 的 droplet，因為他有兩個月 200 美金的試用 credits，假如只是短期測試專案的話也夠了，不然也可以兩個月換一個新帳號 😅</p><p>這邊稍微筆記一下把 Heroku 專案搬過來的過程：</p><ul><li>在 DigitalOcean 創一個 droplet, 在上面照著<a href="https://dokku.com/docs/getting-started/installation/">文件</a>的步驟做，droplet OS 需選擇 dokku 支援的版本</li><li>使用 subdomain 的步驟：<ol><li><code>dokku domains:set-global {domain}</code></li><li><code>dokku domains:set {dokku_app_name} {subdomain.domain}</code></li><li>設定 domain 的 A record, CNAME<ul><li>A record: <ul><li>Host: <code>@</code></li><li>Value: droplet IP</li></ul></li><li>CNAME<ul><li>Host: subdomain</li><li>Value: <code>{domain}.</code></li></ul></li></ul></li></ol><ul><li>看起來這個方法應該可以讓我們在同一個 droplet 裡，用不同的 subdomains 跑多個不同的 web apps。只要分別設定多個 CNAME 和對應的 dokku app domain 就好<ul><li>流程：{subdomain_a.domain} 的 request 依循 IP 到了該 droplet 的 nginx，nginx 再將 request 導到 subdomain_a 對應的 dokku app</li></ul></li><li>如果單純只想讓 <code>{dokku_app_name}.{domain}</code> 指到 dokku app，也可以只設定 A record:<ul><li>Host: <code>dokku_app_name</code></li><li>Value: droplet IP</li></ul></li></ul></li><li><code>dokku config:set {dokku_app_name} KEY=value</code> 可設定需要的環境變數</li><li>可以用 runtime.txt 指定 python 執行的版本</li></ul>]]></content>
      
      
      <categories>
          
          <category> Development Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> heroku </tag>
            
            <tag> dokku </tag>
            
            <tag> paas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binary Tree Level Order Traversal</title>
      <link href="/2023/03/28/binary-tree-level-order-traversal/"/>
      <url>/2023/03/28/binary-tree-level-order-traversal/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/">題目</a><br>思路</p><ol><li>一次一層很直覺想到廣先搜尋 (BFS)，所以用 iterative 的做法來解</li><li>一次迴圈處理一層，並把下一層節點放入 stack 繼續在下次迴圈處理<ul><li>stack 也是 list of list, 裡面的每個 list 都是一層節點<a id="more"></a></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; List[List[int]]:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    stack, values = [[root]], []</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        level_vals = []</span><br><span class="line">        level_nodes = []</span><br><span class="line">        nodes = stack.pop()</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            level_vals.append(node.val)</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                level_nodes.append(node.left)</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                level_nodes.append(node.right)</span><br><span class="line">        <span class="keyword">if</span> level_nodes:</span><br><span class="line">            stack.append(level_nodes)</span><br><span class="line">        values.append(level_vals)</span><br><span class="line">    <span class="keyword">return</span> values</span><br></pre></td></tr></table></figure><h3 id="但假如用遞迴的話怎麼解？"><a href="#但假如用遞迴的話怎麼解？" class="headerlink" title="但假如用遞迴的話怎麼解？"></a>但假如用遞迴的話怎麼解？</h3><p>Recursive case: 把當下這個節點的 value 放到對應 level index 的 list 中</p><ul><li><p>如果沒有對應的 level index 就加一個空 list 進去 (<code>level_ind</code> 會從 0 開始依序傳入，不會有跳號的情況)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    level = res[level_ind]</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    level = []</span><br><span class="line">    res.append(level)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; List[List[int]]:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put_value</span><span class="params">(node, level_ind, res)</span>:</span></span><br><span class="line">        <span class="comment"># Base case</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Recursive case</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            level = res[level_ind]</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            level = []</span><br><span class="line">            res.append(level)</span><br><span class="line">        level.append(node.val)</span><br><span class="line">        put_value(node.left, level_ind + <span class="number">1</span>, res)</span><br><span class="line">        put_value(node.right, level_ind + <span class="number">1</span>, res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    res = []</span><br><span class="line">    put_value(root, <span class="number">0</span>, res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tree </tag>
            
            <tag> depth-first search </tag>
            
            <tag> binary tree </tag>
            
            <tag> recursion </tag>
            
            <tag> breadth-first search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binary Tree Inorder Traversal</title>
      <link href="/2023/03/23/binary-tree-inorder-traversal/"/>
      <url>/2023/03/23/binary-tree-inorder-traversal/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/">題目</a><br>思路</p><ol><li>Inorder Traversal: 對任意節點來說，順序為 左子樹 -&gt; 自己 -&gt; 右子樹</li><li>可拆解為最小單位動作，即第一點，故使用遞迴<a id="more"></a></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="string">"""@return node values with inorder-traversal order"""</span></span><br><span class="line">        <span class="comment"># Base case</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># Recursive case</span></span><br><span class="line">        values = self.inorderTraversal(root.left)  <span class="comment"># 先取得左子節點所有的 inorder-traversal values</span></span><br><span class="line">        values.append(root.val)</span><br><span class="line">        values.extend(self.inorderTraversal(root.right))  <span class="comment"># 最後加上右子節點的所有 inorder-traversal values</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> values</span><br></pre></td></tr></table></figure><h3 id="這個題目使用遞迴是相對直觀的，以下改用-iterative-的方式來解："><a href="#這個題目使用遞迴是相對直觀的，以下改用-iterative-的方式來解：" class="headerlink" title="這個題目使用遞迴是相對直觀的，以下改用 iterative 的方式來解："></a>這個題目使用遞迴是相對直觀的，以下改用 iterative 的方式來解：</h3><p>思路：使用一個 list 當 stack 來放 nodes，只要<strong>按照順序</strong>放入，再從裡面依序把 node <code>pop()</code> 出來取 value，stack 為空的時候代表已處理完所有的 nodes =&gt; 回傳答案。以下列出主要分解動作：</p><ol><li><p>把 root 和 root 所有的左節點由上到下依序放入 stack，放完後 stack 裡自然會包含左節點跟中間的節點</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> root:</span><br><span class="line">    stack.append(root)</span><br><span class="line">    root = root.left</span><br></pre></td></tr></table></figure></li><li><p>把 node <code>pop()</code> 出來取 value，此時最先被 pop 出來的會是最下面的左節點。可以先參照接下來的程式碼，當 node 為葉子節點時，不會有 <code>node.right</code>，所以下一個迴圈會繼續 pop 出中間的節點</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node = stack.pop()</span><br><span class="line">values.append(node.val)</span><br></pre></td></tr></table></figure></li><li><p>左、中節點處理完後，處理右節點：把右節點當成新的 root，重複前兩步驟</p><ol><li><code>root = node.right</code></li><li>上面一行連同前兩步驟的程式碼 (如下)，用 <code>while True:</code> 包起來</li></ol></li><li><p>寫終止條件：在 <code>node = stack.pop()</code> 之前判斷 stack 是否還有，如為空代表所有的節點已被遍歷完，故回傳答案 <code>values</code></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="string">"""@return node values with inorder-traversal order"""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        stack, values = [], []</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">while</span> root:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.left</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                <span class="keyword">return</span> values</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            values.append(node.val)</span><br><span class="line">            root = node.right</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tree </tag>
            
            <tag> depth-first search </tag>
            
            <tag> binary tree </tag>
            
            <tag> recursion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>House Robber II</title>
      <link href="/2023/03/23/house-robber-ii/"/>
      <url>/2023/03/23/house-robber-ii/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/house-robber-ii/">題目</a><br>思路</p><ol><li>跟 <a href="https://leetcode.com/problems/house-robber">House Robber</a> 很像，只差在房子的排列變成頭尾相連，有沒有辦法把這題拆解，變成能用上第一版 House Robber 的解題方法？譬如把環形變回直排？</li><li>變成環形之後多出來的限制讓我們可以把這題分成以下三種情況：<ol><li>搶第一個、不搶最後一個：加入第三種情況，等同於可以<strong>視為直排，但只考慮到倒數第二個</strong></li><li>不搶第一個、搶最後一個：加入第三種情況，等同於可以<strong>視為直排，但從第二個開始考慮</strong><a id="more"></a></li><li>第一個和最後一個都不搶：可與前兩種情況合併</li></ol><ul><li>最後把以上三種情況合併為粗體的兩種情況，<strong>轉為第一版 House Robber 問題</strong>，接下來只需取兩種情況錢比較多的就是答案</li></ul></li><li>因為現在需多考慮起始 index，我們把<a href="https://james687.github.io/2023/03/20/house-robber">第一版解法</a>的遞迴函式改為多傳入起始 index，並同樣用 <code>@cache</code> 避免同樣的 <code>inner_rob(i, j)</code> 重複計算<ul><li>Base case 寫法：<ol><li>考慮一開始 <code>j</code> 比 <code>i</code> 大的情況，一路因為 <code>inner_rob(i, j - 1)</code>, <code>inner_rob(i, j - 2)</code> 而減少的情況：<ol><li><code>j == i + 2</code> 時：下兩個遞迴節點為 <code>inner_rob(i, i + 1)</code>, <code>inner_rob(i, i)</code></li><li><code>j == i + 1</code> 時： 下兩個遞迴節點為 <code>inner_rob(i, i)</code>, <code>inner_rob(i, i - 1)</code></li></ol><ul><li>此時可以寫出 base case 的兩種情況 <code>j == i</code>, <code>j &lt; i</code>，寫完後將 <code>inner_rob(i, j)</code> 代入 <code>j == i + 1</code> 驗算看看是否正確</li></ul></li><li>考慮一開始 <code>j == i</code> 的情況，代入驗算看看是否正確</li><li>考慮一開始 <code>j &lt; i</code> 的情況，也就是 <code>len(nums) == 1</code> 時：<ul><li>此時得出的答案為 <code>0</code>，是錯的，所以 base case 需多考慮這種情況，加入 <code>len(nums) == 1</code> 時的判斷處理</li></ul></li></ol></li></ul></li><li>取錢比較多的情況即為答案：<code>return max(inner_rob(0, len(nums) - 2), inner_rob(1, len(nums) - 1))</code></li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line"><span class="meta">    @cache</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_rob</span><span class="params">(i, j)</span>:</span></span><br><span class="line">        <span class="string">"""@return 由 index i 搶到 j 可得的最大收穫"""</span></span><br><span class="line">        <span class="comment"># Base case</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> j == i:</span><br><span class="line">            <span class="keyword">return</span> nums[j]</span><br><span class="line">        <span class="keyword">if</span> j &lt; i:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># Recursive case</span></span><br><span class="line">        <span class="keyword">return</span> max(inner_rob(i, j - <span class="number">1</span>), nums[j] + inner_rob(i, j - <span class="number">2</span>))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> max(inner_rob(<span class="number">0</span>, len(nums) - <span class="number">2</span>), inner_rob(<span class="number">1</span>, len(nums) - <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>如果不用 <code>@cache</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">    l = len(nums)</span><br><span class="line">    memo = [[<span class="literal">None</span>] * l <span class="keyword">for</span> _ <span class="keyword">in</span> range(l)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_rob</span><span class="params">(i, j)</span>:</span></span><br><span class="line">        <span class="string">"""@return 由 index i 搶到 j 可得的最大收穫"""</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> i == j:</span><br><span class="line">            <span class="keyword">return</span> nums[j]</span><br><span class="line">        <span class="keyword">if</span> j &lt; i:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> memo[i][j] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> memo[i][j]</span><br><span class="line">        memo[i][j] = max(inner_rob(i, j - <span class="number">1</span>), nums[j] + inner_rob(i, j - <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> memo[i][j]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> max(inner_rob(<span class="number">0</span>, len(nums) - <span class="number">2</span>), inner_rob(<span class="number">1</span>, len(nums) - <span class="number">1</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recursion </tag>
            
            <tag> dynamic programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遞迴的時間複雜度算法</title>
      <link href="/2023/03/21/recursion-time-complexity/"/>
      <url>/2023/03/21/recursion-time-complexity/</url>
      
        <content type="html"><![CDATA[<h3 id="快速解-適用於遞迴函式內呼叫自己-gt-1-次"><a href="#快速解-適用於遞迴函式內呼叫自己-gt-1-次" class="headerlink" title="快速解 (適用於遞迴函式內呼叫自己 &gt; 1 次)"></a>快速解 (適用於遞迴函式內呼叫自己 &gt; 1 次)</h3><ol><li>看這個遞迴函式呼叫自己幾次，假設呼叫了 <code>x</code> 次</li><li>看看那些遞迴呼叫的深度。假如函式內呼叫自己兩次，深度各為 m、n，此時這個遞迴函式的總深度 <code>h = m + n</code></li><li>時間複雜度為 <code>O(x^h)</code></li></ol><ul><li>至少目前套用在幾個比較單純的遞迴式都成立，不確定複雜的是不是也成立<a id="more"></a></li><li>例子：<a href="/2023/04/12/validate-binary-search-tree#time-complexity-example">Validate Binary Search Tree</a></li></ul><h3 id="詳細解-遞迴樹"><a href="#詳細解-遞迴樹" class="headerlink" title="詳細解 (遞迴樹)"></a>詳細解 (遞迴樹)</h3><p>以 <a href="https://james687.github.io/2023/03/18/unique-paths/">Unique Paths</a> 的遞迴解為例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span><span class="params">(self, m: int, n: int)</span> -&gt; int:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">u_paths</span><span class="params">(i, j)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= m <span class="keyword">or</span> j &gt;= n:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> i == m - <span class="number">1</span> <span class="keyword">and</span> j == n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> u_paths(i + <span class="number">1</span>, j) + u_paths(i, j + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> u_paths(<span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><ol><li>假設 <code>m = 3, n = 2</code>，遞迴樹如下 <img src="/images/recursion-tree.png" alt=""></li><li>由圖可知，遞迴深度為 <code>5 (= m + n)</code><ul><li>要怎麼不用畫圖，用看的就得出深度？<ul><li>深度為根節點走到葉子節點的路徑長，我們可以看從 <code>u_paths(0, 0)</code> 開始，要走幾次才會結束：<ol><li><code>u_paths(i + 1, j)</code> 這邊只需要看 <code>i</code>，要走 <code>i + 1 = 1, 2, ..., m</code> 共 <code>m</code> 次</li><li>走完 <code>m</code> 次之後還有 <code>u_paths(i, j + 1)</code>，要接著再走 <code>j + 1 = 1, 2, ..., n</code> 共 <code>n</code> 次</li><li>所以需要走 <code>m + n</code> 次才會結束</li></ol></li></ul></li></ul></li><li><code>u_paths</code> 合併遞迴結果的運算只需要一次加法，可以把時間消耗記做 <code>1</code>，也就是每個節點的時間消耗都是 <code>1</code></li><li>所有節點的時間消耗總合就是這個函式的時間複雜度。第一層有 <code>1 (= 2^0)</code> 個節點，第二層有 <code>2 (= 2^1)</code> 個節點，第三層有 <code>4 (= 2^2)</code> 個節點，以此類推，假設此樹深度為 <code>h</code>，所有節點的時間消耗和為 <code>2^0 + 2^1 + 2^2 + ... + 2^h</code>，依據等比級數和的公式得出結果為 <code>2^(h + 1) - 1</code><ul><li>這邊的算法是假設這是一個滿二元樹來算，但其實這並不是一個滿二元樹 (像第四層就只有 <code>7</code> 個節點)，所以遞迴樹法並不嚴謹，只是一個估算，真要嚴謹分析的話可以再用 Substitution Method 或 Master Theorem 來驗證</li><li>由第二點，深度 <code>h = m + n</code></li></ul></li><li>所以時間複雜度為 <code>O(2^(h + 1)) = O(2 * 2^h) = O(2^h) = O(2^(m + n))</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recursion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>House Robber</title>
      <link href="/2023/03/20/house-robber/"/>
      <url>/2023/03/20/house-robber/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/house-robber/">題目</a><br>思路</p><ol><li>可以把得出答案的過程拆解為最小可重複步驟，用遞迴來解</li><li>Recursive case: 假設 index 為 i，由 index 0 搶到 i 可得的最大收穫為 <code>inner_rob(i)</code>。在位置 i, 可選擇搶或不搶：<ol><li>不搶：最大收穫跟前一個點一樣，為 <code>inner_rob(i - 1)</code></li><li>搶：代表前一個點一定是不搶，所以最大收穫為這個點的 money <code>nums[i]</code> 再加上前前個點的最大收穫 <code>inner_rob(i - 2)</code></li></ol><ul><li>所以 <code>inner_rob(i)</code> 為以上兩種情況取較大的那個<a id="more"></a></li></ul></li><li>Base case (終止條件)：<code>i &lt; 0</code></li><li>因為這個<a href="https://james687.github.io/2023/03/21/recursion-time-complexity/">遞迴解的時間複雜度</a>最差為 O(2^n)，必須降低，我們可以把計算過的 <code>inner_rob(i)</code> 使用 <code>@cache</code> 將 function 回傳 cache 起來，避免同樣的 <code>inner_rob(i)</code> 重複計算</li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line"><span class="meta">    @cache</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_rob</span><span class="params">(i)</span>:</span></span><br><span class="line">        <span class="string">"""@return 由 index 0 搶到 i 可得的最大收穫"""</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> max(inner_rob(i - <span class="number">1</span>), nums[i] + inner_rob(i - <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> inner_rob(len(nums) - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>時間複雜度：O(n)<ul><li>因為有記憶，每個點只會計算一次，共有 n 個點</li></ul></li><li>空間複雜度：O(n)<ul><li>cache 需要的空間為 n，遞迴的最大深度也是 n</li></ul></li></ul><p>以上，如果不用 <code>@cache</code> 的話：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">    memo = [<span class="literal">None</span>] * len(nums)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_rob</span><span class="params">(i)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> memo[i] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> memo[i]</span><br><span class="line">        memo[i] = max(inner_rob(i - <span class="number">1</span>), nums[i] + inner_rob(i - <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> memo[i]</span><br><span class="line">    <span class="keyword">return</span> inner_rob(len(nums) - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recursion </tag>
            
            <tag> dynamic programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unique Paths</title>
      <link href="/2023/03/18/unique-paths/"/>
      <url>/2023/03/18/unique-paths/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/unique-paths/description/">題目</a><br>思路</p><ol><li><p>每走一步都會是一個 unique path，到終點的路線是由每一步所組成的，所以可以用遞迴的方式來想，最小的可重複動作就是一步，點 (i, j) 到終點的 unique path count 就是 (i + 1, j) 和 (i, j + 1) 的 unique path count 的和</p></li><li><p>最小可重複動作 <code>return u_paths(i + 1, j) + u_paths(i, j + 1)</code></p><a id="more"></a></li><li><p>終止條件</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> i &gt;= m <span class="keyword">or</span> j &gt;= n:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> i == m - <span class="number">1</span> <span class="keyword">and</span> j == n - <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>已經在終點上了，unique path count 卻是 1，一開始可能會覺得有點怪，不過從終點左邊那個點來想，就不會怪了：<ul><li>左邊那個點的 unique path count = (它的下面那點的 path count) + (它右邊那點的 path count)<ul><li>下面那點：path count 為 0</li><li>右邊那點 (終點)：path count 必須是 1</li></ul></li></ul></li></ul></li><li><p>遞迴解法如下，但時間複雜度 O(2^(m + n)) 太大了 (計算參考<a href="https://james687.github.io/2023/03/21/recursion-time-complexity/">這篇</a>)</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span><span class="params">(self, m: int, n: int)</span> -&gt; int:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">u_paths</span><span class="params">(i, j)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        i, j 為從 0 開始的坐標</span></span><br><span class="line"><span class="string">        @return 由 (i, j) 走到終點的 unique path count</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 終止條件</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= m <span class="keyword">or</span> j &gt;= n:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> i == m - <span class="number">1</span> <span class="keyword">and</span> j == n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 最小可重複動作</span></span><br><span class="line">        <span class="keyword">return</span> u_paths(i + <span class="number">1</span>, j) + u_paths(i, j + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> u_paths(<span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>因為同一個點可能會走到很多次，我們可以把結果存在二維陣列，避免重複計算，以減少時間複雜度</p></li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span><span class="params">(self, m: int, n: int)</span> -&gt; int:</span></span><br><span class="line">    dp = [[<span class="literal">None</span>] * n <span class="keyword">for</span> i <span class="keyword">in</span> range(m)]  <span class="comment"># m * n 的二維陣列</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">u_paths</span><span class="params">(i, j)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        i, j 為從 0 開始的坐標</span></span><br><span class="line"><span class="string">        @return 由 (i, j) 走到終點的 unique path count</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 終止條件</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= m <span class="keyword">or</span> j &gt;= n:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> i == m - <span class="number">1</span> <span class="keyword">and</span> j == n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dp[i][j]:</span><br><span class="line">            <span class="keyword">return</span> dp[i][j]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 最小可重複動作</span></span><br><span class="line">        dp[i][j] = u_paths(i + <span class="number">1</span>, j) + u_paths(i, j + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> u_paths(<span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>時間複雜度：O(m * n)<ul><li>因為有記憶，每個點只會計算一次，共有 <code>m * n</code> 個點</li></ul></li><li>空間複雜度：O(m * n)<ul><li>維護 <code>dp</code> 所需空間。遞迴呼叫所需空間 <code>m</code> 和 <code>n</code> 可忽略</li></ul></li></ul><p>類似題：</p><ul><li><a href="https://leetcode.com/problems/fibonacci-number">Fibonacci Number</a></li><li><a href="https://leetcode.com/problems/unique-paths-ii">Unique Paths II</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recursion </tag>
            
            <tag> dynamic programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Merge Two Binary Trees</title>
      <link href="/2023/03/16/merge-two-binary-trees/"/>
      <url>/2023/03/16/merge-two-binary-trees/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/merge-two-binary-trees/description/">題目</a></p><h3 id="做法一：recursive-DFS"><a href="#做法一：recursive-DFS" class="headerlink" title="做法一：recursive - DFS"></a>做法一：recursive - DFS</h3><ol><li><p>找出最小的可重複動作：merge 兩個 nodes</p><ul><li>題目給的 method 就可以用來做遞迴</li></ul></li><li><p>假設 <code>mergeTrees</code> 已完成，實作此最小可重複動作</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root1.val += root2.val</span><br><span class="line">root1.left = self.mergeTrees(root1.left, root2.left)</span><br><span class="line">root1.right = self.mergeTrees(root1.right, root2.right)</span><br><span class="line"><span class="keyword">return</span> root1</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>寫出遞迴的終止條件</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root1 <span class="keyword">or</span> <span class="keyword">not</span> root2:</span><br><span class="line">    <span class="keyword">return</span> root1 <span class="keyword">or</span> root2</span><br></pre></td></tr></table></figure></li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span><span class="params">(self, root1: Optional[TreeNode], root2: Optional[TreeNode])</span> -&gt; Optional[TreeNode]:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root1 <span class="keyword">or</span> <span class="keyword">not</span> root2:</span><br><span class="line">        <span class="keyword">return</span> root1 <span class="keyword">or</span> root2</span><br><span class="line">    root1.val += root2.val</span><br><span class="line">    root1.left = self.mergeTrees(root1.left, root2.left)</span><br><span class="line">    root1.right = self.mergeTrees(root1.right, root2.right)</span><br><span class="line">    <span class="keyword">return</span> root1</span><br></pre></td></tr></table></figure><p>假設兩棵樹有較少節點的那顆有 n 個節點</p><ul><li>時間複雜度：O(n)</li><li>空間複雜度：n 個節點那棵樹的深度<ul><li>最差情況是 O(n), 平均為 O(log n)</li></ul></li></ul><h3 id="做法二：iterative-BFS"><a href="#做法二：iterative-BFS" class="headerlink" title="做法二：iterative - BFS"></a>做法二：iterative - BFS</h3><ol><li>準備一個 stack 來放待 merge 的 node pairs</li><li>一次從裡面拿一個 pair 出來 merge, 同時也把該 merge 的子節點 pair 丟進去。一直做到 stack 裡面沒東西為止</li><li>因為這邊是 merge 到 root1, 故最後回傳 root1<ul><li>注意不要回傳到 <code>p</code>, 而是應該回傳當初的根節點 root1</li></ul></li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span><span class="params">(self, root1: Optional[TreeNode], root2: Optional[TreeNode])</span> -&gt; Optional[TreeNode]:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root1 <span class="keyword">or</span> <span class="keyword">not</span> root2:</span><br><span class="line">        <span class="keyword">return</span> root1 <span class="keyword">or</span> root2</span><br><span class="line">    stack = [(root1, root2)]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        p, q = stack.pop()  <span class="comment"># 使用暫時的變數 p, q 來操作節點 merge</span></span><br><span class="line">        p.val += q.val</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p.left <span class="keyword">and</span> q.left:</span><br><span class="line">            p.left = q.left</span><br><span class="line">        <span class="keyword">elif</span> p.left <span class="keyword">and</span> q.left:</span><br><span class="line">            stack.append((p.left, q.left))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p.right <span class="keyword">and</span> q.right:</span><br><span class="line">            p.right = q.right</span><br><span class="line">        <span class="keyword">elif</span> p.right <span class="keyword">and</span> q.right:</span><br><span class="line">            stack.append((p.right, q.right))</span><br><span class="line">    <span class="keyword">return</span> root1</span><br></pre></td></tr></table></figure><p>假設兩棵樹有較少節點的那顆有 n 個節點</p><ul><li>時間複雜度：O(n)<ul><li>stack 裡會有 n 個 pairs, 所以會做 n 次</li></ul></li><li>空間複雜度：O(n)<ul><li>需要大小為 n 的 stack</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tree </tag>
            
            <tag> depth-first search </tag>
            
            <tag> binary tree </tag>
            
            <tag> recursion </tag>
            
            <tag> breadth-first search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Balanced Binary Tree</title>
      <link href="/2023/03/15/balanced-binary-tree/"/>
      <url>/2023/03/15/balanced-binary-tree/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/balanced-binary-tree/description/">題目</a></p><h3 id="做法一"><a href="#做法一" class="headerlink" title="做法一"></a>做法一</h3><p>思路：</p><ol><li>依照 height-balanced 的定義，需要符合<strong>每個</strong>node 的左右子樹高度差都不大於 1</li><li>假設有個 function <code>height</code> 可以回傳 node 的 height<ul><li>先不實作內容</li></ul></li><li>使用這個 <code>height</code> 完成 <code>isBalanced</code><a id="more"></a></li><li>實作 <code>height</code> 的內容</li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; bool:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:  <span class="comment"># 終止條件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        lh = height(node.left)</span><br><span class="line">        rh = height(node.right)</span><br><span class="line">        <span class="keyword">return</span> max(lh, rh) + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:  <span class="comment"># 終止條件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    lh = height(root.left)</span><br><span class="line">    rh = height(root.right)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 即使左右子樹高度差不大於一，子樹本身還是有可能是不平衡的，所以要再加上後面的 `isBalanced` 判斷</span></span><br><span class="line">    <span class="keyword">return</span> abs(lh - rh) &lt;= <span class="number">1</span> <span class="keyword">and</span> self.isBalanced(root.left) <span class="keyword">and</span> self.isBalanced(root.right)</span><br></pre></td></tr></table></figure><p>假設有 n 個 node, 樹的高度為 h</p><ul><li>時間複雜度：O(n^2)<ul><li><code>isBalanced</code> 除了呼叫自己之外的複雜度為 O(n)<ul><li>呼叫了 <code>n - 1</code> 次 <code>height</code></li></ul></li><li>每個節點都呼叫了一次 <code>isBalanced</code></li></ul></li><li>空間複雜度：O(h)<ul><li>因為遞迴的呼叫有 DFS 的特性，會從子節點一直呼叫到最下面的葉子節點，所以需要把那些 function calls 放進 stack 裡，等到葉子節點的呼叫到了再一一拿出來執行。因此 stack 的大小需等於呼叫的次數，也就是由根節點走到葉子節點需經過幾個點，即這棵樹的高度<ul><li>只需考慮一次遞迴呼叫所需空間，不需考慮全部遞迴呼叫 (譬如在 function 裡呼叫了自己兩次)，因為程式同時只會處理一個遞迴呼叫</li></ul></li></ul></li></ul><h3 id="做法二"><a href="#做法二" class="headerlink" title="做法二"></a>做法二</h3><p>思路：</p><ol><li>有沒有辦法優化上面做法的時間複雜度呢？因為上面在算高度的時候就已經會算出每個節點的左右子樹的高度了，此時就可以順便看看是否平衡，不用等到最後再遞迴呼叫 <code>isBalanced</code> 增加複雜度</li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; bool:</span></span><br><span class="line">    self.balanced = <span class="literal">True</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        lh = height(node.left)</span><br><span class="line">        rh = height(node.right)</span><br><span class="line">        <span class="keyword">if</span> abs(lh - rh) &gt; <span class="number">1</span>:</span><br><span class="line">            self.balanced = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> max(lh, rh) + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    height(root)</span><br><span class="line">    <span class="keyword">return</span> self.balanced</span><br></pre></td></tr></table></figure><p>假設有 n 個 node, 樹的高度為 h</p><ul><li>時間複雜度：O(n)<ul><li>每個節點都做過一次 <code>height</code></li></ul></li><li>空間複雜度：O(h)<ul><li>同 <code>做法一</code> 的分析</li></ul></li></ul><p>類似題：<a href="https://leetcode.com/problems/symmetric-tree/description/">Symmetric Tree</a> 用 recursive 方法來解</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tree </tag>
            
            <tag> depth-first search </tag>
            
            <tag> binary tree </tag>
            
            <tag> recursion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Same Tree</title>
      <link href="/2023/02/10/same-tree/"/>
      <url>/2023/02/10/same-tree/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/same-tree/description/">題目</a><br>思路：</p><ol><li>要比較所有相同位置的 node 的值是否一樣，可以把所有待比較的 node pair 丟到 stack 裡一一拿出來比較，全部比完都通過的話就是一樣的 tree</li><li>一個 pair 比較後會把下面的所有分支點繼續丟進 stack 等待比較，所以用 <code>while stack:</code> 只要有就繼續比，一直比到完<ul><li>此為廣先搜尋 (Breadth-First Search)<a id="more"></a></li></ul></li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p: Optional[TreeNode], q: Optional[TreeNode])</span> -&gt; bool:</span></span><br><span class="line">    stack = [(p, q)]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        p, q = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> p <span class="keyword">and</span> q <span class="keyword">and</span> p.val == q.val:</span><br><span class="line">            stack.extend([</span><br><span class="line">                (p.left, q.left),</span><br><span class="line">                (p.right, q.right)</span><br><span class="line">            ])</span><br><span class="line">        <span class="keyword">elif</span> p <span class="keyword">or</span> q:  <span class="comment"># 只有在 p, q 都是 None 的情況下才會通過，這代表這兩棵樹在那個位置都沒有葉子</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>假設 p 有 n 個節點，寬度 w1，q 有 m 個節點，寬度 w2</p><ul><li>時間複雜度：O(max(m, n))</li><li>空間複雜度：O(max(w1, w2))<ul><li>因為是 BFS, <code>stack</code> 需儲存當前層次上的節點，故跟寬度成正比</li></ul></li></ul><p>類似題：<a href="https://leetcode.com/problems/symmetric-tree/description/">Symmetric Tree</a> 用 iterative 方法來解</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tree </tag>
            
            <tag> depth-first search </tag>
            
            <tag> binary tree </tag>
            
            <tag> breadth-first search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Merge Two Sorted Lists</title>
      <link href="/2023/02/09/merge-two-sorted-lists/"/>
      <url>/2023/02/09/merge-two-sorted-lists/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/merge-two-sorted-lists/description/">題目</a><br>思路：</p><ol><li><p>因為要做一個 linked list，可以用 while 在每次迴圈都接一個 node 出來</p></li><li><p>先設 <code>while True:</code>，等寫迴圈內容時再來確定 while 可繼續執行的條件</p></li><li><p>寫第一 part (如下) 後發現，while 條件需要 <code>l1 and l2</code></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> l1.val &gt; l2.val:</span><br><span class="line">    curr.next = l2</span><br><span class="line">    l2 = l2.next</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    curr.next = l1</span><br><span class="line">    l1 = l1.next</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>post processing: 跳出迴圈後的情形是 <code>l1</code>, <code>l2</code> 其中有一個是 <code>None</code> 或兩個都是 <code>None</code>，此時就把目標 linked list 接上那個不是 <code>None</code> 的即可</p></li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: Optional[ListNode], l2: Optional[ListNode])</span> -&gt; Optional[ListNode]:</span></span><br><span class="line">    dummy_head = ListNode()  <span class="comment"># 需有一個 dummy_head 可以在最後回傳答案時使用</span></span><br><span class="line">    curr = dummy_head  <span class="comment"># 也要有個 curr 可以在每次迴圈中跟著移動</span></span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">        <span class="keyword">if</span> l1.val &gt; l2.val:</span><br><span class="line">            curr.next = l2</span><br><span class="line">            l2 = l2.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            curr.next = l1</span><br><span class="line">            l1 = l1.next</span><br><span class="line">        curr = curr.next</span><br><span class="line">    curr.next = l1 <span class="keyword">or</span> l2  <span class="comment"># post processing</span></span><br><span class="line">    <span class="keyword">return</span> dummy_head.next</span><br></pre></td></tr></table></figure><p>P.S. 有些思路跟 <a href="https://james687.github.io/2023/02/03/add-two-numbers/">Add Two Numbers</a> 重複，這篇就不多寫了</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Remove Duplicates from Sorted List</title>
      <link href="/2023/02/09/remove-duplicates-from-sorted-list/"/>
      <url>/2023/02/09/remove-duplicates-from-sorted-list/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/">題目</a><br>思路：</p><ol><li><p>既然是 Linked List，我們可以宣告一個指標 <code>curr</code> 指向第一個 node，用 while 迴圈一次檢查一個 node (檢查完將指標移到下一個 node)</p><ul><li>不能直接用 <code>head</code> 來移動，因為到時候回傳答案的時候需要回傳這個 <code>head</code></li></ul></li><li><p>設定 while 可以繼續檢查的條件：有時要先寫 while 的內容，才會比較確定 while 條件應該怎麼寫，這時可以先寫 <code>while True:</code>，等內容寫完再來改條件</p><a id="more"></a></li><li><p>寫 while 內容</p><ol><li><p>假如 <code>curr.val</code> 跟下一個一樣，就把 next 接到下下個</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> curr.val == curr.next.val:</span><br><span class="line">    curr.next = curr.next.next</span><br></pre></td></tr></table></figure></li><li><p>但假如下下個也一樣呢？=&gt; 把上面的 <code>if</code> 改成 <code>while</code>，讓最後 <code>curr.next</code> 所指的 val 一定是不一樣的</p></li><li><p>改成 while 之後，檢查條件會被重複執行。因為 <code>curr.next</code> 有可能會是 <code>None</code>，所以條件改為<br><code>while curr.val == (curr.next and curr.next.val):</code></p></li><li><p>離開 while 之後：<br><code>curr = curr.next  # 把指標移到下一個 node，以便下次的檢查</code></p></li></ol></li><li><p>回去修改 while 條件：什麼條件成立我們才能繼續檢查(執行 while 內容)？</p><ol><li>首先 <code>curr</code> 不能是 <code>None</code><ul><li><code>curr</code> 有可能是 <code>None</code>，因為我們一直把它指向下一個 Node，到了盡頭 <code>curr</code> 就會是 <code>None</code></li></ul></li><li>即使 <code>curr.next</code> 是 <code>None</code>，還是可以順利執行迴圈內容</li><li>結論：條件為 <code>while curr:</code></li></ol></li><li><p>離開 while 之後就大功告成，回傳答案 <code>head</code></p></li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head: Optional[ListNode])</span> -&gt; Optional[ListNode]:</span></span><br><span class="line">    curr = head  <span class="comment"># 等一下可以在 while 迴圈中移動的指標</span></span><br><span class="line">    <span class="keyword">while</span> curr:</span><br><span class="line">        <span class="keyword">while</span> curr.val == (curr.next <span class="keyword">and</span> curr.next.val):</span><br><span class="line">            curr.next = curr.next.next</span><br><span class="line">        curr = curr.next</span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Add Two Numbers</title>
      <link href="/2023/02/03/add-two-numbers/"/>
      <url>/2023/02/03/add-two-numbers/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/add-two-numbers/description/">題目</a><br>思路：</p><ol><li>既然 Linked List 是由個位數開始，剛好可以用小學學的加法來從個位數開始相加。所以須設計一個迴圈來執行可重複執行的加法動作，一步步構建答案所需的 linked list，一次建立一個 node，直到完成。</li><li>迴圈要可重複執行，需要有個指標，在迴圈內對該指標所指的 node 做操作，並在迴圈結束時讓指標指到下一個 node，讓下一次迴圈來操作<a id="more"></a></li><li>迴圈內算出的當下位數的答案 <code>digit_sum % 10</code> 的 node 為何是指定給 <code>curr.next</code> 而非 <code>curr</code>?<ul><li>因為迴圈結束前 <code>curr</code> 必須指向下一個 node，也就是 <code>curr.next</code>，以下分兩種情況解釋：<ul><li>答案放在 <code>curr</code> 身上：必須創造一個空的 node 來當 <code>curr.next</code>，而假如這次的迴圈已經是最後一次了，此 linked list 的尾巴就會多一個空的 node</li><li>答案放在 <code>curr.next</code> 身上：迴圈結束前 <code>curr</code> 指向 <code>curr.next</code> 繼續下一次的操作，假如此次已是最後一次迴圈，也不會多出空的 node 在 linked list 末端，只會在開頭多出一個沒用到的 dummy_head 而已，因此最後回傳答案時是回傳 <code>dummy_head.next</code></li></ul></li></ul></li></ol><p>Python3 solution</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: Optional[ListNode], l2: Optional[ListNode])</span> -&gt; Optional[ListNode]:</span></span><br><span class="line">    carry = <span class="number">0</span>  <span class="comment"># 位數相加後除以 10 得到的商</span></span><br><span class="line">    dummy_head = ListNode()  <span class="comment"># 用 dummy_head 保留最前面的指標，到時候才有辦法回傳答案</span></span><br><span class="line">    curr = dummy_head        <span class="comment"># 不能只用 `curr = ListNode()`，因為 `curr` 所指的 node 必須一直變</span></span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> carry:  <span class="comment"># 可以繼續加的條件</span></span><br><span class="line">        v1 = l1 <span class="keyword">and</span> l1.val <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">        v2 = l2 <span class="keyword">and</span> l2.val <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">        digit_sum = v1 + v2 + carry</span><br><span class="line">        carry = digit_sum // <span class="number">10</span></span><br><span class="line">        curr.next = ListNode(digit_sum % <span class="number">10</span>)</span><br><span class="line">        curr = curr.next</span><br><span class="line">        l1 = l1 <span class="keyword">and</span> l1.next</span><br><span class="line">        l2 = l2 <span class="keyword">and</span> l2.next</span><br><span class="line">    <span class="keyword">return</span> dummy_head.next</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Search Insert Position</title>
      <link href="/2022/12/08/search-insert-position/"/>
      <url>/2022/12/08/search-insert-position/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/search-insert-position/description">題目</a><br>思路：最直覺是直接 iterate nums，不過題目指定要 O(log n)，所以用 binary search 才能達到</p><ol><li><p>設定左右兩個指標作為<strong>可能答案範圍</strong>：[left, right]</p></li><li><p><code>while left &lt; right</code>: 設定 binary search 可繼續執行的條件</p><ul><li>此時會想，要用 <code>&lt;</code> or <code>&lt;=</code> 呢？判斷依據為在迴圈裡變更完 left or right 之後，<strong>不能造成無窮迴圈</strong></li><li>但此時還沒寫迴圈內容，所以可以先直觀的設定一個，譬如 <code>&lt;</code>，等寫完迴圈內容再來驗證是否適合<a id="more"></a></li></ul></li><li><p>迴圈寫完後，回來 check while condition，看看 while 把 left &amp; right 收斂到最後幾個的時候，經過以下的操作會不會有無窮迴圈</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> left = mid + <span class="number">1</span></span><br><span class="line"><span class="number">2.</span> right = mid</span><br></pre></td></tr></table></figure><ol><li><p>剩最後三個：此時 mid 會是中間那個，上面兩種操作都有助於收斂範圍</p></li><li><p>剩最後兩個：此時 mid == left，上面兩種操作一樣可以收斂範圍</p></li><li><p>剩最後一個：此時 left == mid == right，以目前的 while 條件設定，會因為不符而跳出，所以跳出迴圈後的情況就是這個</p><ul><li>如果 while 條件為 <code>left &lt;= right</code>，則 <code>right = mid</code> 這個操作會造成無窮迴圈，因此不能設定為 <code>&lt;=</code></li></ul><p>=&gt; 確認不會造成無窮迴圈，所以此 while 條件設定是正確的</p></li></ol></li><li><p>Post processing: 跳出 while 後的情況為 <code>left == right</code>，此時再跟 target 比，決定答案為何</p><ul><li>為何跳出 while 後的情況不會是 <code>left &gt; right</code>?<ul><li>要讓 <code>left &gt; right</code>，必須執行到 <code>left = mid + 1</code>，而且此時 <code>left</code> 和 <code>right</code> 都必須等於 <code>mid</code>，而如果已經是這個情況，就不會再進到迴圈裡，而是已經跳出了</li></ul></li></ul></li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">    left, right = <span class="number">0</span>, len(nums) - <span class="number">1</span>  <span class="comment"># 設定左右兩個指標作為可能答案範圍：[left, right]</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span>  <span class="comment"># Python3 不會有 integer overflow 的問題，所以可以直接 (left + right)，然後用 `//` 無條件捨去，避免小數</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">if</span> nums[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span>  <span class="comment"># 此時最小的可能答案為 `mid + 1`</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid  <span class="comment"># 此時最大的可能答案為 `mid`</span></span><br><span class="line">    <span class="keyword">return</span> left + <span class="number">1</span> <span class="keyword">if</span> nums[left] &lt; target <span class="keyword">else</span> left</span><br></pre></td></tr></table></figure><p>更詳細解說可參考<a href="https://leetcode.com/problems/search-insert-position/solutions/249092/come-on-forget-the-binary-search-pattern-template-try-understand-it/">此篇文章</a></p><p>類似題：<a href="https://leetcode.com/problems/first-bad-version/">First Bad Version</a><br>延伸題：<a href="https://leetcode.com/problems/find-peak-element/description/">Find Peak Element</a></p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3Sum</title>
      <link href="/2022/12/05/3-sum/"/>
      <url>/2022/12/05/3-sum/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/3sum/description/">題目</a><br>思路：</p><ul><li>用三個指標，iterate 最左邊那個，找出對應於每個 left 指標的所有 result</li><li>先把 nums 排序，如此移動 mid, right 指標時就有個依據</li></ul><p>Python3 solution</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    nums.sort()</span><br><span class="line">    <span class="keyword">for</span> left <span class="keyword">in</span> range(len(nums) - <span class="number">2</span>):  <span class="comment"># 右邊須留兩個空位給另兩個指標</span></span><br><span class="line">        <span class="keyword">if</span> left &gt; <span class="number">0</span> <span class="keyword">and</span> nums[left] == nums[left - <span class="number">1</span>]:  <span class="comment"># 排除重複的 result，left 必須 &gt; 0 才會有前一個</span></span><br><span class="line">            <span class="keyword">continue</span>                                   <span class="comment"># - 假如 nums[left] 是一樣的，最後找到的 result 也會是一樣的，所以要排除掉</span></span><br><span class="line">        mid = left + <span class="number">1</span></span><br><span class="line">        right = len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> mid &lt; right:  <span class="comment"># 設定有效範圍，在此範圍內尋找符合的 mid, right</span></span><br><span class="line">            t_sum = nums[left] + nums[mid] + nums[right]</span><br><span class="line">            <span class="keyword">if</span> t_sum &lt; <span class="number">0</span>:</span><br><span class="line">                mid += <span class="number">1</span>  <span class="comment"># 此時必須讓 t_sum 變大，所以將 mid 往右移</span></span><br><span class="line">            <span class="keyword">elif</span> t_sum &gt; <span class="number">0</span>:</span><br><span class="line">                right -= <span class="number">1</span>  <span class="comment"># 此時必須讓 t_sum 變小，所以將 right 往左移</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.append([nums[left], nums[mid], nums[right]])</span><br><span class="line">                <span class="keyword">while</span> mid &lt; right <span class="keyword">and</span> nums[mid] == nums[mid + <span class="number">1</span>]:  <span class="comment"># 跳過 mid 重複的部分</span></span><br><span class="line">                    mid += <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> mid &lt; right <span class="keyword">and</span> nums[right] == nums[right - <span class="number">1</span>]:  <span class="comment"># 跳過 right 重複的部分</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 正常的移動 mid, right，尋找下一個符合的 result</span></span><br><span class="line">                mid += <span class="number">1</span></span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> two pointers </tag>
            
            <tag> sorting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>為什麼 Python dict 的 get item operation 時間複雜度為 O(1) ？</title>
      <link href="/2022/07/25/why-dict-o1/"/>
      <url>/2022/07/25/why-dict-o1/</url>
      
        <content type="html"><![CDATA[<p>如果去 google，大部分查到的都會說因為 Python 會把 key 經過 hash function 運算，得到一個 dict 真正內部在使用的 key，從而找到對應的 value。而一個好的 hash function 它的運算所需時間是不會隨著 n 增加而變大的，所以 dict 的 get item operation 時間複雜度為 O(1) 。</p><p>不過我的疑惑是，經過 hash function 運算得到 key 之後，由這個 key 去找到 value 的時間複雜度是 O(1) 嗎？除非這個也是 O(1) 才能說整個 get item operation 是 O(1) 。</p><a id="more"></a><p>後來再多翻了一些說明，終於看到一兩個回答可以解釋這個疑惑。可以想像成今天我們有一個 array，我們只要知道 index 就可以知道要去哪裡找到對應的 value ( 因此是 O(1) )，經由 hash function 算出來的 key 就好像 array 的 index 一樣，只要看到這個 key 就知道要去哪裡找對應的 value，不會受 n 大小的影響，所以是 O(1)</p><p>另一個比較生活化的例子：hash function 算出來的 key，就好像你在圖書館要找書時用的索引，看到索引你就會知道書在哪一區、哪個櫃子裡，即使你需要照著圖書館的索引指示找一下才能找到，但這個過程所花的時間，跟圖書館有多少書沒有關係。</p><p>References:</p><ul><li><a href="https://qr.ae/pvMCpM">https://qr.ae/pvMCpM</a></li><li><a href="https://qr.ae/pvMCIv">https://qr.ae/pvMCIv</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Mac 加入 ssh key 的步驟</title>
      <link href="/2021/01/14/add-ssh-steps/"/>
      <url>/2021/01/14/add-ssh-steps/</url>
      
        <content type="html"><![CDATA[<ol><li><p><code>ssh-keygen -t ed25519 -C &quot;{你的 email}&quot;</code></p><ul><li>預設路徑假如已有相同檔案，記得指定新的<strong>完整</strong>路徑</li><li>如檔名不用預設的，下面 <code>id_ed25519</code> 自行替換成自己的檔名</li></ul></li><li><p><code>vi ~/.ssh/config</code></p><ul><li><p>舉例：加上如下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host GitHub</span><br><span class="line"> HostName github.com</span><br><span class="line"> IdentityFile ~&#x2F;.ssh&#x2F;id_ed25519</span><br><span class="line"> IdentitiesOnly yes</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>ssh-add -K ~/.ssh/id_ed25519</code></p><ul><li>register your private key with <code>ssh-agent</code></li></ul></li><li><p><code>pbcopy &lt; ~/.ssh/id_ed25519.pub</code></p></li><li><p>貼到所使用的服務網站的相對應設定頁面</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Development Note </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>簡單統整 JWT 相對於傳統 Session 驗證的好處</title>
      <link href="/2021/01/14/jwt-digest/"/>
      <url>/2021/01/14/jwt-digest/</url>
      
        <content type="html"><![CDATA[<ul><li>Server 不用存 Session</li><li>只有在 Client 拿新 JWT 時才需要跟 DB 溝通<ul><li>Clent 拿的時機：JWT 到期或第一次拿</li><li>為何不需跟 DB 溝通？<ul><li>因為 JWT 裡已有所需資訊</li><li>但假如業務需求需要另外取敏感資訊的話還是需要碰 DB</li></ul></li></ul></li><li><a href="https://medium.com/%E9%BA%A5%E5%85%8B%E7%9A%84%E5%8D%8A%E8%B7%AF%E5%87%BA%E5%AE%B6%E7%AD%86%E8%A8%98/%E7%AD%86%E8%A8%98-%E9%80%8F%E9%81%8E-jwt-%E5%AF%A6%E4%BD%9C%E9%A9%97%E8%AD%89%E6%A9%9F%E5%88%B6-2e64d72594f8">參考</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Development Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
            <tag> authentication </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL/MySQL local docker 開發的初始 setup</title>
      <link href="/2020/02/07/postgresql-mysql-init-setup/"/>
      <url>/2020/02/07/postgresql-mysql-init-setup/</url>
      
        <content type="html"><![CDATA[<p>container run 起來之後：<br><strong>PostgreSQL:</strong></p><ol><li><code>docker exec -it {db-container-name} psql -U postgres</code><ul><li>以預設 user <code>postgres</code> 連進 DB</li></ul></li><li><code>create user {username} with password &#39;{password}&#39;;</code></li><li><code>create database {database_name} with owner {username};</code><a id="more"></a></li><li>大功告成，可以用 <code>\l</code> 列出所有 database &amp; <code>\du</code> 列出所有 user 來確認</li></ol><ul><li>P.S. 假如一開始忘了指定 database owner 或想改變 owner: <code>alter database {database_name} owner to {owner_name};</code></li></ul><p><strong>MySQL: (以 5.7 為例)</strong></p><ol><li>環境變數須設置 <code>MYSQL_ROOT_PASSWORD</code></li><li>docker exec -it {db-container-name} mysql -p<ul><li>以預設 user <code>root</code> 連進去，輸入上面環境變數設置的密碼</li></ul></li><li><code>create user &#39;{username}&#39;@&#39;localhost&#39; identified by &#39;{password}&#39;;</code><ul><li>Use <code>localhost</code> due to working on the machine with MySQL.</li></ul></li><li><code>create database {database_name};</code></li><li>確認：<ul><li><code>show databases;</code></li><li><code>SELECT user FROM mysql.user;</code></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Development Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> database </tag>
            
            <tag> postgresql </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 pipenv 管理 requirements 搭配 docker-compose local 開發</title>
      <link href="/2020/02/06/pipenv-intro/"/>
      <url>/2020/02/06/pipenv-intro/</url>
      
        <content type="html"><![CDATA[<ul><li>Local 開發是跑在 Docker 的虛擬環境裡，所以 Pipenv 產生的虛擬環境只是用來裝套件產生 Pipfile.lock 而已</li><li>用 pipenv 就不用自己寫 requirements.txt，不但可以自動安裝最新版的套件，而且可以很輕鬆的固定住對應 sub-packages 的版本</li><li>想一次更新所有套件也很容易</li><li>步驟：(以裝一個 package 為例)<a id="more"></a><ol><li><code>pip install --user pipenv</code><ul><li>裝完後 command line 找不到 pipenv 的需把對應資料夾加入 PATH</li></ul></li><li><code>cd</code> 到專案資料夾</li><li><code>pipenv install {target-package}</code><ul><li>假如原本沒有 virtual environment，pipenv 會先幫你產生一個基於這個資料夾的 virtual environment<ul><li>假如上層資料夾有 Pipfile，pipenv 會直接用那個 Pipfile 的 virtual environment，不會產生新的<ul><li>這是因為 pipenv 的虛擬環境是 project base 的，所以你可以在一個 Django project 裡的任何一個資料夾執行 pipenv 都可以用到這個 project 的虛擬環境</li><li>而且正常情況下不會有 Django project 裡還有 Django project 的情況，所以不需要在上層已有 Pipfile 的情況下，又在目前資料夾產生 Pipfile</li></ul></li></ul></li><li>這邊不要指定版號，pipenv 就會安裝最新版</li><li>pipenv 會產生 Pipfile 和 Pipfile.lock, 後者有記錄這個 package 和 sub-packages 的固定版號</li></ul></li><li><code>pipenv lock -r &gt; requirements.txt</code><ul><li>將 Pipfile.lock 輸出為 requirements.txt 格式</li></ul></li><li>接著就可以在 Dockerfile 裡直接用這個 requirements.txt 啦</li></ol></li><li>如果要開新的 Django project:<ol><li><code>cd {你想要 project 資料夾放的位置}</code></li><li><code>mkdir {project-name}; cd {project-name}</code></li><li><code>pipenv install Django</code></li><li><code>pipenv run django-admin startproject {project-name} .</code><ul><li><code>.</code>: 要把 <code>manage.py</code> 放在當前資料夾</li></ul></li></ol></li><li>之後假如要把 requirements.txt 裡所有的 top-level 套件都更新的話:<ol><li><code>pipenv update</code><ul><li>這個我自己沒試過，不過看文件應該是用這指令</li></ul></li><li>重新輸出 requirements.txt</li></ol></li><li>有看到另一種做法是可以不用自己產生 requirements.txt，直接在 Dockerfile 裡用 pipenv 動態生成 requirements.txt 來用，不過我自己還沒試過<ul><li><a href="https://www.evernote.com/l/ACwHCpgvaTNHOY2_L9U8Hso6dvJ9jGpp-Qc">Ref.</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Development Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> package management </tag>
            
            <tag> pipenv </tag>
            
            <tag> docker </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective Python Note 2</title>
      <link href="/2018/03/25/effective-python-note-2/"/>
      <url>/2018/03/25/effective-python-note-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This article is composed of some notes from book <a href="https://effectivepython.com/">Effective Python</a>.</p></blockquote><h2 id="Use-property-to-define-special-behavior-when-attributes-are-accessed-set-on-your-objects-if-necessary"><a href="#Use-property-to-define-special-behavior-when-attributes-are-accessed-set-on-your-objects-if-necessary" class="headerlink" title="Use @property to define special behavior when attributes are accessed/set on your objects, if necessary"></a>Use @property to define special behavior when attributes are accessed/set on your objects, if necessary</h2><p>Another use case is to only specify getter to make that attribute read-only.</p><a id="more"></a><figure class="highlight python"><figcaption><span>property_decorator_example.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self._rating = <span class="number">0</span></span><br><span class="line">        self._reviewer_count = <span class="number">0</span>  <span class="comment"># read-only attribute</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rating</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Getter for _rating"""</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self._rating</span><br><span class="line"></span><br><span class="line"><span class="meta">    @rating.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rating</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="string">"""Setter for _rating"""</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Rating must be an integer!'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= value &lt;= <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Rating must between 0 ~ 10!'</span>)</span><br><span class="line">        self._rating = value</span><br><span class="line">        self._reviewer_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reviewer_count</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._reviewer_count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">movie = Movie()</span><br><span class="line">print(<span class="string">'Before rating:'</span>, movie.rating)</span><br><span class="line">movie.rating = <span class="number">8</span></span><br><span class="line">print(<span class="string">'After rating:'</span>, movie.rating)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    movie.rating = <span class="number">11</span></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(str(e))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Reviewer count:'</span>, movie.reviewer_count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    movie.reviewer_count = <span class="number">5</span></span><br><span class="line"><span class="keyword">except</span> AttributeError <span class="keyword">as</span> e:</span><br><span class="line">    print(str(e))</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Before rating: <span class="number">0</span></span><br><span class="line">After rating: <span class="number">8</span></span><br><span class="line">Rating must between <span class="number">0</span> ~ <span class="number">10</span>!</span><br><span class="line">Reviewer count: <span class="number">1</span></span><br><span class="line">can<span class="string">'t set attribute</span></span><br></pre></td></tr></table></figure><h2 id="Use-descriptors-for-reusable-property-methods"><a href="#Use-descriptors-for-reusable-property-methods" class="headerlink" title="Use descriptors for reusable @property methods"></a>Use descriptors for reusable @property methods</h2><p>If you want to reuse the logic in <code>@property</code> methods, you have to use a <strong>descriptor</strong>. The <strong>descriptor protocol</strong> defines how attribute access is interpreted by the language.</p><p><strong>Descriptor:</strong> an object attribute with “binding behavior”, one whose attribute access has been overridden by methods in the descriptor protocol</p><p><strong>Descriptor Protocol:</strong><br><code>descriptor.__get__(self, obj, type=None) -&gt; value</code><br><code>descriptor.__set__(self, obj, value) -&gt; None</code><br><code>descriptor.__delete__(self, obj) -&gt; None</code></p><figure class="highlight python"><figcaption><span>descriptor_example.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> weakref <span class="keyword">import</span> WeakKeyDictionary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grade</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._instance_value_map = WeakKeyDictionary()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> self._instance_value_map.get(instance, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= value &lt;= <span class="number">100</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Grade must be between 0 and 100'</span>)</span><br><span class="line">        self._instance_value_map[instance] = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exam</span>:</span></span><br><span class="line">    <span class="comment"># Descriptors only works with class attributes</span></span><br><span class="line">    math_grade = Grade()</span><br><span class="line">    writing_grade = Grade()</span><br><span class="line">    science_grade = Grade()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">first_exam = Exam()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    first_exam.writing_grade = <span class="number">120</span></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(str(e))</span><br><span class="line">first_exam.writing_grade = <span class="number">82</span></span><br><span class="line">second_exam = Exam()</span><br><span class="line">second_exam.writing_grade = <span class="number">75</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'First writing grade:'</span>, first_exam.writing_grade)</span><br><span class="line">print(<span class="string">'Second writing grade:'</span>, second_exam.writing_grade)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Grade must be between <span class="number">0</span> <span class="keyword">and</span> <span class="number">100</span></span><br><span class="line">First writing grade: <span class="number">82</span></span><br><span class="line">Second writing grade: <span class="number">75</span></span><br></pre></td></tr></table></figure><p><strong>Under the hood</strong></p><p>When you assign a property as in line 28, it will be interpreted as: <code>Exam.__dict__[&#39;writing_grade&#39;].__set__(first_exam, 120)</code><br>When you retrieve a property as in line 35, <code>first_exam.writing_grade</code> will be interpreted as: <code>Exam.__dict__[&#39;writing_grade&#39;].__get__(first_exam, Exam)</code></p><p>What drives this behavior is the <code>__getattribute__</code> method of object. In short, when an Exam instance doesn’t have an attribute named <code>writing_grade</code>, Python will fall back to the Exam class’s attribute instead. If this class attribute is an object that has <code>__get__</code> and <code>__set__</code> methods, Python will assume you want to follow the descriptor protocol.</p><p><em>Note: Descriptor protocol only works with class attributes, so don’t use it with instance attributes. It’s reasonable to keep object behavior in the class definition. Otherwise, the mere act of assigning a descriptor to an instance attribute would change the object behavior. (<a href="https://stackoverflow.com/questions/12599972/descriptors-as-instance-attributes-in-python">more discussion on StackOverflow</a>)</em></p><p><strong>Why using <code>_instance_value_map</code>?</strong><br>A single <code>Grade</code> instance is shared across all <code>Exam</code> instances for the class attribute <code>writing_grade</code>, so we need the <code>Grade</code> class to keep track of its value for each unique <code>Exam</code> instance.</p><p><strong>Why using <code>WeakKeyDictionary</code> instead of just <code>{}</code>?</strong><br>Use <code>{}</code> will leak memory.</p><p>The <code>_instance_value_map</code> will hold a reference to every instance of <code>Exam</code> ever passed to <code>__set__</code> over the lifetime of the program, preventing cleanup by the garbage collector.</p><p><code>WeakKeyDictionary</code> will remove <code>Exam</code> instances from its set of keys when the runtime knows it’s holding the instance’s last remaining reference in the program.</p><h2 id="Annotate-class-attributes-with-metaclasses"><a href="#Annotate-class-attributes-with-metaclasses" class="headerlink" title="Annotate class attributes with metaclasses"></a>Annotate class attributes with metaclasses</h2><p>Continue with the above descriptor section. You can avoid both memory leaks and the <code>weakref</code> module by using metaclasses along with descriptors.</p><figure class="highlight python"><figcaption><span>descriptor_with_metaclass_example.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grade</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.internal_attr_name = <span class="literal">None</span>  <span class="comment"># will be assigned by the metaclass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> getattr(instance, self.internal_attr_name, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= value &lt;= <span class="number">100</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Grade must be between 0 and 100'</span>)</span><br><span class="line">        setattr(instance, self.internal_attr_name, value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(meta_cls, name, bases, class_dict)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> class_dict.items():</span><br><span class="line">            <span class="keyword">if</span> isinstance(value, Grade):</span><br><span class="line">                value.internal_attr_name = <span class="string">f'_<span class="subst">&#123;key&#125;</span>'</span></span><br><span class="line">        <span class="keyword">return</span> type.__new__(meta_cls, name, bases, class_dict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseExam</span><span class="params">(metaclass=Meta)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exam</span><span class="params">(BaseExam)</span>:</span></span><br><span class="line">    <span class="comment"># Descriptors only works with class attributes</span></span><br><span class="line">    math_grade = Grade()</span><br><span class="line">    writing_grade = Grade()</span><br><span class="line">    science_grade = Grade()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">first_exam = Exam()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    first_exam.writing_grade = <span class="number">120</span></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(str(e))</span><br><span class="line">first_exam.writing_grade = <span class="number">82</span></span><br><span class="line">second_exam = Exam()</span><br><span class="line">second_exam.writing_grade = <span class="number">75</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'First writing grade:'</span>, first_exam.writing_grade)</span><br><span class="line">print(<span class="string">'Second writing grade:'</span>, second_exam.writing_grade)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Grade must be between <span class="number">0</span> <span class="keyword">and</span> <span class="number">100</span></span><br><span class="line">First writing grade: <span class="number">82</span></span><br><span class="line">Second writing grade: <span class="number">75</span></span><br></pre></td></tr></table></figure><p><strong>The <code>__new__</code> method of metaclasses</strong><br>It’s run immediately after the <code>class</code> statement’s entire body has been processed.</p><p>If using <code>print(meta_cls, name, bases, class_dict, sep=&#39;\n&#39;, end=&#39;\n\n&#39;)</code> in the first line of <code>__new__</code> in the above program:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#39;__main__.Meta&#39;&gt;</span><br><span class="line">BaseExam</span><br><span class="line">()</span><br><span class="line">&#123;&#39;__module__&#39;: &#39;__main__&#39;, &#39;__qualname__&#39;: &#39;BaseExam&#39;&#125;</span><br><span class="line">&lt;class &#39;__main__.Meta&#39;&gt;</span><br><span class="line">Exam</span><br><span class="line">(&lt;class &#39;__main__.BaseExam&#39;&gt;,)</span><br><span class="line">&#123;&#39;__module__&#39;: &#39;__main__&#39;, &#39;__qualname__&#39;: &#39;Exam&#39;, &#39;math_grade&#39;: &lt;__main__.Grade object at 0x1021855c0&gt;, &#39;writing_grade&#39;: &lt;__main__.Grade object at 0x1021855f8&gt;, &#39;science_grade&#39;: &lt;__main__.Grade object at 0x102185630&gt;&#125;</span><br></pre></td></tr></table></figure><p><em>Note: Another use case of metaclasses is to validate class attributes of subclasses. We can do the validation in the <code>__new__</code> method and detect improper subclasses before their usage.</em></p>]]></content>
      
      
      <categories>
          
          <category> Book Digest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective Python Note</title>
      <link href="/2018/03/25/effective-python-note/"/>
      <url>/2018/03/25/effective-python-note/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This article is composed of some notes from book <a href="https://effectivepython.com/">Effective Python</a>.</p></blockquote><h2 id="Scope-Resolution"><a href="#Scope-Resolution" class="headerlink" title="Scope Resolution"></a>Scope Resolution</h2><p>Python’s scope resolution follows the order below:</p><ol><li>current function</li><li>enclosing scopes: like a outer function enclosing the current function</li><li>global scope</li><li>build-in scope<a id="more"></a></li></ol><figure class="highlight python"><figcaption><span>Sample code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">global_var = <span class="string">'global value'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    enclosing_var = <span class="string">'enclosing value'</span></span><br><span class="line">    enclosing_var_2 = <span class="string">'enclosing value 2'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        local_var = <span class="string">'local value'</span></span><br><span class="line">        print(<span class="string">'local_var:'</span>, local_var)</span><br><span class="line">        print(<span class="string">'enclosing_var:'</span>, enclosing_var)</span><br><span class="line">        enclosing_var_2 = <span class="string">'changed enclosing value 2'</span>  <span class="comment"># a new variable definition</span></span><br><span class="line"></span><br><span class="line">    inner()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'glocal_var:'</span>, global_var)</span><br><span class="line">    print(<span class="string">'enclosing_var_2:'</span>, enclosing_var_2)</span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">local_var: local value</span><br><span class="line">enclosing_var: enclosing value</span><br><span class="line">glocal_var: <span class="keyword">global</span> value</span><br><span class="line">enclosing_var_2: enclosing value <span class="number">2</span></span><br></pre></td></tr></table></figure><p>Note that the assignment of <code>enclosing_var_2</code> in function <code>inner</code> is actually a new variable definition, because <code>enclosing_var_2</code> is not in the current scope. It’s designed to prevent local variables polluting its outer scopes. So we can see value of <code>enclosing_var_2</code> doesn’t change.</p><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p>It’s a function using <code>yield</code> instead of <code>return</code>.</p><p>Return an iterator when it gets called.</p><p>Every call of <code>next</code> with that iterator will result in code execution to the next <code>yield</code> and the iterator will return what’s passed to the <code>yield</code>.</p><figure class="highlight python"><figcaption><span>simple_generator.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">it = gen()</span><br><span class="line"></span><br><span class="line">print(next(it))</span><br><span class="line">print(next(it))</span><br><span class="line">print(next(it))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>Whenever you want to use a function to compose a list, you can consider using a generator instead, which is a cleaner way.</p><figure class="highlight python"><figcaption><span>generator_simple_use_case.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_results</span><span class="params">(num)</span>:</span></span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        results.append(i * <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results_gen</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        <span class="keyword">yield</span> i * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'Results from create_results:'</span>, create_results(<span class="number">3</span>))</span><br><span class="line">print(<span class="string">'Results from results_gen:'</span>, list(results_gen(<span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Results <span class="keyword">from</span> create_results: [<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">Results <span class="keyword">from</span> results_gen: [<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br></pre></td></tr></table></figure><p><strong>A pitfall</strong><br>If an iterator is used up (a StopIteration exception has been thrown), you will get no results for iterating it again. And there will be no exceptions.</p><figure class="highlight python"><figcaption><span>generator_pitfall.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results_gen</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(number):</span><br><span class="line">        <span class="keyword">yield</span> i * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    total = sum(numbers)  <span class="comment"># `sum` will use up iterator `numbers`</span></span><br><span class="line">    result = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> numbers:  <span class="comment"># no things to iterate in `numbers`</span></span><br><span class="line">        percent = value / total * <span class="number">100</span></span><br><span class="line">        result.append(percent)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">it = results_gen(<span class="number">3</span>)</span><br><span class="line">percentages = normalize(it)</span><br><span class="line">print(<span class="string">'percentages:'</span>, percentages)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">percentages: []</span><br></pre></td></tr></table></figure><p><strong>Solutions</strong></p><ol><li>Copy content of the iterator to a list and use the list afterward.</li><li>Pass a lambda instead of <code>numbers</code> which returns a new generator on every call.</li><li>Implement iterator protocol. That is, implement <code>__iter__</code> as a generator.</li></ol><figure class="highlight python"><figcaption><span>generator_pitfall_sol_3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultsContainer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        self.number = number</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.number):</span><br><span class="line">            <span class="keyword">yield</span> i * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">results_container = ResultsContainer(<span class="number">3</span>)</span><br><span class="line">percentages = normalize(results_container)</span><br><span class="line">print(<span class="string">'percentages:'</span>, percentages)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">percentages: [<span class="number">0.0</span>, <span class="number">33.33333333333333</span>, <span class="number">66.66666666666666</span>]</span><br></pre></td></tr></table></figure><p>Each traversal of the <code>results_container</code> object will cause it to return a new iterator (calling <code>__iter__</code> every time), so there won’t be this issue.</p><h2 id="Single-asterisk-used-in-function-definition-and-function-call"><a href="#Single-asterisk-used-in-function-definition-and-function-call" class="headerlink" title="Single asterisk used in function definition and function call"></a>Single asterisk used in function definition and function call</h2><p><strong><code>*numbers</code> is called optional positional arguments.</strong> It indicates that this function can take zero or more than one positional arguments starting from that position.</p><p>It should be put after all positional arguments in a function definition.</p><p>It will pack those arguments into one tuple to use in the function.</p><p><strong><code>*</code> before <code>nums</code> will unpack any iterable <code>nums</code></strong> so that <code>print_numbers(0, 5, *nums)</code> will be <code>print_numbers(0, 5, 1, 2, 3)</code></p><figure class="highlight python"><figcaption><span>single_asterisk_with_function.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_numbers</span><span class="params">(first_num, *numbers)</span>:</span></span><br><span class="line">    print(<span class="string">'first_num:'</span>, first_num)</span><br><span class="line">    print(<span class="string">'numbers:'</span>, numbers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print_numbers(<span class="number">0</span>, <span class="number">5</span>, *nums)</span><br><span class="line">print_numbers(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">first_num: <span class="number">0</span></span><br><span class="line">numbers: (<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">first_num: <span class="number">6</span></span><br><span class="line">numbers: ()</span><br></pre></td></tr></table></figure><h2 id="Use-call-special-method-to-turn-class-instances-into-functions"><a href="#Use-call-special-method-to-turn-class-instances-into-functions" class="headerlink" title="Use __call__ special method to turn class instances into functions"></a>Use <code>__call__</code> special method to turn class instances into functions</h2><p>If we define <code>__call__</code> in our class, we can turn the class instances into functions. Each call on the instance will invoke calling of its <code>__call__</code> .</p><p>So, when there is a need for a function to preserve some state, you can consider using a class with <code>__call__</code> method. It’s more readable than a stateful closure.</p><figure class="highlight python"><figcaption><span>callable_class_example.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MissingCounter</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Provide default color count and record how many missing colors when adding increments.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.added = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self.added += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">missing_counter = MissingCounter()</span><br><span class="line">init_dict = &#123;</span><br><span class="line">    <span class="string">'green'</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="string">'blue'</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">color_count_map = defaultdict(missing_counter, init_dict)</span><br><span class="line"></span><br><span class="line">increments = [</span><br><span class="line">    (<span class="string">'red'</span>, <span class="number">5</span>),</span><br><span class="line">    (<span class="string">'blue'</span>, <span class="number">17</span>),</span><br><span class="line">    (<span class="string">'orange'</span>, <span class="number">9</span>)</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> color, amount <span class="keyword">in</span> increments:</span><br><span class="line">    color_count_map[color] += amount</span><br><span class="line"></span><br><span class="line">print(<span class="string">'missing_counter is callable:'</span>, callable(missing_counter))</span><br><span class="line">print(<span class="string">'Missing colors added count:'</span>, missing_counter.added)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">missing_counter <span class="keyword">is</span> callable: <span class="literal">True</span></span><br><span class="line">Missing colors added count: <span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Book Digest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>趨勢科技的 agile tour_by Joy Chen 心得分享 - Agile Tour Taipei 2014</title>
      <link href="/2014/11/12/agile-tour-thoughts/"/>
      <url>/2014/11/12/agile-tour-thoughts/</url>
      
        <content type="html"><![CDATA[<div class="oembed-outer oembed-slideshare"><div class="oembed-inner"><iframe src="https://www.slideshare.net/slideshow/embed_code/key/Iq0aYY2n5UlR9i" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/AgileCommunity/agile-tour-agile-v3" title="Agile Tour Taipei 2014 - 趨勢科技的 agile 之旅" target="_blank">Agile Tour Taipei 2014 - 趨勢科技的 agile 之旅</a> </strong> from <strong><a href="https://www.slideshare.net/AgileCommunity" target="_blank">AgileCommunity</a></strong> </div></div></div><p>上禮拜參加 Agile Tour Taipei 2014，第一場 talk 的 Joy 分享趨勢科技實行 Agile 的經驗，上面是她的 slides</p><p><strong>Agile 的優點與適用情境</strong></p><a id="more"></a><p>下面是第 9 張 slide，以追蹤導彈和固定火炮來比喻 Agile Mentality 和 Plan Driven 的差別<br>我覺得這個比喻很好，一張圖就可以讓大家清楚的看到 Agile 的優點：隨著目標(專案需求)的改變而在每一次的 iteration調整方向，重新瞄準目標，最後才能準確地擊中目標<br>相對來講假如是 Plan Driven(固定火炮) 的話，只要目標一動就無法命中目標了。</p><p><img src="/images/agile-mentality.png" alt=""><br>上面講 agile mentality 適合用在 moving target，但其實如同 Joy 的下一張 slide 所提，適合 Agile Principles 的情境還有很多，其中我覺得 Moving Target 和 Continuous Improvement 是對我來講最有感覺的</p><p>Moving Target:</p><ul><li>Uncertain situation: 假如是新創公司面對一個不確定的市場，就必須要快速取得市場反饋，快速修正</li><li>Brand new knowledge: 面對新的領域、新的知識，一定有很多未知、不確定的事情，此時一樣需要快速的反省與修正</li><li>As early as possible needs: 每個 iteration 結束都會有一個可以 ship 的成品，所以如果需要及早的有實際的成品的話也很適合</li></ul><p>Continuous Improvement: </p><ul><li>Continuously improve a certain capability, practice or skill: 因為每個 iteration 結束都會做回顧，所以可以快速地檢視需要改進的地方，並且快速修正</li></ul><p><strong>Lessons Learned</strong></p><p>Joy 也分享了趨勢在推行 agile 的時候學到的教訓</p><p>牛肉在哪裡？</p><ul><li>因為向上司報告專案成果時沒有事先準備資料來說明實行 agile 之後改善的地方，上司沒有看到牛肉，所以也不會覺得改用 agile 的方式開發之後有甚麼好</li><li>解法：在進行agile的時候就要把專案進度相關數據記錄下來，在進度報告時明確點出改善之處</li></ul><p>我們不幹了！</p><ul><li>一開始實施新的方法，一定會有一段磨合期，假如沒有事先把這段時間算入時程，就會導致必須要不斷加班趕進度的狀況，Joy 有分享一個例子是他們有一個 project 的 team 在 project 完成之後大概流失了一半的人</li><li>解法：實施新方法的時候，一定要把磨合的時間也算進去</li></ul><p>送不出去的價值！</p><ul><li>當只有開發團隊實施 agile，其他團隊沒有配合，會導致每個iteration的成品無法進入下個階段</li><li>解法：必須要所有團隊一起採用 agile 才能真正發揮 agile 的成效，至於詳細的實作方法他們也還在嘗試中</li></ul>]]></content>
      
      
      <categories>
          
          <category> Project Management </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 連續掃描多個 QR code 的實作</title>
      <link href="/2014/11/04/android-multi-qr-code/"/>
      <url>/2014/11/04/android-multi-qr-code/</url>
      
        <content type="html"><![CDATA[<p>使用 GitHub 上 <a href="https://github.com/LivotovLabs/zxscanlib">LivotovLabs/zxscanlib</a> 的 <a href="https://github.com/LivotovLabs/zxscanlib/tree/v0.9.0">v0.9.0</a> 版，目前上面有更新的版本，不過我那時候用的時候最新的就到這版</p><p>假如直接使用這個 library ，手機在掃到 QR code 的時候會震動，然後離開掃描的相機畫面回到前一個畫面，另外，它開相機的時候會把畫面變成橫的(landscape)。所以要達到我的要求的話就需要改一下裡面的 code，這邊分享一下把這個 library 應用到可以連續掃描多個 QR code 的經驗 (使用eclipse)，可以搭配該 project 的 GitHub 頁面說明一起看<a id="more"></a></p><h4 id="目標：可以連續掃描多個-QR-code，當掃到目標-QR-code-的時候跳回原畫面，並使用取得的資料做下一步應用"><a href="#目標：可以連續掃描多個-QR-code，當掃到目標-QR-code-的時候跳回原畫面，並使用取得的資料做下一步應用" class="headerlink" title="目標：可以連續掃描多個 QR code，當掃到目標 QR code 的時候跳回原畫面，並使用取得的資料做下一步應用"></a>目標：可以連續掃描多個 QR code，當掃到目標 QR code 的時候跳回原畫面，並使用取得的資料做下一步應用</h4><p><strong>Dependency Issue</strong><br>把 project clone 下來之後，照著 GitHub 頁面上的說明，將它當作一個 library project 使用，此時假如原本的 project 有用到 android-support-v4.jar，就會產生衝突(因為此 library project 也有用)，我的解決方式是把原本 project 的 android-support-v4.jar 從 libs 裡刪掉</p><p><strong>此 library 的運作模式</strong><br>在想要掃 QR code 的時候使用 <code>ZXScanHelper.scan()</code> 方法，此時 <code>DecodeHandler.handleMessage()</code> 會不斷地被呼叫，decode成功了之後會呼叫 <code>CaptureActivity.handleDecode()</code>，可以在這邊對 decode 之後的結果做篩選，最後可以在我們自己 override 的 <code>onActivityResult()</code> 裡取得解碼後的結果</p><p><strong>解決問題：掃描時相機畫面會變成橫的</strong><br>第一步：刪掉強制轉為 landscape 的 code</p><figure class="highlight java"><figcaption><span>CaptureActivity.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(icicle);</span><br><span class="line">    <span class="comment">// 註解(或刪)掉下面這段就不會強迫在掃QR code時用landscape了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        if (android.os.Build.VERSION.SDK_INT &lt; 8 || ZXScanHelper.isBlockCameraRotation())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Window window = getWindow();</span><br><span class="line">    window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</span><br><span class="line">    setContentView(ZXScanHelper.getCustomScanLayout() &gt; <span class="number">0</span> ? ZXScanHelper.getCustomScanLayout() : R.layout.capture);</span><br><span class="line"></span><br><span class="line">    hasSurface = <span class="keyword">false</span>;</span><br><span class="line">    inactivityTimer = <span class="keyword">new</span> InactivityTimer(<span class="keyword">this</span>);</span><br><span class="line">    beepManager = <span class="keyword">new</span> BeepManager(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ZXScanHelper.getUserCallback() != <span class="keyword">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ZXScanHelper.getUserCallback().onScannerActivityCreated(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：設定 camera 的 orientation，不然在 CaptureActivity 為 portrait 的情況下 camera 會是 landscape</p><figure class="highlight java"><figcaption><span>CameraManager.java - 加上 forceSetCameraOrientation()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Opens the camera driver and initializes the hardware parameters.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> holder The surface object which the camera will draw preview frames into.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException Indicates the camera driver failed to open.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">openDriver</span><span class="params">(SurfaceHolder holder)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        configManager.setDesiredCameraParameters(theCamera);</span><br><span class="line">        forceSetCameraOrientation(); <span class="comment">// 把相機畫面的 orientation 設為跟 CaptureActivity 一樣</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException re)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...省略</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小提醒：GitHub上的說明在 android:configChanges 少了 screenSize，記得加上 (target API level &gt;= 13的話要加，所以應該幾乎都需要加吧)</p><figure class="highlight"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name=<span class="string">"com.google.zxing.client.android.CaptureActivity"</span></span><br><span class="line">                       android:clearTaskOnLaunch=<span class="string">"true"</span></span><br><span class="line">                       android:stateNotNeeded=<span class="string">"true"</span></span><br><span class="line">                       android:configChanges=<span class="string">"orientation|keyboardHidden|screenSize"</span></span><br><span class="line">                       android:theme=<span class="string">"@android:style/Theme.NoTitleBar.Fullscreen"</span></span><br><span class="line">                       android:windowSoftInputMode=<span class="string">"stateAlwaysHidden"</span>&gt;</span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></table></figure><p><strong>解決問題：改為可以連續掃描多個 QR code</strong><br>第一步：設定 <code>ZXUserCallback</code>，實作 <code>onCodeRead()</code> 方法<br>如 GitHub 頁面所說，呼叫 <code>ZXScanHelper.scan()</code> 之前先呼叫<code>ZXScanHelper.setUserCallback(ZXUserCallback cb)</code>，把過濾邏輯寫在 <code>onCodeRead()</code> 裡</p><p>第二步：在 <code>CaptureActivity.handleDecode()</code> 裡增加判斷邏輯，掃到不合格的 QR code 之後要 <code>callrestartPreviewAfterDelay(long delayMS)</code> 重新掃描</p><figure class="highlight java"><figcaption><span>CaptureActivity.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A valid barcode has been found, so give an indication of success and show the results.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rawResult The contents of the barcode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> barcode   A greyscale bitmap of the camera data which was decoded.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDecode</span><span class="params">(Result rawResult, Bitmap barcode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> accept = rawResult != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (accept &amp;&amp; ZXScanHelper.getUserCallback() != <span class="keyword">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        accept = ZXScanHelper.getUserCallback().onCodeRead(rawResult.getText());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (accept)</span><br><span class="line">    &#123;</span><br><span class="line">        handleDecodeExternally(rawResult, barcode);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 掃到不符合條件的 QR code</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// do something you want, ex: show a toast</span></span><br><span class="line"></span><br><span class="line">        restartPreviewAfterDelay(<span class="number">300L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣就大功告成囉！</p>]]></content>
      
      
      <categories>
          
          <category> Development Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Use Retrofit with Dagger - simple example</title>
      <link href="/2014/10/28/use-retrofit-with-dagger/"/>
      <url>/2014/10/28/use-retrofit-with-dagger/</url>
      
        <content type="html"><![CDATA[<p><a href="http://square.github.io/retrofit/">Retrofit</a> 和 <a href="http://square.github.io/dagger/">Dagger</a> 都是 Square 出的 library，網路上已經有很多相關介紹了，因為 Retrofit 的 REST API Interface 的實作建議採用 Singleton 的方式，所以搭配 Dagger 來管理是個蠻好的 paradigm</p><p>今天在這邊分享一個簡單的整合 example，希望可以讓第一次用且想要整合這兩個 libraries 的人快速上手，更 detail 的說明可以參考上面兩個連結~<a id="more"></a></p><figure class="highlight java"><figcaption><span>DaggerModule.java - 提供 injection 的 module，在這裡提供 API Service 的 instance</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span>(</span><br><span class="line">    injects = &#123;</span><br><span class="line">        ExampleActivity<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DaggerModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> APIService <span class="title">provideAPIService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestAdapter.Builder()</span><br><span class="line">            .setEndpoint(Constants.API_SERVICE_ENDPOINT)</span><br><span class="line">            .build()</span><br><span class="line">            .create(APIService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 <code>APIService</code> 就是我們 REST API 的 interface</p><figure class="highlight java"><figcaption><span>可以把所有的 modules 加在這邊，如此 Dagger 在 compile 時就可以幫我們檢查所有的 modules 裡有沒有錯誤</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span>(</span><br><span class="line">    includes = &#123;</span><br><span class="line">        DaggerModule<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WrapperModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>ExampleApplication.java - 自己寫一支 custom 的 Application，維護 ObjectGraph，inject 的動作由它執行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ObjectGraph objectGraph;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        objectGraph = ObjectGraph.create(<span class="keyword">new</span> DaggerModule());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * inject all injectable fields in this &lt;tt&gt;obj&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        objectGraph.inject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> instance of ExampleApplication which this activity belongs to</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExampleApplication <span class="title">from</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (ExampleApplication) activity.getApplication();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>記得在 <code>AndroidManifest.xml</code> 的 <code>&lt;application&gt;</code> tag 加上 <code>android:name</code> 屬性，指定 custom Application 的 class</p><figure class="highlight java"><figcaption><span>BaseActivity.java - 之後我們寫的 Activity 只要繼承它，擁有 ＠inject 的屬性就會自動被注入</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ExampleApplication.from(<span class="keyword">this</span>).inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>ExampleActivity.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    APIService apiService;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來就可以在 <code>ExampleActivity</code> 中自由使用 <code>apiService</code> 啦！</p>]]></content>
      
      
      <categories>
          
          <category> Development Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC 之 DispatcherServlet - url pattern設置問題 (/ vs. /*)</title>
      <link href="/2014/06/16/spring-mvc-url-pattern/"/>
      <url>/2014/06/16/spring-mvc-url-pattern/</url>
      
        <content type="html"><![CDATA[<p>最近把我的 project 轉為 spring mvc 的架構，想說可以順便用 spring 的 RESTful。Controller 的 method 大概如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/show_my_page"</span>, method = RequestMethod.GET)  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">showMyPage</span><span class="params">(Model model)</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// do something  </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"myPage"</span>;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>結果 Server 卻丟出類似如下的 error message：<br><code>WARN PageNotFound:1114 - No mapping found for HTTP request with URI [/myWebApp/WEB-INF/views/myPage.jsp] in DispatcherServlet with name &#39;dispatcherServlet&#39;</code></p><p>我的 jsp 路徑沒錯，google 了好一陣子也找不到解答，後來看 Spring in Action 第三版裡面建議針對DispatcherServlet 用如下的 url-pattern</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不建議用以下這種 (我當時一開始的配置)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不過它的解釋我看不太懂，應該說它並沒有針對這兩個的不同做解釋。總之，我把 url-pattern 改為 / 之後，就可以正常顯示我的 jsp了 (感動 T^T)</p><p>自己的推測：</p><ul><li><strong>url-pattern: /*</strong><br>  DispatcherServlet 會攔截 web app 外部和內部所有的 request，所以當 View 將 request dispatch 給jsp 時會被攔截，而 DispatcherServlet 找不到對應的 method，因此拋出上面那個錯誤</li><li><strong>url-pattern: /</strong><br>  DispatcherServlet 會攔截 web app 外部所有的 request 而不會攔截內部的，所以 View 可以順利的將request dispatch 給 jsp 而不被 DispatcherServlet 攔截</li></ul>]]></content>
      
      
      <categories>
          
          <category> Development Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Server 與 Application Server 的差別</title>
      <link href="/2014/06/07/difference-between-web-and-application-server/"/>
      <url>/2014/06/07/difference-between-web-and-application-server/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/web-architecture.png" alt=""><br>圖片來源: <a href="https://media.amazonwebservices.com/architecturecenter/AWS_ac_ra_web_01.pdf">https://media.amazonwebservices.com/architecturecenter/AWS_ac_ra_web_01.pdf</a></p><p>看到 AWS 關於 web application 的 architecture 這張圖之後，不太懂為何 server 要分為兩層，於是就google 了一下，找到一篇不錯的<a href="http://www.javaworld.com/article/2077354/learn-java/app-server-web-server-what-s-the-difference.html">文章</a>。<a id="more"></a>這邊配合AWS的圖做個簡短的summary:</p><ul><li>Application Server: 專門用來處理 business logic 的，較常見的用法是接受 web server 的 request，執行完 business logic (過程中視需要去 access DB tier)之後把 result 回給 web server</li><li>Web Server: 專門只處理 HTTP request 與 response，當收到 HTTP request 之後，需要 business logic 的部分就從 application server 取，最後把 result 轉為 HTTP response</li></ul>]]></content>
      
      
      <categories>
          
          <category> System Design </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
