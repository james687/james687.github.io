<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>James&#39; Blog</title>
  
  <subtitle>程式隨筆</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://james687.github.io/"/>
  <updated>2023-03-23T05:37:42.496Z</updated>
  <id>https://james687.github.io/</id>
  
  <author>
    <name>James Ho</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>House Robber II</title>
    <link href="https://james687.github.io/2023/03/23/house-robber-ii/"/>
    <id>https://james687.github.io/2023/03/23/house-robber-ii/</id>
    <published>2023-03-23T05:37:15.000Z</published>
    <updated>2023-03-23T05:37:42.496Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/house-robber-ii/">題目</a><br>思路</p><ol><li>跟 <a href="https://leetcode.com/problems/house-robber">House Robber</a> 很像，只差在房子的排列變成頭尾相連，有沒有辦法把這題拆解，變成能用上第一版 House Robber 的解題方法？譬如把環形變回直排？</li><li>變成環形之後多出來的限制讓我們可以把這題分成以下三種情況：<ol><li>搶第一個、不搶最後一個：加入第三種情況，等同於可以<strong>視為直排，但只考慮到倒數第二個</strong></li><li>不搶第一個、搶最後一個：加入第三種情況，等同於可以<strong>視為直排，但從第二個開始考慮</strong></li><li>第一個和最後一個都不搶：可與前兩種情況合併</li></ol><ul><li>最後把以上三種情況合併為粗體的兩種情況，<strong>轉為第一版 House Robber 問題</strong>，接下來只需取兩種情況錢比較多的就是答案</li></ul></li><li>因為現在需多考慮起始 index，我們把<a href="https://james687.github.io/2023/03/20/house-robber">第一版解法</a>的遞迴函式改為多傳入起始 index，並同樣用 <code>@cache</code> 避免同樣的 <code>inner_rob(i, j)</code> 重複計算<ul><li>Base case 寫法：<ol><li>考慮一開始 <code>j</code> 比 <code>i</code> 大的情況，一路因為 <code>inner_rob(i, j - 1)</code>, <code>inner_rob(i, j - 2)</code> 而減少的情況：<ol><li><code>j == i + 2</code> 時：下兩個遞迴節點為 <code>inner_rob(i, i + 1)</code>, <code>inner_rob(i, i)</code></li><li><code>j == i + 1</code> 時： 下兩個遞迴節點為 <code>inner_rob(i, i)</code>, <code>inner_rob(i, i - 1)</code></li></ol><ul><li>此時可以寫出 base case 的兩種情況 <code>j == i</code>, <code>j &lt; i</code>，寫完後將 <code>inner_rob(i, j)</code> 代入 <code>j == i + 1</code> 驗算看看是否正確</li></ul></li><li>考慮一開始 <code>j == i</code> 的情況，代入驗算看看是否正確</li><li>考慮一開始 <code>j &lt; i</code> 的情況，也就是 <code>len(nums) == 1</code> 時：<ul><li>此時得出的答案為 <code>0</code>，是錯的，所以 base case 需多考慮這種情況，加入 <code>len(nums) == 1</code> 時的判斷處理</li></ul></li></ol></li></ul></li><li>取錢比較多的情況即為答案：<code>return max(inner_rob(0, len(nums) - 2), inner_rob(1, len(nums) - 1))</code></li></ol><p>Python3 solution:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def rob(self, nums: List[int]) -&gt; int:</span><br><span class="line">    @cache</span><br><span class="line">    def inner_rob(i, j):</span><br><span class="line">        &quot;&quot;&quot;@return 由 index i 搶到 j 可得的最大收穫&quot;&quot;&quot;</span><br><span class="line">        # Base case</span><br><span class="line">        if len(nums) &#x3D;&#x3D; 1:</span><br><span class="line">            return nums[0]</span><br><span class="line">        if j &#x3D;&#x3D; i:</span><br><span class="line">            return nums[j]</span><br><span class="line">        if j &lt; i:</span><br><span class="line">            return 0</span><br><span class="line">            </span><br><span class="line">        # Recursive case</span><br><span class="line">        return max(inner_rob(i, j - 1), nums[j] + inner_rob(i, j - 2))</span><br><span class="line">        </span><br><span class="line">    return max(inner_rob(0, len(nums) - 2), inner_rob(1, len(nums) - 1))</span><br></pre></td></tr></table></figure><p>如果不用 <code>@cache</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def rob(self, nums: List[int]) -&gt; int:</span><br><span class="line">    l &#x3D; len(nums)</span><br><span class="line">    memo &#x3D; [[None] * l for _ in range(l)]</span><br><span class="line"></span><br><span class="line">    def inner_rob(i, j):</span><br><span class="line">        &quot;&quot;&quot;@return 由 index i 搶到 j 可得的最大收穫&quot;&quot;&quot;</span><br><span class="line">        if len(nums) &#x3D;&#x3D; 1:</span><br><span class="line">            return nums[0]</span><br><span class="line">        if i &#x3D;&#x3D; j:</span><br><span class="line">            return nums[j]</span><br><span class="line">        if j &lt; i:</span><br><span class="line">            return 0</span><br><span class="line">            </span><br><span class="line">        if memo[i][j] is not None:</span><br><span class="line">            return memo[i][j]</span><br><span class="line">        memo[i][j] &#x3D; max(inner_rob(i, j - 1), nums[j] + inner_rob(i, j - 2))</span><br><span class="line">        return memo[i][j]</span><br><span class="line">        </span><br><span class="line">    return max(inner_rob(0, len(nums) - 2), inner_rob(1, len(nums) - 1))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/house-robber-ii/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;跟 &lt;a href=&quot;https://leetcode.com/problems/house-robber&quot;
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="dynamic programming" scheme="https://james687.github.io/tags/dynamic-programming/"/>
    
      <category term="recursion" scheme="https://james687.github.io/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>遞迴的時間複雜度算法</title>
    <link href="https://james687.github.io/2023/03/21/recursion-time-complexity/"/>
    <id>https://james687.github.io/2023/03/21/recursion-time-complexity/</id>
    <published>2023-03-21T08:55:19.000Z</published>
    <updated>2023-03-21T08:56:15.369Z</updated>
    
    <content type="html"><![CDATA[<h3 id="快速解"><a href="#快速解" class="headerlink" title="快速解"></a>快速解</h3><ol><li>看這個遞迴函式呼叫自己幾次，假設呼叫了 <code>x</code> 次</li><li>看看那些遞迴呼叫的深度，假設你取了一個深度 <code>h</code><ul><li>可以取最大、最小或平均深度，分別會對應到最壞、最好、或平均時間複雜度</li></ul></li><li>時間複雜度為 <code>O(x^h)</code></li></ol><ul><li>至少目前套用在幾個比較單純的遞迴式都成立，不確定複雜的是不是也成立</li></ul><h3 id="詳細解-遞迴樹"><a href="#詳細解-遞迴樹" class="headerlink" title="詳細解 (遞迴樹)"></a>詳細解 (遞迴樹)</h3><p>以 <a href="https://james687.github.io/2023/03/18/unique-paths/">Unique Paths</a> 的遞迴解為例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def uniquePaths(self, m: int, n: int) -&gt; int:</span><br><span class="line">    def u_paths(i, j):</span><br><span class="line">        if i &gt;&#x3D; m or j &gt;&#x3D; n:</span><br><span class="line">            return 0</span><br><span class="line">        if i &#x3D;&#x3D; m - 1 and j &#x3D;&#x3D; n - 1:</span><br><span class="line">            return 1</span><br><span class="line">        return u_paths(i + 1, j) + u_paths(i, j + 1)</span><br><span class="line">    return u_paths(0, 0)</span><br></pre></td></tr></table></figure><ol><li>假設 <code>m = 3, n = 2</code>，遞迴樹如下 <img src="/images/recursion-tree.png" alt=""></li><li>由圖可知，遞迴深度為 <code>5 (= m + n)</code><ul><li>要怎麼不用畫圖，用看的就得出深度？<ul><li>深度為根節點走到葉子節點的路徑長，我們可以看從 <code>u_paths(0, 0)</code> 開始，要走幾次才會結束：<ol><li><code>u_paths(i + 1, j)</code> 這邊只需要看 <code>i</code>，要走 <code>i + 1 = 1, 2, ..., m</code> 共 <code>m</code> 次</li><li>走完 <code>m</code> 次之後還有 <code>u_paths(i, j + 1)</code>，要接著再走 <code>j + 1 = 1, 2, ..., n</code> 共 <code>n</code> 次</li><li>所以需要走 <code>m + n</code> 次才會結束</li></ol></li></ul></li></ul></li><li><code>u_paths</code> 合併遞迴結果的運算只需要一次加法，可以把時間消耗記做 <code>1</code>，也就是每個節點的時間消耗都是 <code>1</code></li><li>所有節點的時間消耗總合就是這個函式的時間複雜度。第一層有 <code>1 (= 2^0)</code> 個節點，第二層有 <code>2 (= 2^1)</code> 個節點，第三層有 <code>4 (= 2^2)</code> 個節點，以此類推，假設此樹深度為 <code>h</code>，所有節點的時間消耗和為 <code>2^0 + 2^1 + 2^2 + ... + 2^h</code>，依據等比級數和的公式得出結果為 <code>2^(h + 1) - 1</code><ul><li>這邊的算法是假設這是一個滿二元樹來算，但其實這並不是一個滿二元樹 (像第四層就只有 <code>7</code> 個節點)，所以遞迴樹法並不嚴謹，只是一個估算，真要嚴謹分析的話可以再用 Substitution Method 或 Master Theorem 來驗證</li><li>由第二點，深度 <code>h = m + n</code></li></ul></li><li>所以時間複雜度為 <code>O(2^(h + 1)) = O(2 * 2^h) = O(2^h) = O(2^(m + n))</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;快速解&quot;&gt;&lt;a href=&quot;#快速解&quot; class=&quot;headerlink&quot; title=&quot;快速解&quot;&gt;&lt;/a&gt;快速解&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;看這個遞迴函式呼叫自己幾次，假設呼叫了 &lt;code&gt;x&lt;/code&gt; 次&lt;/li&gt;
&lt;li&gt;看看那些遞迴呼叫的深度，假設
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://james687.github.io/categories/Algorithm/"/>
    
    
      <category term="recursion" scheme="https://james687.github.io/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>House Robber</title>
    <link href="https://james687.github.io/2023/03/20/house-robber/"/>
    <id>https://james687.github.io/2023/03/20/house-robber/</id>
    <published>2023-03-20T07:08:15.000Z</published>
    <updated>2023-03-22T11:22:19.684Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/house-robber/">題目</a><br>思路</p><ol><li>可以把得出答案的過程拆解為最小可重複步驟，用遞迴來解</li><li>Recursive case: 假設 index 為 i，由 index 0 搶到 i 可得的最大收穫為 <code>inner_rob(i)</code>。在位置 i, 可選擇搶或不搶：<ol><li>不搶：最大收穫跟前一個點一樣，為 <code>inner_rob(i - 1)</code></li><li>搶：代表前一個點一定是不搶，所以最大收穫為這個點的 money <code>nums[i]</code> 再加上前前個點的最大收穫 <code>inner_rob(i - 2)</code></li></ol><ul><li>所以 <code>inner_rob(i)</code> 為以上兩種情況取較大的那個</li></ul></li><li>Base case (終止條件)：<code>i &lt; 0</code></li><li>因為這個<a href="https://james687.github.io/2023/03/21/recursion-time-complexity/">遞迴解的時間複雜度</a>最差為 O(2^n)，必須降低，我們可以把計算過的 <code>inner_rob(i)</code> 使用 <code>@cache</code> 將 function 回傳 cache 起來，避免同樣的 <code>inner_rob(i)</code> 重複計算</li></ol><p>Python3 solution:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def rob(self, nums: List[int]) -&gt; int:</span><br><span class="line">    @cache</span><br><span class="line">    def inner_rob(i):</span><br><span class="line">        &quot;&quot;&quot;@return 由 index 0 搶到 i 可得的最大收穫&quot;&quot;&quot;</span><br><span class="line">        if i &lt; 0:</span><br><span class="line">            return 0</span><br><span class="line">        return max(inner_rob(i - 1), nums[i] + inner_rob(i - 2))</span><br><span class="line">    return inner_rob(len(nums) - 1)</span><br></pre></td></tr></table></figure><ul><li>時間複雜度：O(n)<ul><li>因為有記憶，每個點只會計算一次，共有 n 個點</li></ul></li><li>空間複雜度：O(n)<ul><li>cache 需要的空間為 n，遞迴的最大深度也是 n</li></ul></li></ul><p>以上，如果不用 <code>@cache</code> 的話：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def rob(self, nums: List[int]) -&gt; int:</span><br><span class="line">    memo &#x3D; [None] * len(nums)</span><br><span class="line">    def inner_rob(i):</span><br><span class="line">        if i &lt; 0:</span><br><span class="line">            return 0</span><br><span class="line">        if memo[i] is not None:</span><br><span class="line">            return memo[i]</span><br><span class="line">        memo[i] &#x3D; max(inner_rob(i - 1), nums[i] + inner_rob(i - 2))</span><br><span class="line">        return memo[i]</span><br><span class="line">    return inner_rob(len(nums) - 1)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/house-robber/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以把得出答案的過程拆解為最小可重複步驟，用遞迴來解&lt;/li&gt;
&lt;li&gt;Recursive case: 假設 in
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="dynamic programming" scheme="https://james687.github.io/tags/dynamic-programming/"/>
    
      <category term="recursion" scheme="https://james687.github.io/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>Unique Paths</title>
    <link href="https://james687.github.io/2023/03/18/unique-paths/"/>
    <id>https://james687.github.io/2023/03/18/unique-paths/</id>
    <published>2023-03-18T08:08:15.000Z</published>
    <updated>2023-03-21T09:05:11.684Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/unique-paths/description/">題目</a><br>思路</p><ol><li><p>每走一步都會是一個 unique path，到終點的路線是由每一步所組成的，所以可以用遞迴的方式來想，最小的可重複動作就是一步，點 (i, j) 到終點的 unique path count 就是 (i + 1, j) 和 (i, j + 1) 的 unique path count 的和</p></li><li><p>最小可重複動作 <code>return u_paths(i + 1, j) + u_paths(i, j + 1)</code></p></li><li><p>終止條件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if i &gt;&#x3D; m or j &gt;&#x3D; n:</span><br><span class="line">    return 0</span><br><span class="line">if i &#x3D;&#x3D; m - 1 and j &#x3D;&#x3D; n - 1:</span><br><span class="line">    return 1</span><br></pre></td></tr></table></figure><ul><li>已經在終點上了，unique path count 卻是 1，一開始可能會覺得有點怪，不過從終點左邊那個點來想，就不會怪了：<ul><li>左邊那個點的 unique path count = (它的下面那點的 path count) + (它右邊那點的 path count)<ul><li>下面那點：path count 為 0</li><li>右邊那點 (終點)：path count 必須是 1</li></ul></li></ul></li></ul></li><li><p>遞迴解法如下，但時間複雜度 O(2^(m + n)) 太大了 (計算參考<a href="https://james687.github.io/2023/03/21/recursion-time-complexity/">這篇</a>)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def uniquePaths(self, m: int, n: int) -&gt; int:</span><br><span class="line">    def u_paths(i, j):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        i, j 為從 0 開始的坐標</span><br><span class="line">        @return 由 (i, j) 走到終點的 unique path count</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 終止條件</span><br><span class="line">        if i &gt;&#x3D; m or j &gt;&#x3D; n:</span><br><span class="line">            return 0</span><br><span class="line">        if i &#x3D;&#x3D; m - 1 and j &#x3D;&#x3D; n - 1:</span><br><span class="line">            return 1</span><br><span class="line"></span><br><span class="line">        # 最小可重複動作</span><br><span class="line">        return u_paths(i + 1, j) + u_paths(i, j + 1)</span><br><span class="line">    return u_paths(0, 0)</span><br></pre></td></tr></table></figure></li><li><p>因為同一個點可能會走到很多次，我們可以把結果存在二維陣列，避免重複計算，以減少時間複雜度</p></li></ol><p>Python3 solution:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def uniquePaths(self, m: int, n: int) -&gt; int:</span><br><span class="line">    dp &#x3D; [[None] * n for i in range(m)]  # m * n 的二維陣列</span><br><span class="line"></span><br><span class="line">    def u_paths(i, j):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        i, j 為從 0 開始的坐標</span><br><span class="line">        @return 由 (i, j) 走到終點的 unique path count</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 終止條件</span><br><span class="line">        if i &gt;&#x3D; m or j &gt;&#x3D; n:</span><br><span class="line">            return 0</span><br><span class="line">        if i &#x3D;&#x3D; m - 1 and j &#x3D;&#x3D; n - 1:</span><br><span class="line">            return 1</span><br><span class="line"></span><br><span class="line">        if dp[i][j]:</span><br><span class="line">            return dp[i][j]</span><br><span class="line"></span><br><span class="line">        # 最小可重複動作</span><br><span class="line">        dp[i][j] &#x3D; u_paths(i + 1, j) + u_paths(i, j + 1)</span><br><span class="line">        return dp[i][j]</span><br><span class="line"></span><br><span class="line">    return u_paths(0, 0)</span><br></pre></td></tr></table></figure><ul><li>時間複雜度：O(m * n)<ul><li>因為有記憶，每個點只會計算一次，共有 <code>m * n</code> 個點</li></ul></li><li>空間複雜度：O(m * n)<ul><li>維護 <code>dp</code> 所需空間。遞迴呼叫所需空間 <code>m</code> 和 <code>n</code> 可忽略</li></ul></li></ul><p>類似題：</p><ul><li><a href="https://leetcode.com/problems/fibonacci-number">Fibonacci Number</a></li><li><a href="https://leetcode.com/problems/unique-paths-ii">Unique Paths II</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/unique-paths/description/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;每走一步都會是一個 unique path，到終點的路線是由每一步所組成的，所以可以
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="dynamic programming" scheme="https://james687.github.io/tags/dynamic-programming/"/>
    
      <category term="recursion" scheme="https://james687.github.io/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>Merge Two Binary Trees</title>
    <link href="https://james687.github.io/2023/03/16/merge-two-binary-trees/"/>
    <id>https://james687.github.io/2023/03/16/merge-two-binary-trees/</id>
    <published>2023-03-16T03:27:23.000Z</published>
    <updated>2023-03-18T08:12:00.235Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/merge-two-binary-trees/description/">題目</a></p><h3 id="做法一：recursive-DFS"><a href="#做法一：recursive-DFS" class="headerlink" title="做法一：recursive - DFS"></a>做法一：recursive - DFS</h3><ol><li><p>找出最小的可重複動作：merge 兩個 nodes</p><ul><li>題目給的 method 就可以用來做遞迴</li></ul></li><li><p>假設 <code>mergeTrees</code> 已完成，實作此最小可重複動作</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root1.val +&#x3D; root2.val</span><br><span class="line">root1.left &#x3D; self.mergeTrees(root1.left, root2.left)</span><br><span class="line">root1.right &#x3D; self.mergeTrees(root1.right, root2.right)</span><br><span class="line">return root1</span><br></pre></td></tr></table></figure></li><li><p>寫出遞迴的終止條件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if not root1 or not root2:</span><br><span class="line">    return root1 or root2</span><br></pre></td></tr></table></figure></li></ol><p>Python3 solution:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Definition for a binary tree node.</span><br><span class="line"># class TreeNode:</span><br><span class="line">#     def __init__(self, val&#x3D;0, left&#x3D;None, right&#x3D;None):</span><br><span class="line">#         self.val &#x3D; val</span><br><span class="line">#         self.left &#x3D; left</span><br><span class="line">#         self.right &#x3D; right</span><br><span class="line">def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -&gt; Optional[TreeNode]:</span><br><span class="line">    if not root1 or not root2:</span><br><span class="line">        return root1 or root2</span><br><span class="line">    root1.val +&#x3D; root2.val</span><br><span class="line">    root1.left &#x3D; self.mergeTrees(root1.left, root2.left)</span><br><span class="line">    root1.right &#x3D; self.mergeTrees(root1.right, root2.right)</span><br><span class="line">    return root1</span><br></pre></td></tr></table></figure><p>假設兩棵樹有較少節點的那顆有 n 個節點</p><ul><li>時間複雜度：O(n)</li><li>空間複雜度：n 個節點那棵樹的深度<ul><li>最差情況是 O(n), 平均為 O(log n)</li></ul></li></ul><h3 id="做法二：iterative-BFS"><a href="#做法二：iterative-BFS" class="headerlink" title="做法二：iterative - BFS"></a>做法二：iterative - BFS</h3><ol><li>準備一個 stack 來放待 merge 的 node pairs</li><li>一次從裡面拿一個 pair 出來 merge, 同時也把該 merge 的子節點 pair 丟進去。一直做到 stack 裡面沒東西為止</li><li>因為這邊是 merge 到 root1, 故最後回傳 root1<ul><li>注意不要回傳到 <code>p</code>, 而是應該回傳當初的根節點 root1</li></ul></li></ol><p>Python3 solution:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Definition for a binary tree node.</span><br><span class="line"># class TreeNode:</span><br><span class="line">#     def __init__(self, val&#x3D;0, left&#x3D;None, right&#x3D;None):</span><br><span class="line">#         self.val &#x3D; val</span><br><span class="line">#         self.left &#x3D; left</span><br><span class="line">#         self.right &#x3D; right</span><br><span class="line">def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -&gt; Optional[TreeNode]:</span><br><span class="line">    if not root1 or not root2:</span><br><span class="line">        return root1 or root2</span><br><span class="line">    stack &#x3D; [(root1, root2)]</span><br><span class="line">    while stack:</span><br><span class="line">        p, q &#x3D; stack.pop()  # 使用暫時的變數 p, q 來操作節點 merge</span><br><span class="line">        p.val +&#x3D; q.val</span><br><span class="line">        if not p.left and q.left:</span><br><span class="line">            p.left &#x3D; q.left</span><br><span class="line">        elif p.left and q.left:</span><br><span class="line">            stack.append((p.left, q.left))</span><br><span class="line">        if not p.right and q.right:</span><br><span class="line">            p.right &#x3D; q.right</span><br><span class="line">        elif p.right and q.right:</span><br><span class="line">            stack.append((p.right, q.right))</span><br><span class="line">    return root1</span><br></pre></td></tr></table></figure><p>假設兩棵樹有較少節點的那顆有 n 個節點</p><ul><li>時間複雜度：O(n)<ul><li>stack 裡會有 n 個 pairs, 所以會做 n 次</li></ul></li><li>空間複雜度：O(n)<ul><li>需要大小為 n 的 stack</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/merge-two-binary-trees/description/&quot;&gt;題目&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;做法一：recursive-DFS&quot;&gt;&lt;a href=&quot;#做法一：recursive
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="recursion" scheme="https://james687.github.io/tags/recursion/"/>
    
      <category term="tree" scheme="https://james687.github.io/tags/tree/"/>
    
      <category term="depth-first search" scheme="https://james687.github.io/tags/depth-first-search/"/>
    
      <category term="binary tree" scheme="https://james687.github.io/tags/binary-tree/"/>
    
      <category term="breadth-first search" scheme="https://james687.github.io/tags/breadth-first-search/"/>
    
  </entry>
  
  <entry>
    <title>Balanced Binary Tree</title>
    <link href="https://james687.github.io/2023/03/15/balanced-binary-tree/"/>
    <id>https://james687.github.io/2023/03/15/balanced-binary-tree/</id>
    <published>2023-03-15T04:12:23.000Z</published>
    <updated>2023-03-18T08:12:24.768Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/balanced-binary-tree/description/">題目</a></p><h3 id="做法一"><a href="#做法一" class="headerlink" title="做法一"></a>做法一</h3><p>思路：</p><ol><li>依照 height-balanced 的定義，需要符合<strong>每個</strong>node 的左右子樹高度差都不大於 1</li><li>假設有個 function <code>height</code> 可以回傳 node 的 height<ul><li>先不實作內容</li></ul></li><li>使用這個 <code>height</code> 完成 <code>isBalanced</code></li><li>實作 <code>height</code> 的內容</li></ol><p>Python3 solution:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Definition for a binary tree node.</span><br><span class="line"># class TreeNode:</span><br><span class="line">#     def __init__(self, val&#x3D;0, left&#x3D;None, right&#x3D;None):</span><br><span class="line">#         self.val &#x3D; val</span><br><span class="line">#         self.left &#x3D; left</span><br><span class="line">#         self.right &#x3D; right</span><br><span class="line">def isBalanced(self, root: Optional[TreeNode]) -&gt; bool:</span><br><span class="line">    def height(node):</span><br><span class="line">        if not node:  # 終止條件</span><br><span class="line">            return 0</span><br><span class="line">        lh &#x3D; height(node.left)</span><br><span class="line">        rh &#x3D; height(node.right)</span><br><span class="line">        return max(lh, rh) + 1</span><br><span class="line">        </span><br><span class="line">    if not root:  # 終止條件</span><br><span class="line">        return True</span><br><span class="line">    lh &#x3D; height(root.left)</span><br><span class="line">    rh &#x3D; height(root.right)</span><br><span class="line">    </span><br><span class="line">    # 即使左右子樹高度差不大於一，子樹本身還是有可能是不平衡的，所以要再加上後面的 &#96;isBalanced&#96; 判斷</span><br><span class="line">    return abs(lh - rh) &lt;&#x3D; 1 and self.isBalanced(root.left) and self.isBalanced(root.right)</span><br></pre></td></tr></table></figure><p>假設有 n 個 node, 樹的高度為 h</p><ul><li>時間複雜度：O(n^2)<ul><li><code>isBalanced</code> 除了呼叫自己之外的複雜度為 O(n)<ul><li>呼叫了 <code>n - 1</code> 次 <code>height</code></li></ul></li><li>每個節點都呼叫了一次 <code>isBalanced</code></li></ul></li><li>空間複雜度：O(h)<ul><li>因為遞迴的呼叫有 DFS 的特性，會從子節點一直呼叫到最下面的葉子節點，所以需要把那些 function calls 放進 stack 裡，等到葉子節點的呼叫到了再一一拿出來執行。因此 stack 的大小需等於呼叫的次數，也就是由根節點走到葉子節點需經過幾個點，即這棵樹的高度<ul><li>只需考慮一次遞迴呼叫所需空間，不需考慮全部遞迴呼叫 (譬如在 function 裡呼叫了自己兩次)，因為程式同時只會處理一個遞迴呼叫</li></ul></li></ul></li></ul><h3 id="做法二"><a href="#做法二" class="headerlink" title="做法二"></a>做法二</h3><p>思路：</p><ol><li>有沒有辦法優化上面做法的時間複雜度呢？因為上面在算高度的時候就已經會算出每個節點的左右子樹的高度了，此時就可以順便看看是否平衡，不用等到最後再遞迴呼叫 <code>isBalanced</code> 增加複雜度</li></ol><p>Python3 solution:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def isBalanced(self, root: Optional[TreeNode]) -&gt; bool:</span><br><span class="line">    self.balanced &#x3D; True</span><br><span class="line">    def height(node):</span><br><span class="line">        if not node:</span><br><span class="line">            return 0</span><br><span class="line">        lh &#x3D; height(node.left)</span><br><span class="line">        rh &#x3D; height(node.right)</span><br><span class="line">        if abs(lh - rh) &gt; 1:</span><br><span class="line">            self.balanced &#x3D; False</span><br><span class="line">        return max(lh, rh) + 1</span><br><span class="line">        </span><br><span class="line">    height(root)</span><br><span class="line">    return self.balanced</span><br></pre></td></tr></table></figure><p>假設有 n 個 node, 樹的高度為 h</p><ul><li>時間複雜度：O(n)<ul><li>每個節點都做過一次 <code>height</code></li></ul></li><li>空間複雜度：O(h)<ul><li>同 <code>做法一</code> 的分析</li></ul></li></ul><p>類似題：<a href="https://leetcode.com/problems/symmetric-tree/description/">Symmetric Tree</a> 用 recursive 方法來解</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/balanced-binary-tree/description/&quot;&gt;題目&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;做法一&quot;&gt;&lt;a href=&quot;#做法一&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="recursion" scheme="https://james687.github.io/tags/recursion/"/>
    
      <category term="tree" scheme="https://james687.github.io/tags/tree/"/>
    
      <category term="depth-first search" scheme="https://james687.github.io/tags/depth-first-search/"/>
    
      <category term="binary tree" scheme="https://james687.github.io/tags/binary-tree/"/>
    
  </entry>
  
  <entry>
    <title>Same Tree</title>
    <link href="https://james687.github.io/2023/02/10/same-tree/"/>
    <id>https://james687.github.io/2023/02/10/same-tree/</id>
    <published>2023-02-10T10:27:23.000Z</published>
    <updated>2023-03-15T07:59:46.447Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/same-tree/description/">題目</a><br>思路：</p><ol><li>要比較所有相同位置的 node 的值是否一樣，可以把所有待比較的 node pair 丟到 stack 裡一一拿出來比較，全部比完都通過的話就是一樣的 tree</li><li>一個 pair 比較後會把下面的所有分支點繼續丟進 stack 等待比較，所以用 <code>while stack:</code> 只要有就繼續比，一直比到完<ul><li>此為廣先搜尋 (Breadth-First Search)</li></ul></li></ol><p>Python3 solution:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Definition for a binary tree node.</span><br><span class="line"># class TreeNode:</span><br><span class="line">#     def __init__(self, val&#x3D;0, left&#x3D;None, right&#x3D;None):</span><br><span class="line">#         self.val &#x3D; val</span><br><span class="line">#         self.left &#x3D; left</span><br><span class="line">#         self.right &#x3D; right</span><br><span class="line">def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -&gt; bool:</span><br><span class="line">    stack &#x3D; [(p, q)]</span><br><span class="line">    while stack:</span><br><span class="line">        p, q &#x3D; stack.pop()</span><br><span class="line">        if p and q and p.val &#x3D;&#x3D; q.val:</span><br><span class="line">            stack.extend([</span><br><span class="line">                (p.left, q.left),</span><br><span class="line">                (p.right, q.right)</span><br><span class="line">            ])</span><br><span class="line">        elif p or q:  # 只有在 p, q 都是 None 的情況下才會通過，這代表這兩棵樹在那個位置都沒有葉子</span><br><span class="line">            return False</span><br><span class="line">    return True</span><br></pre></td></tr></table></figure><p>假設 p 有 n 個節點，寬度 w1，q 有 m 個節點，寬度 w2</p><ul><li>時間複雜度：O(max(m, n))</li><li>空間複雜度：O(max(w1, w2))<ul><li>因為是 BFS, <code>stack</code> 需儲存當前層次上的節點，故跟寬度成正比</li></ul></li></ul><p>類似題：<a href="https://leetcode.com/problems/symmetric-tree/description/">Symmetric Tree</a> 用 iterative 方法來解</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/same-tree/description/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要比較所有相同位置的 node 的值是否一樣，可以把所有待比較的 node pair 丟到 s
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="tree" scheme="https://james687.github.io/tags/tree/"/>
    
      <category term="depth-first search" scheme="https://james687.github.io/tags/depth-first-search/"/>
    
      <category term="binary tree" scheme="https://james687.github.io/tags/binary-tree/"/>
    
      <category term="breadth-first search" scheme="https://james687.github.io/tags/breadth-first-search/"/>
    
  </entry>
  
  <entry>
    <title>Merge Two Sorted Lists</title>
    <link href="https://james687.github.io/2023/02/09/merge-two-sorted-lists/"/>
    <id>https://james687.github.io/2023/02/09/merge-two-sorted-lists/</id>
    <published>2023-02-09T10:27:23.000Z</published>
    <updated>2023-02-09T11:02:24.341Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/merge-two-sorted-lists/description/">題目</a><br>思路：</p><ol><li><p>因為要做一個 linked list，可以用 while 在每次迴圈都接一個 node 出來</p></li><li><p>先設 <code>while True:</code>，等寫迴圈內容時再來確定 while 可繼續執行的條件</p></li><li><p>寫第一 part (如下) 後發現，while 條件需要 <code>l1 and l2</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if l1.val &gt; l2.val:</span><br><span class="line">    curr.next &#x3D; l2</span><br><span class="line">    l2 &#x3D; l2.next</span><br><span class="line">else:</span><br><span class="line">    curr.next &#x3D; l1</span><br><span class="line">    l1 &#x3D; l1.next</span><br></pre></td></tr></table></figure></li><li><p>post processing: 跳出迴圈後的情形是 <code>l1</code>, <code>l2</code> 其中有一個是 <code>None</code> 或兩個都是 <code>None</code>，此時就把目標 linked list 接上那個不是 <code>None</code> 的即可</p></li></ol><p>Python3 solution:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -&gt; Optional[ListNode]:</span><br><span class="line">    dummy_head &#x3D; ListNode()  # 需有一個 dummy_head 可以在最後回傳答案時使用</span><br><span class="line">    curr &#x3D; dummy_head  # 也要有個 curr 可以在每次迴圈中跟著移動</span><br><span class="line">    while l1 and l2:</span><br><span class="line">        if l1.val &gt; l2.val:</span><br><span class="line">            curr.next &#x3D; l2</span><br><span class="line">            l2 &#x3D; l2.next</span><br><span class="line">        else:</span><br><span class="line">            curr.next &#x3D; l1</span><br><span class="line">            l1 &#x3D; l1.next</span><br><span class="line">        curr &#x3D; curr.next</span><br><span class="line">    curr.next &#x3D; l1 or l2  # post processing</span><br><span class="line">    return dummy_head.next</span><br></pre></td></tr></table></figure><p>P.S. 有些思路跟 <a href="https://james687.github.io/2023/02/03/add-two-numbers/">Add Two Numbers</a> 重複，這篇就不多寫了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/merge-two-sorted-lists/description/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;因為要做一個 linked list，可以用 while 在每
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="linked list" scheme="https://james687.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>Remove Duplicates from Sorted List</title>
    <link href="https://james687.github.io/2023/02/09/remove-duplicates-from-sorted-list/"/>
    <id>https://james687.github.io/2023/02/09/remove-duplicates-from-sorted-list/</id>
    <published>2023-02-09T03:47:23.000Z</published>
    <updated>2023-02-09T04:00:24.750Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/">題目</a><br>思路：</p><ol><li><p>既然是 Linked List，我們可以宣告一個指標 <code>curr</code> 指向第一個 node，用 while 迴圈一次檢查一個 node (檢查完將指標移到下一個 node)</p><ul><li>不能直接用 <code>head</code> 來移動，因為到時候回傳答案的時候需要回傳這個 <code>head</code></li></ul></li><li><p>設定 while 可以繼續檢查的條件：有時要先寫 while 的內容，才會比較確定 while 條件應該怎麼寫，這時可以先寫 <code>while True:</code>，等內容寫完再來改條件</p></li><li><p>寫 while 內容</p><ol><li><p>假如 <code>curr.val</code> 跟下一個一樣，就把 next 接到下下個</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if curr.val &#x3D;&#x3D; curr.next.val:</span><br><span class="line">    curr.next &#x3D; curr.next.next</span><br></pre></td></tr></table></figure></li><li><p>但假如下下個也一樣呢？=&gt; 把上面的 <code>if</code> 改成 <code>while</code>，讓最後 <code>curr.next</code> 所指的 val 一定是不一樣的</p></li><li><p>改成 while 之後，檢查條件會被重複執行。因為 <code>curr.next</code> 有可能會是 <code>None</code>，所以條件改為<br><code>while curr.val == (curr.next and curr.next.val):</code></p></li><li><p>離開 while 之後：<br><code>curr = curr.next  # 把指標移到下一個 node，以便下次的檢查</code></p></li></ol></li><li><p>回去修改 while 條件：什麼條件成立我們才能繼續檢查(執行 while 內容)？</p><ol><li>首先 <code>curr</code> 不能是 <code>None</code><ul><li><code>curr</code> 有可能是 <code>None</code>，因為我們一直把它指向下一個 Node，到了盡頭 <code>curr</code> 就會是 <code>None</code></li></ul></li><li>即使 <code>curr.next</code> 是 <code>None</code>，還是可以順利執行迴圈內容</li><li>結論：條件為 <code>while curr:</code></li></ol></li><li><p>離開 while 之後就大功告成，回傳答案 <code>head</code></p></li></ol><p>Python3 solution:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Definition for singly-linked list.</span><br><span class="line"># class ListNode:</span><br><span class="line">#     def __init__(self, val&#x3D;0, next&#x3D;None):</span><br><span class="line">#         self.val &#x3D; val</span><br><span class="line">#         self.next &#x3D; next</span><br><span class="line">def deleteDuplicates(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:</span><br><span class="line">    curr &#x3D; head  # 等一下可以在 while 迴圈中移動的指標</span><br><span class="line">    while curr:</span><br><span class="line">        while curr.val &#x3D;&#x3D; (curr.next and curr.next.val):</span><br><span class="line">            curr.next &#x3D; curr.next.next</span><br><span class="line">        curr &#x3D; curr.next</span><br><span class="line">    return head</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;既然是 Linked List，我們可
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="linked list" scheme="https://james687.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>Add Two Numbers</title>
    <link href="https://james687.github.io/2023/02/03/add-two-numbers/"/>
    <id>https://james687.github.io/2023/02/03/add-two-numbers/</id>
    <published>2023-02-03T07:54:07.000Z</published>
    <updated>2023-02-09T10:20:03.514Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/add-two-numbers/description/">題目</a><br>思路：</p><ol><li>既然 Linked List 是由個位數開始，剛好可以用小學學的加法來從個位數開始相加。所以須設計一個迴圈來執行可重複執行的加法動作，一步步構建答案所需的 linked list，一次建立一個 node，直到完成。</li><li>迴圈要可重複執行，需要有個指標，在迴圈內對該指標所指的 node 做操作，並在迴圈結束時讓指標指到下一個 node，讓下一次迴圈來操作</li><li>迴圈內算出的當下位數的答案 <code>digit_sum % 10</code> 的 node 為何是指定給 <code>curr.next</code> 而非 <code>curr</code>?<ul><li>因為迴圈結束前 <code>curr</code> 必須指向下一個 node，也就是 <code>curr.next</code>，以下分兩種情況解釋：<ul><li>答案放在 <code>curr</code> 身上：必須創造一個空的 node 來當 <code>curr.next</code>，而假如這次的迴圈已經是最後一次了，此 linked list 的尾巴就會多一個空的 node</li><li>答案放在 <code>curr.next</code> 身上：迴圈結束前 <code>curr</code> 指向 <code>curr.next</code> 繼續下一次的操作，假如此次已是最後一次迴圈，也不會多出空的 node 在 linked list 末端，只會在開頭多出一個沒用到的 dummy_head 而已，因此最後回傳答案時是回傳 <code>dummy_head.next</code></li></ul></li></ul></li></ol><p>Python3 solution</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -&gt; Optional[ListNode]:</span><br><span class="line">    carry &#x3D; 0  # 位數相加後除以 10 得到的商</span><br><span class="line">    dummy_head &#x3D; ListNode()  # 用 dummy_head 保留最前面的指標，到時候才有辦法回傳答案</span><br><span class="line">    curr &#x3D; dummy_head        # 不能只用 &#96;curr &#x3D; ListNode()&#96;，因為 &#96;curr&#96; 所指的 node 必須一直變</span><br><span class="line">    while l1 or l2 or carry:  # 可以繼續加的條件</span><br><span class="line">        v1 &#x3D; l1 and l1.val or 0</span><br><span class="line">        v2 &#x3D; l2 and l2.val or 0</span><br><span class="line">        digit_sum &#x3D; v1 + v2 + carry</span><br><span class="line">        carry &#x3D; digit_sum &#x2F;&#x2F; 10</span><br><span class="line">        curr.next &#x3D; ListNode(digit_sum % 10)</span><br><span class="line">        curr &#x3D; curr.next</span><br><span class="line">        l1 &#x3D; l1 and l1.next</span><br><span class="line">        l2 &#x3D; l2 and l2.next</span><br><span class="line">    return dummy_head.next</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/add-two-numbers/description/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;既然 Linked List 是由個位數開始，剛好可以用小學學的加法來從個位數開始
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="linked list" scheme="https://james687.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>Search Insert Position</title>
    <link href="https://james687.github.io/2022/12/08/search-insert-position/"/>
    <id>https://james687.github.io/2022/12/08/search-insert-position/</id>
    <published>2022-12-08T05:21:23.000Z</published>
    <updated>2023-02-07T09:07:43.552Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/search-insert-position/description">題目</a><br>思路：最直覺是直接 iterate nums，不過題目指定要 O(log n)，所以用 binary search 才能達到</p><ol><li><p>設定左右兩個指標作為<strong>可能答案範圍</strong>：[left, right]</p></li><li><p><code>while left &lt; right</code>: 設定 binary search 可繼續執行的條件</p><ul><li>此時會想，要用 <code>&lt;</code> or <code>&lt;=</code> 呢？判斷依據為在迴圈裡變更完 left or right 之後，<strong>不能造成無窮迴圈</strong></li><li>但此時還沒寫迴圈內容，所以可以先直觀的設定一個，譬如 <code>&lt;</code>，等寫完迴圈內容再來驗證是否適合</li></ul></li><li><p>迴圈寫完後，回來 check while condition，看看 while 把 left &amp; right 收斂到最後幾個的時候，經過以下的操作會不會有無窮迴圈</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. left &#x3D; mid + 1</span><br><span class="line">2. right &#x3D; mid</span><br></pre></td></tr></table></figure><ol><li><p>剩最後三個：此時 mid 會是中間那個，上面兩種操作都有助於收斂範圍</p></li><li><p>剩最後兩個：此時 mid == left，上面兩種操作一樣可以收斂範圍</p></li><li><p>剩最後一個：此時 left == mid == right，以目前的 while 條件設定，會因為不符而跳出，所以跳出迴圈後的情況就是這個</p><ul><li>如果 while 條件為 <code>left &lt;= right</code>，則 <code>right = mid</code> 這個操作會造成無窮迴圈，因此不能設定為 <code>&lt;=</code></li></ul><p>=&gt; 確認不會造成無窮迴圈，所以此 while 條件設定是正確的</p></li></ol></li><li><p>Post processing: 跳出 while 後的情況為 <code>left == right</code>，此時再跟 target 比，決定答案為何</p><ul><li>為何跳出 while 後的情況不會是 <code>left &gt; right</code>?<ul><li>要讓 <code>left &gt; right</code>，必須執行到 <code>left = mid + 1</code>，而且此時 <code>left</code> 和 <code>right</code> 都必須等於 <code>mid</code>，而如果已經是這個情況，就不會再進到迴圈裡，而是已經跳出了</li></ul></li></ul></li></ol><p>Python3 solution:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def searchInsert(self, nums: List[int], target: int) -&gt; int:</span><br><span class="line">    left, right &#x3D; 0, len(nums) - 1  # 設定左右兩個指標作為可能答案範圍：[left, right]</span><br><span class="line">    while left &lt; right:</span><br><span class="line">        mid &#x3D; (left + right) &#x2F;&#x2F; 2  # Python3 不會有 integer overflow 的問題，所以可以直接 (left + right)，然後用 &#96;&#x2F;&#x2F;&#96; 無條件捨去，避免小數</span><br><span class="line">        if nums[mid] &#x3D;&#x3D; target:</span><br><span class="line">            return mid</span><br><span class="line">        if nums[mid] &lt; target:</span><br><span class="line">            left &#x3D; mid + 1  # 此時最小的可能答案為 &#96;mid + 1&#96;</span><br><span class="line">        else:</span><br><span class="line">            right &#x3D; mid  # 此時最大的可能答案為 &#96;mid&#96;</span><br><span class="line">    return left + 1 if nums[left] &lt; target else left</span><br></pre></td></tr></table></figure><p>更詳細解說可參考<a href="https://leetcode.com/problems/search-insert-position/solutions/249092/come-on-forget-the-binary-search-pattern-template-try-understand-it/">此篇文章</a></p><p>類似題：<a href="https://leetcode.com/problems/first-bad-version/">First Bad Version</a><br>延伸題：<a href="https://leetcode.com/problems/find-peak-element/description/">Find Peak Element</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/search-insert-position/description&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路：最直覺是直接 iterate nums，不過題目指定要 O(log n)，所以用 binary s
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="binary search" scheme="https://james687.github.io/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>3Sum</title>
    <link href="https://james687.github.io/2022/12/05/3-sum/"/>
    <id>https://james687.github.io/2022/12/05/3-sum/</id>
    <published>2022-12-05T08:51:05.000Z</published>
    <updated>2023-02-09T05:09:46.472Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/3sum/description/">題目</a><br>思路：</p><ul><li>用三個指標，iterate 最左邊那個，找出對應於每個 left 指標的所有 result</li><li>先把 nums 排序，如此移動 mid, right 指標時就有個依據</li></ul><p>Python3 solution</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def threeSum(self, nums):</span><br><span class="line">    result &#x3D; []</span><br><span class="line">    nums.sort()</span><br><span class="line">    for left in range(len(nums) - 2):  # 右邊須留兩個空位給另兩個指標</span><br><span class="line">        if left &gt; 0 and nums[left] &#x3D;&#x3D; nums[left - 1]:  # 排除重複的 result，left 必須 &gt; 0 才會有前一個</span><br><span class="line">            continue                                   # - 假如 nums[left] 是一樣的，最後找到的 result 也會是一樣的，所以要排除掉</span><br><span class="line">        mid &#x3D; left + 1</span><br><span class="line">        right &#x3D; len(nums) - 1</span><br><span class="line">        while mid &lt; right:  # 設定有效範圍，在此範圍內尋找符合的 mid, right</span><br><span class="line">            t_sum &#x3D; nums[left] + nums[mid] + nums[right]</span><br><span class="line">            if t_sum &lt; 0:</span><br><span class="line">                mid +&#x3D; 1  # 此時必須讓 t_sum 變大，所以將 mid 往右移</span><br><span class="line">            elif t_sum &gt; 0:</span><br><span class="line">                right -&#x3D; 1  # 此時必須讓 t_sum 變小，所以將 right 往左移</span><br><span class="line">            else:</span><br><span class="line">                result.append([nums[left], nums[mid], nums[right]])</span><br><span class="line">                while mid &lt; right and nums[mid] &#x3D;&#x3D; nums[mid + 1]:  # 跳過 mid 重複的部分</span><br><span class="line">                    mid +&#x3D; 1</span><br><span class="line">                while mid &lt; right and nums[right] &#x3D;&#x3D; nums[right - 1]:  # 跳過 right 重複的部分</span><br><span class="line">                    right -&#x3D; 1</span><br><span class="line">                </span><br><span class="line">                # 正常的移動 mid, right，尋找下一個符合的 result</span><br><span class="line">                mid +&#x3D; 1</span><br><span class="line">                right -&#x3D; 1</span><br><span class="line">                </span><br><span class="line">    return result</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/3sum/description/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用三個指標，iterate 最左邊那個，找出對應於每個 left 指標的所有 result&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="array" scheme="https://james687.github.io/tags/array/"/>
    
      <category term="two pointers" scheme="https://james687.github.io/tags/two-pointers/"/>
    
      <category term="sorting" scheme="https://james687.github.io/tags/sorting/"/>
    
  </entry>
  
  <entry>
    <title>為什麼 Python dict 的 get item operation 時間複雜度為 O(1) ？</title>
    <link href="https://james687.github.io/2022/07/25/why-dict-o1/"/>
    <id>https://james687.github.io/2022/07/25/why-dict-o1/</id>
    <published>2022-07-25T08:55:03.000Z</published>
    <updated>2022-07-25T08:55:40.467Z</updated>
    
    <content type="html"><![CDATA[<p>如果去 google，大部分查到的都會說因為 Python 會把 key 經過 hash function 運算，得到一個 dict 真正內部在使用的 key，從而找到對應的 value。而一個好的 hash function 它的運算所需時間是不會隨著 n 增加而變大的，所以 dict 的 get item operation 時間複雜度為 O(1) 。</p><p>不過我的疑惑是，經過 hash function 運算得到 key 之後，由這個 key 去找到 value 的時間複雜度是 O(1) 嗎？除非這個也是 O(1) 才能說整個 get item operation 是 O(1) 。</p><p>後來再多翻了一些說明，終於看到一兩個回答可以解釋這個疑惑。可以想像成今天我們有一個 array，我們只要知道 index 就可以知道要去哪裡找到對應的 value ( 因此是 O(1) )，經由 hash function 算出來的 key 就好像 array 的 index 一樣，只要看到這個 key 就知道要去哪裡找對應的 value，不會受 n 大小的影響，所以是 O(1)</p><p>另一個比較生活化的例子：hash function 算出來的 key，就好像你在圖書館要找書時用的索引，看到索引你就會知道書在哪一區、哪個櫃子裡，即使你需要照著圖書館的索引指示找一下才能找到，但這個過程所花的時間，跟圖書館有多少書沒有關係。</p><p>References:</p><ul><li><a href="https://qr.ae/pvMCpM">https://qr.ae/pvMCpM</a></li><li><a href="https://qr.ae/pvMCIv">https://qr.ae/pvMCIv</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果去 google，大部分查到的都會說因為 Python 會把 key 經過 hash function 運算，得到一個 dict 真正內部在使用的 key，從而找到對應的 value。而一個好的 hash function 它的運算所需時間是不會隨著 n 增加而變大的，
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://james687.github.io/categories/Algorithm/"/>
    
    
      <category term="python" scheme="https://james687.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在 Mac 加入 ssh key 的步驟</title>
    <link href="https://james687.github.io/2021/01/14/add-ssh-steps/"/>
    <id>https://james687.github.io/2021/01/14/add-ssh-steps/</id>
    <published>2021-01-14T08:31:44.000Z</published>
    <updated>2021-01-14T08:47:59.876Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><code>ssh-keygen -t ed25519 -C &quot;{你的 email}&quot;</code></p><ul><li>預設路徑假如已有相同檔案，記得指定新的<strong>完整</strong>路徑</li><li>如檔名不用預設的，下面 <code>id_ed25519</code> 自行替換成自己的檔名</li></ul></li><li><p><code>vi ~/.ssh/config</code></p><ul><li><p>舉例：加上如下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host GitHub</span><br><span class="line"> HostName github.com</span><br><span class="line"> IdentityFile ~&#x2F;.ssh&#x2F;id_ed25519</span><br><span class="line"> IdentitiesOnly yes</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>ssh-add -K ~/.ssh/id_ed25519</code></p></li><li><p><code>pbcopy &lt; ~/.ssh/id_ed25519.pub</code></p></li><li><p>貼到所使用的服務網站的相對應設定頁面</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ssh-keygen -t ed25519 -C &amp;quot;{你的 email}&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;預設路徑假如已有相同檔案，記得指定新的&lt;strong&gt;完整&lt;/strong&gt;路徑&lt;/li&gt;
&lt;li&gt;如檔名不
      
    
    </summary>
    
    
      <category term="Authentication" scheme="https://james687.github.io/categories/Authentication/"/>
    
    
  </entry>
  
  <entry>
    <title>簡單統整 JWT 相對於傳統 Session 驗證的好處</title>
    <link href="https://james687.github.io/2021/01/14/jwt-digest/"/>
    <id>https://james687.github.io/2021/01/14/jwt-digest/</id>
    <published>2021-01-14T05:11:05.000Z</published>
    <updated>2021-01-14T05:32:09.555Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Server 不用存 Session</li><li>只有在 Client 拿新 JWT 時才需要跟 DB 溝通<ul><li>Clent 拿的時機：JWT 到期或第一次拿</li><li>為何不需跟 DB 溝通？<ul><li>因為 JWT 裡已有所需資訊</li><li>但假如業務需求需要另外取敏感資訊的話還是需要碰 DB</li></ul></li></ul></li><li><a href="https://medium.com/%E9%BA%A5%E5%85%8B%E7%9A%84%E5%8D%8A%E8%B7%AF%E5%87%BA%E5%AE%B6%E7%AD%86%E8%A8%98/%E7%AD%86%E8%A8%98-%E9%80%8F%E9%81%8E-jwt-%E5%AF%A6%E4%BD%9C%E9%A9%97%E8%AD%89%E6%A9%9F%E5%88%B6-2e64d72594f8">參考</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Server 不用存 Session&lt;/li&gt;
&lt;li&gt;只有在 Client 拿新 JWT 時才需要跟 DB 溝通&lt;ul&gt;
&lt;li&gt;Clent 拿的時機：JWT 到期或第一次拿&lt;/li&gt;
&lt;li&gt;為何不需跟 DB 溝通？&lt;ul&gt;
&lt;li&gt;因為 JWT 裡已有所需
      
    
    </summary>
    
    
      <category term="Authentication" scheme="https://james687.github.io/categories/Authentication/"/>
    
    
      <category term="jwt" scheme="https://james687.github.io/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL/MySQL local docker 開發的初始 setup</title>
    <link href="https://james687.github.io/2020/02/07/postgresql-mysql-init-setup/"/>
    <id>https://james687.github.io/2020/02/07/postgresql-mysql-init-setup/</id>
    <published>2020-02-07T02:44:37.000Z</published>
    <updated>2022-09-01T04:32:35.583Z</updated>
    
    <content type="html"><![CDATA[<p>container run 起來之後：<br><strong>PostgreSQL:</strong></p><ol><li><code>docker exec -it {db-container-name} psql -U postgres</code><ul><li>以預設 user <code>postgres</code> 連進 DB</li></ul></li><li><code>create user {username} with password &#39;{password}&#39;;</code></li><li><code>create database {database_name} with owner {username};</code></li><li>大功告成，可以用 <code>\l</code> 列出所有 database &amp; <code>\du</code> 列出所有 user 來確認</li></ol><ul><li>P.S. 假如一開始忘了指定 database owner 或想改變 owner: <code>alter database {database_name} owner to {owner_name};</code></li></ul><p><strong>MySQL: (以 5.7 為例)</strong></p><ol><li>環境變數須設置 <code>MYSQL_ROOT_PASSWORD</code></li><li>docker exec -it {db-container-name} mysql -p<ul><li>以預設 user <code>root</code> 連進去，輸入上面環境變數設置的密碼</li></ul></li><li><code>create user &#39;{username}&#39;@&#39;localhost&#39; identified by &#39;{password}&#39;;</code><ul><li>Use <code>localhost</code> due to working on the machine with MySQL.</li></ul></li><li><code>create database {database_name};</code></li><li>確認：<ul><li><code>show databases;</code></li><li><code>SELECT user FROM mysql.user;</code></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;container run 起來之後：&lt;br&gt;&lt;strong&gt;PostgreSQL:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker exec -it {db-container-name} psql -U postgres&lt;/code&gt;&lt;ul&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="Database" scheme="https://james687.github.io/categories/Database/"/>
    
    
      <category term="docker" scheme="https://james687.github.io/tags/docker/"/>
    
      <category term="postgresql" scheme="https://james687.github.io/tags/postgresql/"/>
    
      <category term="mysql" scheme="https://james687.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>用 pipenv 管理 requirements 搭配 docker-compose local 開發</title>
    <link href="https://james687.github.io/2020/02/06/pipenv-intro/"/>
    <id>https://james687.github.io/2020/02/06/pipenv-intro/</id>
    <published>2020-02-06T10:35:33.000Z</published>
    <updated>2022-07-25T10:03:12.241Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Local 開發是跑在 Docker 的虛擬環境裡，所以 Pipenv 產生的虛擬環境只是用來裝套件產生 Pipfile.lock 而已</li><li>用 pipenv 就不用自己寫 requirements.txt，不但可以自動安裝最新版的套件，而且可以很輕鬆的固定住對應 sub-packages 的版本</li><li>想一次更新所有套件也很容易</li><li>步驟：(以裝一個 package 為例)<a id="more"></a><ol><li><code>pip install --user pipenv</code><ul><li>裝完後 command line 找不到 pipenv 的需把對應資料夾加入 PATH</li></ul></li><li><code>cd</code> 到專案資料夾</li><li><code>pipenv install {target-package}</code><ul><li>假如原本沒有 virtual environment，pipenv 會先幫你產生一個基於這個資料夾的 virtual environment<ul><li>假如上層資料夾有 Pipfile，pipenv 會直接用那個 Pipfile 的 virtual environment，不會產生新的<ul><li>這是因為 pipenv 的虛擬環境是 project base 的，所以你可以在一個 Django project 裡的任何一個資料夾執行 pipenv 都可以用到這個 project 的虛擬環境</li><li>而且正常情況下不會有 Django project 裡還有 Django project 的情況，所以不需要在上層已有 Pipfile 的情況下，又在目前資料夾產生 Pipfile</li></ul></li></ul></li><li>這邊不要指定版號，pipenv 就會安裝最新版</li><li>pipenv 會產生 Pipfile 和 Pipfile.lock, 後者有記錄這個 package 和 sub-packages 的固定版號</li></ul></li><li><code>pipenv lock -r &gt; requirements.txt</code><ul><li>將 Pipfile.lock 輸出為 requirements.txt 格式</li></ul></li><li>接著就可以在 Dockerfile 裡直接用這個 requirements.txt 啦</li></ol></li><li>如果要開新的 Django project:<ol><li><code>cd {你想要 project 資料夾放的位置}</code></li><li><code>mkdir {project-name}; cd {project-name}</code></li><li><code>pipenv install Django</code></li><li><code>pipenv run django-admin startproject {project-name} .</code><ul><li><code>.</code>: 要把 <code>manage.py</code> 放在當前資料夾</li></ul></li></ol></li><li>之後假如要把 requirements.txt 裡所有的 top-level 套件都更新的話:<ol><li><code>pipenv update</code><ul><li>這個我自己沒試過，不過看文件應該是用這指令</li></ul></li><li>重新輸出 requirements.txt</li></ol></li><li>有看到另一種做法是可以不用自己產生 requirements.txt，直接在 Dockerfile 裡用 pipenv 動態生成 requirements.txt 來用，不過我自己還沒試過<ul><li><a href="https://www.evernote.com/l/ACwHCpgvaTNHOY2_L9U8Hso6dvJ9jGpp-Qc">Ref.</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Local 開發是跑在 Docker 的虛擬環境裡，所以 Pipenv 產生的虛擬環境只是用來裝套件產生 Pipfile.lock 而已&lt;/li&gt;
&lt;li&gt;用 pipenv 就不用自己寫 requirements.txt，不但可以自動安裝最新版的套件，而且可以很輕鬆的固定住對應 sub-packages 的版本&lt;/li&gt;
&lt;li&gt;想一次更新所有套件也很容易&lt;/li&gt;
&lt;li&gt;步驟：(以裝一個 package 為例)
    
    </summary>
    
    
      <category term="Package Management" scheme="https://james687.github.io/categories/Package-Management/"/>
    
    
      <category term="python" scheme="https://james687.github.io/tags/python/"/>
    
      <category term="pipenv" scheme="https://james687.github.io/tags/pipenv/"/>
    
      <category term="docker" scheme="https://james687.github.io/tags/docker/"/>
    
      <category term="django" scheme="https://james687.github.io/tags/django/"/>
    
  </entry>
  
</feed>
