<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>James&#39; Blog</title>
  
  <subtitle>程式隨筆</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://james687.github.io/"/>
  <updated>2020-02-07T09:36:30.566Z</updated>
  <id>https://james687.github.io/</id>
  
  <author>
    <name>James Ho</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PostgreSQL local docker 開發的初始 setup</title>
    <link href="https://james687.github.io/2020/02/07/postgresql-init-setup/"/>
    <id>https://james687.github.io/2020/02/07/postgresql-init-setup/</id>
    <published>2020-02-07T02:44:37.000Z</published>
    <updated>2020-02-07T09:36:30.566Z</updated>
    
    <content type="html"><![CDATA[<p>為了讓 web framework 可以跟你的 DB 連線，在你的 PostgreSQL container run 起來之後：</p><ol><li><code>docker exec -it {db-container-name} psql -U postgres</code><ul><li>以預設 user <code>postgres</code> 連進 DB</li></ul></li><li><code>create user {username} with password {password};</code></li><li><code>create database with owner {username};</code></li><li>大功告成，可以用 <code>\l</code> 列出所有 database &amp; <code>\du</code> 列出所有 user 來確認</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;為了讓 web framework 可以跟你的 DB 連線，在你的 PostgreSQL container run 起來之後：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker exec -it {db-container-name} psql -U postgres&lt;
      
    
    </summary>
    
    
      <category term="Database" scheme="https://james687.github.io/categories/Database/"/>
    
    
      <category term="docker" scheme="https://james687.github.io/tags/docker/"/>
    
      <category term="postgresql" scheme="https://james687.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>用 pipenv 管理 requirements 搭配 docker-compose local 開發</title>
    <link href="https://james687.github.io/2020/02/06/pipenv-intro/"/>
    <id>https://james687.github.io/2020/02/06/pipenv-intro/</id>
    <published>2020-02-06T10:35:33.000Z</published>
    <updated>2020-02-11T02:47:57.931Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Local 開發是跑在 Docker 的虛擬環境裡，所以 Pipenv 產生的虛擬環境只是用來裝套件產生 Pipfile.lock 而已</li><li>用 pipenv 就不用自己寫 requirements.txt，不但可以自動安裝最新版的套件，而且可以很輕鬆的固定住對應 sub-packages 的版本</li><li>想一次更新所有套件也很容易</li><li>步驟：(以裝一個 package 為例)<ol><li><code>pip install --user pipenv</code><ul><li>裝完後 command line 找不到 pipenv 的需把對應資料夾加入 PATH</li></ul></li><li><code>cd</code> 到專案資料夾</li><li><code>pipenv install {target-package}</code><ul><li>假如原本沒有 virtual environment，pipenv 會先幫你產生一個基於這個資料夾的 virtual environment<ul><li>假如上層資料夾有 Pipfile，pipenv 會直接用那個 Pipfile 的 virtual environment，不會產生新的<ul><li>這是因為 pipenv 的虛擬環境是 project base 的，所以你可以在一個 Django project 裡的任何一個資料夾執行 pipenv 都可以用到這個 project 的虛擬環境</li><li>而且正常情況下不會有 Django project 裡還有 Django project 的情況，所以不需要在上層已有 Pipfile 的情況下，又在目前資料夾產生 Pipfile</li></ul></li></ul></li><li>這邊不要指定版號，pipenv 就會安裝最新版</li><li>pipenv 會產生 Pipfile 和 Pipfile.lock, 後者有記錄這個 package 和 sub-packages 的固定版號</li></ul></li><li><code>pipenv lock -r &gt; requirements.txt</code><ul><li>將 Pipfile.lock 輸出為 requirements.txt 格式</li></ul></li><li>接著就可以在 Dockerfile 裡直接用這個 requirements.txt 啦</li></ol></li><li>如果要開新的 Django project:<ol><li><code>cd {你想要 project 資料夾放的位置}</code></li><li><code>mkdir {project-name}; cd {project-name}</code></li><li><code>pipenv install Django</code></li><li><code>pipenv run django-admin startproject {project-name} .</code><ul><li><code>.</code>: 要把 <code>manage.py</code> 放在當前資料夾</li></ul></li></ol></li><li>之後假如要把 requirements.txt 裡所有的 top-level 套件都更新的話:<ol><li><code>pipenv update</code><ul><li>這個我自己沒試過，不過看文件應該是用這指令</li></ul></li><li>重新輸出 requirements.txt</li></ol></li><li>有看到另一種做法是可以不用自己產生 requirements.txt，直接在 Dockerfile 裡用 pipenv 動態生成 requirements.txt 來用，不過我自己還沒試過<ul><li><a href="https://www.evernote.com/l/ACwHCpgvaTNHOY2_L9U8Hso6dvJ9jGpp-Qc">Ref.</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Local 開發是跑在 Docker 的虛擬環境裡，所以 Pipenv 產生的虛擬環境只是用來裝套件產生 Pipfile.lock 而已&lt;/li&gt;
&lt;li&gt;用 pipenv 就不用自己寫 requirements.txt，不但可以自動安裝最新版的套件，而且可以很
      
    
    </summary>
    
    
      <category term="Package Management" scheme="https://james687.github.io/categories/Package-Management/"/>
    
    
      <category term="python" scheme="https://james687.github.io/tags/python/"/>
    
      <category term="pipenv" scheme="https://james687.github.io/tags/pipenv/"/>
    
      <category term="docker" scheme="https://james687.github.io/tags/docker/"/>
    
      <category term="django" scheme="https://james687.github.io/tags/django/"/>
    
  </entry>
  
</feed>
