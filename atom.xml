<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>James&#39; Blog</title>
  
  <subtitle>程式隨筆</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://james687.github.io/"/>
  <updated>2022-12-08T06:11:03.163Z</updated>
  <id>https://james687.github.io/</id>
  
  <author>
    <name>James Ho</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Search Insertion Position note</title>
    <link href="https://james687.github.io/2022/12/08/search-insertion-position/"/>
    <id>https://james687.github.io/2022/12/08/search-insertion-position/</id>
    <published>2022-12-08T05:21:23.000Z</published>
    <updated>2022-12-08T06:11:03.163Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/search-insert-position/description">題目</a><br>思路：最直覺是直接 iterate nums，不過題目指定要 O(log n)，所以用 binary search 才能達到</p><ol><li><p>設定左右兩個指標作為<strong>可能答案範圍</strong>：[left, right]</p></li><li><p><code>while left &lt; right</code>: 設定 binary search 可繼續執行的條件</p><ul><li>此時會想，要用 <code>&lt;</code> or <code>&lt;=</code> 呢？判斷依據為在迴圈裡變更完 left or right 之後，<strong>不能造成無窮迴圈</strong></li><li>但此時還沒寫迴圈內容，所以可以先直觀的設定一個，譬如 <code>&lt;</code>，等寫完迴圈內容再來驗證是否適合</li></ul></li><li><p>迴圈寫完後，回來 check while condition，看看 while 把 left &amp; right 收斂到最後幾個的時候，經過以下的操作會不會有無窮迴圈</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. left &#x3D; mid + 1</span><br><span class="line">2. right &#x3D; mid</span><br></pre></td></tr></table></figure><ol><li><p>剩最後三個：此時 mid 會是中間那個，上面兩種操作都有助於收斂範圍</p></li><li><p>剩最後兩個：此時 mid == left，上面兩種操作一樣可以收斂範圍</p></li><li><p>剩最後一個：此時 left == mid == right，以目前的 while 條件設定，會因為不符而跳出，所以跳出迴圈後的情況就是這個</p><ul><li>如果 while 條件為 <code>left &lt;= right</code>，則 <code>right = mid</code> 這個操作會造成無窮迴圈，因此不能設定為 <code>&lt;=</code></li></ul><p>=&gt; 確認不會造成無窮迴圈，所以此 while 條件設定是正確的</p></li></ol></li><li><p>Post processing: 跳出 while 後的情況為 <code>left == right</code>，此時再跟 target 比，決定答案為何</p></li></ol><p>Python3 solution:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def searchInsert(self, nums: List[int], target: int) -&gt; int:</span><br><span class="line">    left, right &#x3D; 0, len(nums) - 1  # 設定左右兩個指標作為可能答案範圍：[left, right]</span><br><span class="line">    while left &lt; right:</span><br><span class="line">        mid &#x3D; (left + right) &#x2F;&#x2F; 2  # Python3 不會有 integer overflow 的問題，所以可以直接 (left + right)，然後用 &#96;&#x2F;&#x2F;&#96; 無條件捨去，避免小數</span><br><span class="line">        if nums[mid] &#x3D;&#x3D; target:</span><br><span class="line">            return mid</span><br><span class="line">        if nums[mid] &lt; target:</span><br><span class="line">            left &#x3D; mid + 1  # 此時最小的可能答案為 &#96;mid + 1&#96;</span><br><span class="line">        else:</span><br><span class="line">            right &#x3D; mid  # 此時最大的可能答案為 &#96;mid&#96;</span><br><span class="line">    return left + 1 if nums[left] &lt; target else left</span><br></pre></td></tr></table></figure><p>更詳細解說可參考<a href="https://leetcode.com/problems/search-insert-position/solutions/249092/come-on-forget-the-binary-search-pattern-template-try-understand-it/">此篇文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/search-insert-position/description&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路：最直覺是直接 iterate nums，不過題目指定要 O(log n)，所以用 binary s
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>3Sum note</title>
    <link href="https://james687.github.io/2022/12/05/3-sum/"/>
    <id>https://james687.github.io/2022/12/05/3-sum/</id>
    <published>2022-12-05T08:51:05.000Z</published>
    <updated>2022-12-05T09:11:14.881Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/3sum/description/">題目</a><br>思路：</p><ul><li>用三個指標，iterate 最左邊那個，找出對應於每個 left 指標的所有 result</li><li>先把 nums 排序，如此移動 mid, right 指標時就有個依據</li></ul><p>Python3 solution</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def threeSum(self, nums):</span><br><span class="line">    result &#x3D; []</span><br><span class="line">    nums.sort()</span><br><span class="line">    for left in range(len(nums) - 2):  # 右邊須留兩個空位給另兩個指標</span><br><span class="line">        if left &gt; 0 and nums[left] &#x3D;&#x3D; nums[left - 1]:  # 排除重複的 result，left 必須 &gt; 0 才會有前一個</span><br><span class="line">            continue                                   # - 假如 nums[left] 是一樣的，最後找到的 result 也會是一樣的，所以要排除掉</span><br><span class="line">        mid &#x3D; left + 1</span><br><span class="line">        right &#x3D; len(nums) - 1</span><br><span class="line">        while mid &lt; right:  # 設定有效範圍，在此範圍內尋找符合的 mid, right</span><br><span class="line">            t_sum &#x3D; nums[left] + nums[mid] + nums[right]</span><br><span class="line">            if t_sum &lt; 0:</span><br><span class="line">                mid +&#x3D; 1  # 此時必須讓 t_sum 變大，所以將 mid 往右移</span><br><span class="line">            elif t_sum &gt; 0:</span><br><span class="line">                right -&#x3D; 1  # 此時必須讓 t_sum 變小，所以將 right 往左移</span><br><span class="line">            else:</span><br><span class="line">                result.append([nums[left], nums[mid], nums[right]])</span><br><span class="line">                while mid &lt; right and nums[mid] &#x3D;&#x3D; nums[mid + 1]:  # 跳過 mid 重複的部分</span><br><span class="line">                    mid +&#x3D; 1</span><br><span class="line">                while mid &lt; right and nums[right] &#x3D;&#x3D; nums[right - 1]:  # 跳過 right 重複的部分</span><br><span class="line">                    right -&#x3D; 1</span><br><span class="line">                </span><br><span class="line">                # 正常的移動 mid, right，尋找下一個符合的 result</span><br><span class="line">                mid +&#x3D; 1</span><br><span class="line">                right -&#x3D; 1</span><br><span class="line">                </span><br><span class="line">    return result</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/3sum/description/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用三個指標，iterate 最左邊那個，找出對應於每個 left 指標的所有 result&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>為什麼 Python dict 的 get item operation 時間複雜度為 O(1) ？</title>
    <link href="https://james687.github.io/2022/07/25/why-dict-o1/"/>
    <id>https://james687.github.io/2022/07/25/why-dict-o1/</id>
    <published>2022-07-25T08:55:03.000Z</published>
    <updated>2022-07-25T08:55:40.467Z</updated>
    
    <content type="html"><![CDATA[<p>如果去 google，大部分查到的都會說因為 Python 會把 key 經過 hash function 運算，得到一個 dict 真正內部在使用的 key，從而找到對應的 value。而一個好的 hash function 它的運算所需時間是不會隨著 n 增加而變大的，所以 dict 的 get item operation 時間複雜度為 O(1) 。</p><p>不過我的疑惑是，經過 hash function 運算得到 key 之後，由這個 key 去找到 value 的時間複雜度是 O(1) 嗎？除非這個也是 O(1) 才能說整個 get item operation 是 O(1) 。</p><p>後來再多翻了一些說明，終於看到一兩個回答可以解釋這個疑惑。可以想像成今天我們有一個 array，我們只要知道 index 就可以知道要去哪裡找到對應的 value ( 因此是 O(1) )，經由 hash function 算出來的 key 就好像 array 的 index 一樣，只要看到這個 key 就知道要去哪裡找對應的 value，不會受 n 大小的影響，所以是 O(1)</p><p>另一個比較生活化的例子：hash function 算出來的 key，就好像你在圖書館要找書時用的索引，看到索引你就會知道書在哪一區、哪個櫃子裡，即使你需要照著圖書館的索引指示找一下才能找到，但這個過程所花的時間，跟圖書館有多少書沒有關係。</p><p>References:</p><ul><li><a href="https://qr.ae/pvMCpM">https://qr.ae/pvMCpM</a></li><li><a href="https://qr.ae/pvMCIv">https://qr.ae/pvMCIv</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果去 google，大部分查到的都會說因為 Python 會把 key 經過 hash function 運算，得到一個 dict 真正內部在使用的 key，從而找到對應的 value。而一個好的 hash function 它的運算所需時間是不會隨著 n 增加而變大的，
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://james687.github.io/categories/Algorithm/"/>
    
    
      <category term="python" scheme="https://james687.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在 Mac 加入 ssh key 的步驟</title>
    <link href="https://james687.github.io/2021/01/14/add-ssh-steps/"/>
    <id>https://james687.github.io/2021/01/14/add-ssh-steps/</id>
    <published>2021-01-14T08:31:44.000Z</published>
    <updated>2021-01-14T08:47:59.876Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><code>ssh-keygen -t ed25519 -C &quot;{你的 email}&quot;</code></p><ul><li>預設路徑假如已有相同檔案，記得指定新的<strong>完整</strong>路徑</li><li>如檔名不用預設的，下面 <code>id_ed25519</code> 自行替換成自己的檔名</li></ul></li><li><p><code>vi ~/.ssh/config</code></p><ul><li><p>舉例：加上如下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host GitHub</span><br><span class="line"> HostName github.com</span><br><span class="line"> IdentityFile ~&#x2F;.ssh&#x2F;id_ed25519</span><br><span class="line"> IdentitiesOnly yes</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>ssh-add -K ~/.ssh/id_ed25519</code></p></li><li><p><code>pbcopy &lt; ~/.ssh/id_ed25519.pub</code></p></li><li><p>貼到所使用的服務網站的相對應設定頁面</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ssh-keygen -t ed25519 -C &amp;quot;{你的 email}&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;預設路徑假如已有相同檔案，記得指定新的&lt;strong&gt;完整&lt;/strong&gt;路徑&lt;/li&gt;
&lt;li&gt;如檔名不
      
    
    </summary>
    
    
      <category term="Authentication" scheme="https://james687.github.io/categories/Authentication/"/>
    
    
  </entry>
  
  <entry>
    <title>簡單統整 JWT 相對於傳統 Session 驗證的好處</title>
    <link href="https://james687.github.io/2021/01/14/jwt-digest/"/>
    <id>https://james687.github.io/2021/01/14/jwt-digest/</id>
    <published>2021-01-14T05:11:05.000Z</published>
    <updated>2021-01-14T05:32:09.555Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Server 不用存 Session</li><li>只有在 Client 拿新 JWT 時才需要跟 DB 溝通<ul><li>Clent 拿的時機：JWT 到期或第一次拿</li><li>為何不需跟 DB 溝通？<ul><li>因為 JWT 裡已有所需資訊</li><li>但假如業務需求需要另外取敏感資訊的話還是需要碰 DB</li></ul></li></ul></li><li><a href="https://medium.com/%E9%BA%A5%E5%85%8B%E7%9A%84%E5%8D%8A%E8%B7%AF%E5%87%BA%E5%AE%B6%E7%AD%86%E8%A8%98/%E7%AD%86%E8%A8%98-%E9%80%8F%E9%81%8E-jwt-%E5%AF%A6%E4%BD%9C%E9%A9%97%E8%AD%89%E6%A9%9F%E5%88%B6-2e64d72594f8">參考</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Server 不用存 Session&lt;/li&gt;
&lt;li&gt;只有在 Client 拿新 JWT 時才需要跟 DB 溝通&lt;ul&gt;
&lt;li&gt;Clent 拿的時機：JWT 到期或第一次拿&lt;/li&gt;
&lt;li&gt;為何不需跟 DB 溝通？&lt;ul&gt;
&lt;li&gt;因為 JWT 裡已有所需
      
    
    </summary>
    
    
      <category term="Authentication" scheme="https://james687.github.io/categories/Authentication/"/>
    
    
      <category term="jwt" scheme="https://james687.github.io/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL/MySQL local docker 開發的初始 setup</title>
    <link href="https://james687.github.io/2020/02/07/postgresql-mysql-init-setup/"/>
    <id>https://james687.github.io/2020/02/07/postgresql-mysql-init-setup/</id>
    <published>2020-02-07T02:44:37.000Z</published>
    <updated>2022-09-01T04:32:35.583Z</updated>
    
    <content type="html"><![CDATA[<p>container run 起來之後：<br><strong>PostgreSQL:</strong></p><ol><li><code>docker exec -it {db-container-name} psql -U postgres</code><ul><li>以預設 user <code>postgres</code> 連進 DB</li></ul></li><li><code>create user {username} with password &#39;{password}&#39;;</code></li><li><code>create database {database_name} with owner {username};</code></li><li>大功告成，可以用 <code>\l</code> 列出所有 database &amp; <code>\du</code> 列出所有 user 來確認</li></ol><ul><li>P.S. 假如一開始忘了指定 database owner 或想改變 owner: <code>alter database {database_name} owner to {owner_name};</code></li></ul><p><strong>MySQL: (以 5.7 為例)</strong></p><ol><li>環境變數須設置 <code>MYSQL_ROOT_PASSWORD</code></li><li>docker exec -it {db-container-name} mysql -p<ul><li>以預設 user <code>root</code> 連進去，輸入上面環境變數設置的密碼</li></ul></li><li><code>create user &#39;{username}&#39;@&#39;localhost&#39; identified by &#39;{password}&#39;;</code><ul><li>Use <code>localhost</code> due to working on the machine with MySQL.</li></ul></li><li><code>create database {database_name};</code></li><li>確認：<ul><li><code>show databases;</code></li><li><code>SELECT user FROM mysql.user;</code></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;container run 起來之後：&lt;br&gt;&lt;strong&gt;PostgreSQL:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker exec -it {db-container-name} psql -U postgres&lt;/code&gt;&lt;ul&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="Database" scheme="https://james687.github.io/categories/Database/"/>
    
    
      <category term="docker" scheme="https://james687.github.io/tags/docker/"/>
    
      <category term="postgresql" scheme="https://james687.github.io/tags/postgresql/"/>
    
      <category term="mysql" scheme="https://james687.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>用 pipenv 管理 requirements 搭配 docker-compose local 開發</title>
    <link href="https://james687.github.io/2020/02/06/pipenv-intro/"/>
    <id>https://james687.github.io/2020/02/06/pipenv-intro/</id>
    <published>2020-02-06T10:35:33.000Z</published>
    <updated>2022-07-25T10:03:12.241Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Local 開發是跑在 Docker 的虛擬環境裡，所以 Pipenv 產生的虛擬環境只是用來裝套件產生 Pipfile.lock 而已</li><li>用 pipenv 就不用自己寫 requirements.txt，不但可以自動安裝最新版的套件，而且可以很輕鬆的固定住對應 sub-packages 的版本</li><li>想一次更新所有套件也很容易</li><li>步驟：(以裝一個 package 為例)<a id="more"></a><ol><li><code>pip install --user pipenv</code><ul><li>裝完後 command line 找不到 pipenv 的需把對應資料夾加入 PATH</li></ul></li><li><code>cd</code> 到專案資料夾</li><li><code>pipenv install {target-package}</code><ul><li>假如原本沒有 virtual environment，pipenv 會先幫你產生一個基於這個資料夾的 virtual environment<ul><li>假如上層資料夾有 Pipfile，pipenv 會直接用那個 Pipfile 的 virtual environment，不會產生新的<ul><li>這是因為 pipenv 的虛擬環境是 project base 的，所以你可以在一個 Django project 裡的任何一個資料夾執行 pipenv 都可以用到這個 project 的虛擬環境</li><li>而且正常情況下不會有 Django project 裡還有 Django project 的情況，所以不需要在上層已有 Pipfile 的情況下，又在目前資料夾產生 Pipfile</li></ul></li></ul></li><li>這邊不要指定版號，pipenv 就會安裝最新版</li><li>pipenv 會產生 Pipfile 和 Pipfile.lock, 後者有記錄這個 package 和 sub-packages 的固定版號</li></ul></li><li><code>pipenv lock -r &gt; requirements.txt</code><ul><li>將 Pipfile.lock 輸出為 requirements.txt 格式</li></ul></li><li>接著就可以在 Dockerfile 裡直接用這個 requirements.txt 啦</li></ol></li><li>如果要開新的 Django project:<ol><li><code>cd {你想要 project 資料夾放的位置}</code></li><li><code>mkdir {project-name}; cd {project-name}</code></li><li><code>pipenv install Django</code></li><li><code>pipenv run django-admin startproject {project-name} .</code><ul><li><code>.</code>: 要把 <code>manage.py</code> 放在當前資料夾</li></ul></li></ol></li><li>之後假如要把 requirements.txt 裡所有的 top-level 套件都更新的話:<ol><li><code>pipenv update</code><ul><li>這個我自己沒試過，不過看文件應該是用這指令</li></ul></li><li>重新輸出 requirements.txt</li></ol></li><li>有看到另一種做法是可以不用自己產生 requirements.txt，直接在 Dockerfile 裡用 pipenv 動態生成 requirements.txt 來用，不過我自己還沒試過<ul><li><a href="https://www.evernote.com/l/ACwHCpgvaTNHOY2_L9U8Hso6dvJ9jGpp-Qc">Ref.</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Local 開發是跑在 Docker 的虛擬環境裡，所以 Pipenv 產生的虛擬環境只是用來裝套件產生 Pipfile.lock 而已&lt;/li&gt;
&lt;li&gt;用 pipenv 就不用自己寫 requirements.txt，不但可以自動安裝最新版的套件，而且可以很輕鬆的固定住對應 sub-packages 的版本&lt;/li&gt;
&lt;li&gt;想一次更新所有套件也很容易&lt;/li&gt;
&lt;li&gt;步驟：(以裝一個 package 為例)
    
    </summary>
    
    
      <category term="Package Management" scheme="https://james687.github.io/categories/Package-Management/"/>
    
    
      <category term="python" scheme="https://james687.github.io/tags/python/"/>
    
      <category term="pipenv" scheme="https://james687.github.io/tags/pipenv/"/>
    
      <category term="docker" scheme="https://james687.github.io/tags/docker/"/>
    
      <category term="django" scheme="https://james687.github.io/tags/django/"/>
    
  </entry>
  
</feed>
