<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>James&#39; Blog</title>
  
  <subtitle>程式隨筆</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://james687.github.io/"/>
  <updated>2023-04-12T03:00:59.449Z</updated>
  <id>https://james687.github.io/</id>
  
  <author>
    <name>James Ho</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Validate Binary Search Tree</title>
    <link href="https://james687.github.io/2023/04/12/validate-binary-search-tree/"/>
    <id>https://james687.github.io/2023/04/12/validate-binary-search-tree/</id>
    <published>2023-04-12T01:11:56.000Z</published>
    <updated>2023-04-12T03:00:59.449Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/validate-binary-search-tree/">題目</a><br>思路</p><ol><li>樹的問題用遞迴來解相對上比較直覺，所以先試試遞迴解</li><li>拆解到最小單位來找 recursive case: 隨機取樹中一個點，判斷它是否 valid</li><li>大部分情況下會有上限和下限。以左邊的點為例，上限就是父節點的值，下限就是它所在的右子樹的父節點的值，所以這個值必須由上到下一層層傳遞下來。反之，右邊的點的話，就變成上限必須一層層傳遞下來</li><li>因為上下限必須用傳遞的，所以寫一個 function <code>node_valid</code> 接受上下限的參數<a id="more"></a>Python3 solution:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValidBST</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; bool:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">node_valid</span><span class="params">(node, floor=float<span class="params">(<span class="string">'-inf'</span>)</span>, ceiling=float<span class="params">(<span class="string">'inf'</span>)</span>)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        v = node.val</span><br><span class="line">        <span class="keyword">if</span> v &lt;= floor <span class="keyword">or</span> v &gt;= ceiling:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node_valid(node.left, floor, v):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node_valid(node.right, v, ceiling):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> node_valid(root)</span><br></pre></td></tr></table></figure><p>假設樹有 n 個 node</p><ul><li>時間複雜度：O(n)<ul><li>因為每個點都會做一次，而每次的複雜度為 O(1)</li><li><a name="time-complexity-example"></a>另一個算法可參考<a href="/recursion-time-complexity">這邊</a>的快速解：<ul><li><code>node_valid</code> 的遞迴深度為這棵樹的深度，在樹為平衡的情況下，深度為 log2 n，所以複雜度為 O(2^(log2 n)) = O(n)</li></ul></li></ul></li></ul><h3 id="接下來嘗試用迭代解"><a href="#接下來嘗試用迭代解" class="headerlink" title="接下來嘗試用迭代解"></a>接下來嘗試用迭代解</h3><ol><li>可以用跟遞迴類似的思路，只是改成把要處理的 nodes 都放到 stack 裡，然後每次迴圈都從裡面拿一個出來做，一直做到 stack 為空。迴圈裡的內容就是 recursive case</li><li>因為 floor 和 ceiling 必須一直傳下去，所以跟 node 一起包成 tuple 放入 stack</li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValidBST</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; bool:</span></span><br><span class="line">    stack = [(root, float(<span class="string">'-inf'</span>), float(<span class="string">'inf'</span>))]  <span class="comment"># node, floor, ceiling</span></span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node, floor, ceiling = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        v = node.val</span><br><span class="line">        <span class="keyword">if</span> v &lt;= floor <span class="keyword">or</span> v &gt;= ceiling:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        stack.extend([</span><br><span class="line">            (node.left, floor, v),</span><br><span class="line">            (node.right, v, ceiling)</span><br><span class="line">        ])</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/validate-binary-search-tree/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;樹的問題用遞迴來解相對上比較直覺，所以先試試遞迴解&lt;/li&gt;
&lt;li&gt;拆解到最小單位來找 recursive case: 隨機取樹中一個點，判斷它是否 valid&lt;/li&gt;
&lt;li&gt;大部分情況下會有上限和下限。以左邊的點為例，上限就是父節點的值，下限就是它所在的右子樹的父節點的值，所以這個值必須由上到下一層層傳遞下來。反之，右邊的點的話，就變成上限必須一層層傳遞下來&lt;/li&gt;
&lt;li&gt;因為上下限必須用傳遞的，所以寫一個 function &lt;code&gt;node_valid&lt;/code&gt; 接受上下限的參數
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="tree" scheme="https://james687.github.io/tags/tree/"/>
    
      <category term="binary tree" scheme="https://james687.github.io/tags/binary-tree/"/>
    
      <category term="depth-first search" scheme="https://james687.github.io/tags/depth-first-search/"/>
    
      <category term="recursion" scheme="https://james687.github.io/tags/recursion/"/>
    
      <category term="binary search tree" scheme="https://james687.github.io/tags/binary-search-tree/"/>
    
  </entry>
  
  <entry>
    <title>使用 Dokku 將 Web App 部署在 DigitalOcean</title>
    <link href="https://james687.github.io/2023/04/05/use-dokku-on-digitalocean/"/>
    <id>https://james687.github.io/2023/04/05/use-dokku-on-digitalocean/</id>
    <published>2023-04-05T07:37:28.000Z</published>
    <updated>2023-04-05T10:20:02.280Z</updated>
    
    <content type="html"><![CDATA[<p>因為 Heroku 現在要收費了，原本放在上面<a href="https://github.com/james687/Tweetme">用免費方案的 project</a> 就需要找新的方法。於是找到了 <a href="https://github.com/dokku/dokku">Dokku</a>，他的 GitHub page 介紹如下：</p><blockquote><p>Docker powered mini-Heroku. The smallest PaaS implementation you’ve ever seen.</p></blockquote><p>的確是很傳神，因為使用方法跟 Heroku 很像，基本上可以從 Heroku 無痛遷移，差別在你需要用自己的 VM &amp; domain，配合 dokku 就可以在上面用 docker 管理你的 application，就像他的 about 寫的：<a id="more"></a></p><blockquote><p>A docker-powered PaaS that helps you build and manage the lifecycle of applications</p></blockquote><p>這邊使用 DigitalOcean 的 droplet，因為他有兩個月 200 美金的試用 credits，假如只是短期測試專案的話也夠了，不然也可以兩個月換一個新帳號 😅</p><p>這邊稍微筆記一下把 Heroku 專案搬過來的過程：</p><ul><li>在 DigitalOcean 創一個 droplet, 在上面照著<a href="https://dokku.com/docs/getting-started/installation/">文件</a>的步驟做，droplet OS 需選擇 dokku 支援的版本</li><li>使用 subdomain 的步驟：<ol><li><code>dokku domains:set-global {domain}</code></li><li><code>dokku domains:set {dokku_app_name} {subdomain.domain}</code></li><li>設定 domain 的 A record, CNAME<ul><li>A record: <ul><li>Host: <code>@</code></li><li>Value: droplet IP</li></ul></li><li>CNAME<ul><li>Host: subdomain</li><li>Value: <code>{domain}.</code></li></ul></li></ul></li></ol><ul><li>看起來這個方法應該可以讓我們在同一個 droplet 裡，用不同的 subdomains 跑多個不同的 web apps。只要分別設定多個 CNAME 和對應的 dokku app domain 就好<ul><li>流程：{subdomain_a.domain} 的 request 依循 IP 到了該 droplet 的 nginx，nginx 再將 request 導到 subdomain_a 對應的 dokku app</li></ul></li><li>如果單純只想讓 <code>{dokku_app_name}.{domain}</code> 指到 dokku app，也可以只設定 A record:<ul><li>Host: <code>dokku_app_name</code></li><li>Value: droplet IP</li></ul></li></ul></li><li><code>dokku config:set {dokku_app_name} KEY=value</code> 可設定需要的環境變數</li><li>可以用 runtime.txt 指定 python 執行的版本</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因為 Heroku 現在要收費了，原本放在上面&lt;a href=&quot;https://github.com/james687/Tweetme&quot;&gt;用免費方案的 project&lt;/a&gt; 就需要找新的方法。於是找到了 &lt;a href=&quot;https://github.com/dokku/dokku&quot;&gt;Dokku&lt;/a&gt;，他的 GitHub page 介紹如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker powered mini-Heroku. The smallest PaaS implementation you’ve ever seen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;的確是很傳神，因為使用方法跟 Heroku 很像，基本上可以從 Heroku 無痛遷移，差別在你需要用自己的 VM &amp;amp; domain，配合 dokku 就可以在上面用 docker 管理你的 application，就像他的 about 寫的：
    
    </summary>
    
    
      <category term="Development Note" scheme="https://james687.github.io/categories/Development-Note/"/>
    
    
      <category term="docker" scheme="https://james687.github.io/tags/docker/"/>
    
      <category term="heroku" scheme="https://james687.github.io/tags/heroku/"/>
    
      <category term="dokku" scheme="https://james687.github.io/tags/dokku/"/>
    
      <category term="paas" scheme="https://james687.github.io/tags/paas/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree Level Order Traversal</title>
    <link href="https://james687.github.io/2023/03/28/binary-tree-level-order-traversal/"/>
    <id>https://james687.github.io/2023/03/28/binary-tree-level-order-traversal/</id>
    <published>2023-03-28T11:25:25.000Z</published>
    <updated>2023-03-30T04:45:41.803Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/">題目</a><br>思路</p><ol><li>一次一層很直覺想到廣先搜尋 (BFS)，所以用 iterative 的做法來解</li><li>一次迴圈處理一層，並把下一層節點放入 stack 繼續在下次迴圈處理<ul><li>stack 也是 list of list, 裡面的每個 list 都是一層節點<a id="more"></a></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; List[List[int]]:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    stack, values = [[root]], []</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        level_vals = []</span><br><span class="line">        level_nodes = []</span><br><span class="line">        nodes = stack.pop()</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            level_vals.append(node.val)</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                level_nodes.append(node.left)</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                level_nodes.append(node.right)</span><br><span class="line">        <span class="keyword">if</span> level_nodes:</span><br><span class="line">            stack.append(level_nodes)</span><br><span class="line">        values.append(level_vals)</span><br><span class="line">    <span class="keyword">return</span> values</span><br></pre></td></tr></table></figure><h3 id="但假如用遞迴的話怎麼解？"><a href="#但假如用遞迴的話怎麼解？" class="headerlink" title="但假如用遞迴的話怎麼解？"></a>但假如用遞迴的話怎麼解？</h3><p>Recursive case: 把當下這個節點的 value 放到對應 level index 的 list 中</p><ul><li><p>如果沒有對應的 level index 就加一個空 list 進去 (<code>level_ind</code> 會從 0 開始依序傳入，不會有跳號的情況)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    level = res[level_ind]</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    level = []</span><br><span class="line">    res.append(level)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; List[List[int]]:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put_value</span><span class="params">(node, level_ind, res)</span>:</span></span><br><span class="line">        <span class="comment"># Base case</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Recursive case</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            level = res[level_ind]</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            level = []</span><br><span class="line">            res.append(level)</span><br><span class="line">        level.append(node.val)</span><br><span class="line">        put_value(node.left, level_ind + <span class="number">1</span>, res)</span><br><span class="line">        put_value(node.right, level_ind + <span class="number">1</span>, res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    res = []</span><br><span class="line">    put_value(root, <span class="number">0</span>, res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-level-order-traversal/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一次一層很直覺想到廣先搜尋 (BFS)，所以用 iterative 的做法來解&lt;/li&gt;
&lt;li&gt;一次迴圈處理一層，並把下一層節點放入 stack 繼續在下次迴圈處理&lt;ul&gt;
&lt;li&gt;stack 也是 list of list, 裡面的每個 list 都是一層節點
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="tree" scheme="https://james687.github.io/tags/tree/"/>
    
      <category term="binary tree" scheme="https://james687.github.io/tags/binary-tree/"/>
    
      <category term="depth-first search" scheme="https://james687.github.io/tags/depth-first-search/"/>
    
      <category term="recursion" scheme="https://james687.github.io/tags/recursion/"/>
    
      <category term="breadth-first search" scheme="https://james687.github.io/tags/breadth-first-search/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree Inorder Traversal</title>
    <link href="https://james687.github.io/2023/03/23/binary-tree-inorder-traversal/"/>
    <id>https://james687.github.io/2023/03/23/binary-tree-inorder-traversal/</id>
    <published>2023-03-23T08:51:55.000Z</published>
    <updated>2023-03-30T04:47:05.770Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/">題目</a><br>思路</p><ol><li>Inorder Traversal: 對任意節點來說，順序為 左子樹 -&gt; 自己 -&gt; 右子樹</li><li>可拆解為最小單位動作，即第一點，故使用遞迴<a id="more"></a></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="string">"""@return node values with inorder-traversal order"""</span></span><br><span class="line">        <span class="comment"># Base case</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># Recursive case</span></span><br><span class="line">        values = self.inorderTraversal(root.left)  <span class="comment"># 先取得左子節點所有的 inorder-traversal values</span></span><br><span class="line">        values.append(root.val)</span><br><span class="line">        values.extend(self.inorderTraversal(root.right))  <span class="comment"># 最後加上右子節點的所有 inorder-traversal values</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> values</span><br></pre></td></tr></table></figure><h3 id="這個題目使用遞迴是相對直觀的，以下改用-iterative-的方式來解："><a href="#這個題目使用遞迴是相對直觀的，以下改用-iterative-的方式來解：" class="headerlink" title="這個題目使用遞迴是相對直觀的，以下改用 iterative 的方式來解："></a>這個題目使用遞迴是相對直觀的，以下改用 iterative 的方式來解：</h3><p>思路：使用一個 list 當 stack 來放 nodes，只要<strong>按照順序</strong>放入，再從裡面依序把 node <code>pop()</code> 出來取 value，stack 為空的時候代表已處理完所有的 nodes =&gt; 回傳答案。以下列出主要分解動作：</p><ol><li><p>把 root 和 root 所有的左節點由上到下依序放入 stack，放完後 stack 裡自然會包含左節點跟中間的節點</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> root:</span><br><span class="line">    stack.append(root)</span><br><span class="line">    root = root.left</span><br></pre></td></tr></table></figure></li><li><p>把 node <code>pop()</code> 出來取 value，此時最先被 pop 出來的會是最下面的左節點。可以先參照接下來的程式碼，當 node 為葉子節點時，不會有 <code>node.right</code>，所以下一個迴圈會繼續 pop 出中間的節點</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node = stack.pop()</span><br><span class="line">values.append(node.val)</span><br></pre></td></tr></table></figure></li><li><p>左、中節點處理完後，處理右節點：把右節點當成新的 root，重複前兩步驟</p><ol><li><code>root = node.right</code></li><li>上面一行連同前兩步驟的程式碼 (如下)，用 <code>while True:</code> 包起來</li></ol></li><li><p>寫終止條件：在 <code>node = stack.pop()</code> 之前判斷 stack 是否還有，如為空代表所有的節點已被遍歷完，故回傳答案 <code>values</code></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="string">"""@return node values with inorder-traversal order"""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        stack, values = [], []</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">while</span> root:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.left</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                <span class="keyword">return</span> values</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            values.append(node.val)</span><br><span class="line">            root = node.right</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-inorder-traversal/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Inorder Traversal: 對任意節點來說，順序為 左子樹 -&amp;gt; 自己 -&amp;gt; 右子樹&lt;/li&gt;
&lt;li&gt;可拆解為最小單位動作，即第一點，故使用遞迴
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="tree" scheme="https://james687.github.io/tags/tree/"/>
    
      <category term="binary tree" scheme="https://james687.github.io/tags/binary-tree/"/>
    
      <category term="depth-first search" scheme="https://james687.github.io/tags/depth-first-search/"/>
    
      <category term="recursion" scheme="https://james687.github.io/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>House Robber II</title>
    <link href="https://james687.github.io/2023/03/23/house-robber-ii/"/>
    <id>https://james687.github.io/2023/03/23/house-robber-ii/</id>
    <published>2023-03-23T05:37:15.000Z</published>
    <updated>2023-03-30T04:47:22.940Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/house-robber-ii/">題目</a><br>思路</p><ol><li>跟 <a href="https://leetcode.com/problems/house-robber">House Robber</a> 很像，只差在房子的排列變成頭尾相連，有沒有辦法把這題拆解，變成能用上第一版 House Robber 的解題方法？譬如把環形變回直排？</li><li>變成環形之後多出來的限制讓我們可以把這題分成以下三種情況：<ol><li>搶第一個、不搶最後一個：加入第三種情況，等同於可以<strong>視為直排，但只考慮到倒數第二個</strong></li><li>不搶第一個、搶最後一個：加入第三種情況，等同於可以<strong>視為直排，但從第二個開始考慮</strong><a id="more"></a></li><li>第一個和最後一個都不搶：可與前兩種情況合併</li></ol><ul><li>最後把以上三種情況合併為粗體的兩種情況，<strong>轉為第一版 House Robber 問題</strong>，接下來只需取兩種情況錢比較多的就是答案</li></ul></li><li>因為現在需多考慮起始 index，我們把<a href="https://james687.github.io/2023/03/20/house-robber">第一版解法</a>的遞迴函式改為多傳入起始 index，並同樣用 <code>@cache</code> 避免同樣的 <code>inner_rob(i, j)</code> 重複計算<ul><li>Base case 寫法：<ol><li>考慮一開始 <code>j</code> 比 <code>i</code> 大的情況，一路因為 <code>inner_rob(i, j - 1)</code>, <code>inner_rob(i, j - 2)</code> 而減少的情況：<ol><li><code>j == i + 2</code> 時：下兩個遞迴節點為 <code>inner_rob(i, i + 1)</code>, <code>inner_rob(i, i)</code></li><li><code>j == i + 1</code> 時： 下兩個遞迴節點為 <code>inner_rob(i, i)</code>, <code>inner_rob(i, i - 1)</code></li></ol><ul><li>此時可以寫出 base case 的兩種情況 <code>j == i</code>, <code>j &lt; i</code>，寫完後將 <code>inner_rob(i, j)</code> 代入 <code>j == i + 1</code> 驗算看看是否正確</li></ul></li><li>考慮一開始 <code>j == i</code> 的情況，代入驗算看看是否正確</li><li>考慮一開始 <code>j &lt; i</code> 的情況，也就是 <code>len(nums) == 1</code> 時：<ul><li>此時得出的答案為 <code>0</code>，是錯的，所以 base case 需多考慮這種情況，加入 <code>len(nums) == 1</code> 時的判斷處理</li></ul></li></ol></li></ul></li><li>取錢比較多的情況即為答案：<code>return max(inner_rob(0, len(nums) - 2), inner_rob(1, len(nums) - 1))</code></li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line"><span class="meta">    @cache</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_rob</span><span class="params">(i, j)</span>:</span></span><br><span class="line">        <span class="string">"""@return 由 index i 搶到 j 可得的最大收穫"""</span></span><br><span class="line">        <span class="comment"># Base case</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> j == i:</span><br><span class="line">            <span class="keyword">return</span> nums[j]</span><br><span class="line">        <span class="keyword">if</span> j &lt; i:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># Recursive case</span></span><br><span class="line">        <span class="keyword">return</span> max(inner_rob(i, j - <span class="number">1</span>), nums[j] + inner_rob(i, j - <span class="number">2</span>))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> max(inner_rob(<span class="number">0</span>, len(nums) - <span class="number">2</span>), inner_rob(<span class="number">1</span>, len(nums) - <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>如果不用 <code>@cache</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">    l = len(nums)</span><br><span class="line">    memo = [[<span class="literal">None</span>] * l <span class="keyword">for</span> _ <span class="keyword">in</span> range(l)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_rob</span><span class="params">(i, j)</span>:</span></span><br><span class="line">        <span class="string">"""@return 由 index i 搶到 j 可得的最大收穫"""</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> i == j:</span><br><span class="line">            <span class="keyword">return</span> nums[j]</span><br><span class="line">        <span class="keyword">if</span> j &lt; i:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> memo[i][j] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> memo[i][j]</span><br><span class="line">        memo[i][j] = max(inner_rob(i, j - <span class="number">1</span>), nums[j] + inner_rob(i, j - <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> memo[i][j]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> max(inner_rob(<span class="number">0</span>, len(nums) - <span class="number">2</span>), inner_rob(<span class="number">1</span>, len(nums) - <span class="number">1</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/house-robber-ii/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;跟 &lt;a href=&quot;https://leetcode.com/problems/house-robber&quot;&gt;House Robber&lt;/a&gt; 很像，只差在房子的排列變成頭尾相連，有沒有辦法把這題拆解，變成能用上第一版 House Robber 的解題方法？譬如把環形變回直排？&lt;/li&gt;
&lt;li&gt;變成環形之後多出來的限制讓我們可以把這題分成以下三種情況：&lt;ol&gt;
&lt;li&gt;搶第一個、不搶最後一個：加入第三種情況，等同於可以&lt;strong&gt;視為直排，但只考慮到倒數第二個&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;不搶第一個、搶最後一個：加入第三種情況，等同於可以&lt;strong&gt;視為直排，但從第二個開始考慮&lt;/strong&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="recursion" scheme="https://james687.github.io/tags/recursion/"/>
    
      <category term="dynamic programming" scheme="https://james687.github.io/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>遞迴的時間複雜度算法</title>
    <link href="https://james687.github.io/2023/03/21/recursion-time-complexity/"/>
    <id>https://james687.github.io/2023/03/21/recursion-time-complexity/</id>
    <published>2023-03-21T08:55:19.000Z</published>
    <updated>2023-04-12T03:01:16.278Z</updated>
    
    <content type="html"><![CDATA[<h3 id="快速解-適用於遞迴函式內呼叫自己-gt-1-次"><a href="#快速解-適用於遞迴函式內呼叫自己-gt-1-次" class="headerlink" title="快速解 (適用於遞迴函式內呼叫自己 &gt; 1 次)"></a>快速解 (適用於遞迴函式內呼叫自己 &gt; 1 次)</h3><ol><li>看這個遞迴函式呼叫自己幾次，假設呼叫了 <code>x</code> 次</li><li>看看那些遞迴呼叫的深度。假如函式內呼叫自己兩次，深度各為 m、n，此時這個遞迴函式的總深度 <code>h = m + n</code></li><li>時間複雜度為 <code>O(x^h)</code></li></ol><ul><li>至少目前套用在幾個比較單純的遞迴式都成立，不確定複雜的是不是也成立<a id="more"></a></li><li>例子：<a href="/validate-binary-search-tree#time-complexity-example">Validate Binary Search Tree</a></li></ul><h3 id="詳細解-遞迴樹"><a href="#詳細解-遞迴樹" class="headerlink" title="詳細解 (遞迴樹)"></a>詳細解 (遞迴樹)</h3><p>以 <a href="https://james687.github.io/2023/03/18/unique-paths/">Unique Paths</a> 的遞迴解為例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span><span class="params">(self, m: int, n: int)</span> -&gt; int:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">u_paths</span><span class="params">(i, j)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= m <span class="keyword">or</span> j &gt;= n:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> i == m - <span class="number">1</span> <span class="keyword">and</span> j == n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> u_paths(i + <span class="number">1</span>, j) + u_paths(i, j + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> u_paths(<span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><ol><li>假設 <code>m = 3, n = 2</code>，遞迴樹如下 <img src="/images/recursion-tree.png" alt=""></li><li>由圖可知，遞迴深度為 <code>5 (= m + n)</code><ul><li>要怎麼不用畫圖，用看的就得出深度？<ul><li>深度為根節點走到葉子節點的路徑長，我們可以看從 <code>u_paths(0, 0)</code> 開始，要走幾次才會結束：<ol><li><code>u_paths(i + 1, j)</code> 這邊只需要看 <code>i</code>，要走 <code>i + 1 = 1, 2, ..., m</code> 共 <code>m</code> 次</li><li>走完 <code>m</code> 次之後還有 <code>u_paths(i, j + 1)</code>，要接著再走 <code>j + 1 = 1, 2, ..., n</code> 共 <code>n</code> 次</li><li>所以需要走 <code>m + n</code> 次才會結束</li></ol></li></ul></li></ul></li><li><code>u_paths</code> 合併遞迴結果的運算只需要一次加法，可以把時間消耗記做 <code>1</code>，也就是每個節點的時間消耗都是 <code>1</code></li><li>所有節點的時間消耗總合就是這個函式的時間複雜度。第一層有 <code>1 (= 2^0)</code> 個節點，第二層有 <code>2 (= 2^1)</code> 個節點，第三層有 <code>4 (= 2^2)</code> 個節點，以此類推，假設此樹深度為 <code>h</code>，所有節點的時間消耗和為 <code>2^0 + 2^1 + 2^2 + ... + 2^h</code>，依據等比級數和的公式得出結果為 <code>2^(h + 1) - 1</code><ul><li>這邊的算法是假設這是一個滿二元樹來算，但其實這並不是一個滿二元樹 (像第四層就只有 <code>7</code> 個節點)，所以遞迴樹法並不嚴謹，只是一個估算，真要嚴謹分析的話可以再用 Substitution Method 或 Master Theorem 來驗證</li><li>由第二點，深度 <code>h = m + n</code></li></ul></li><li>所以時間複雜度為 <code>O(2^(h + 1)) = O(2 * 2^h) = O(2^h) = O(2^(m + n))</code></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;快速解-適用於遞迴函式內呼叫自己-gt-1-次&quot;&gt;&lt;a href=&quot;#快速解-適用於遞迴函式內呼叫自己-gt-1-次&quot; class=&quot;headerlink&quot; title=&quot;快速解 (適用於遞迴函式內呼叫自己 &amp;gt; 1 次)&quot;&gt;&lt;/a&gt;快速解 (適用於遞迴函式內呼叫自己 &amp;gt; 1 次)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;看這個遞迴函式呼叫自己幾次，假設呼叫了 &lt;code&gt;x&lt;/code&gt; 次&lt;/li&gt;
&lt;li&gt;看看那些遞迴呼叫的深度。假如函式內呼叫自己兩次，深度各為 m、n，此時這個遞迴函式的總深度 &lt;code&gt;h = m + n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;時間複雜度為 &lt;code&gt;O(x^h)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;至少目前套用在幾個比較單純的遞迴式都成立，不確定複雜的是不是也成立
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://james687.github.io/categories/Algorithm/"/>
    
    
      <category term="recursion" scheme="https://james687.github.io/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>House Robber</title>
    <link href="https://james687.github.io/2023/03/20/house-robber/"/>
    <id>https://james687.github.io/2023/03/20/house-robber/</id>
    <published>2023-03-20T07:08:15.000Z</published>
    <updated>2023-03-30T04:47:34.521Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/house-robber/">題目</a><br>思路</p><ol><li>可以把得出答案的過程拆解為最小可重複步驟，用遞迴來解</li><li>Recursive case: 假設 index 為 i，由 index 0 搶到 i 可得的最大收穫為 <code>inner_rob(i)</code>。在位置 i, 可選擇搶或不搶：<ol><li>不搶：最大收穫跟前一個點一樣，為 <code>inner_rob(i - 1)</code></li><li>搶：代表前一個點一定是不搶，所以最大收穫為這個點的 money <code>nums[i]</code> 再加上前前個點的最大收穫 <code>inner_rob(i - 2)</code></li></ol><ul><li>所以 <code>inner_rob(i)</code> 為以上兩種情況取較大的那個<a id="more"></a></li></ul></li><li>Base case (終止條件)：<code>i &lt; 0</code></li><li>因為這個<a href="https://james687.github.io/2023/03/21/recursion-time-complexity/">遞迴解的時間複雜度</a>最差為 O(2^n)，必須降低，我們可以把計算過的 <code>inner_rob(i)</code> 使用 <code>@cache</code> 將 function 回傳 cache 起來，避免同樣的 <code>inner_rob(i)</code> 重複計算</li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line"><span class="meta">    @cache</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_rob</span><span class="params">(i)</span>:</span></span><br><span class="line">        <span class="string">"""@return 由 index 0 搶到 i 可得的最大收穫"""</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> max(inner_rob(i - <span class="number">1</span>), nums[i] + inner_rob(i - <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> inner_rob(len(nums) - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>時間複雜度：O(n)<ul><li>因為有記憶，每個點只會計算一次，共有 n 個點</li></ul></li><li>空間複雜度：O(n)<ul><li>cache 需要的空間為 n，遞迴的最大深度也是 n</li></ul></li></ul><p>以上，如果不用 <code>@cache</code> 的話：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">    memo = [<span class="literal">None</span>] * len(nums)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_rob</span><span class="params">(i)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> memo[i] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> memo[i]</span><br><span class="line">        memo[i] = max(inner_rob(i - <span class="number">1</span>), nums[i] + inner_rob(i - <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> memo[i]</span><br><span class="line">    <span class="keyword">return</span> inner_rob(len(nums) - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/house-robber/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以把得出答案的過程拆解為最小可重複步驟，用遞迴來解&lt;/li&gt;
&lt;li&gt;Recursive case: 假設 index 為 i，由 index 0 搶到 i 可得的最大收穫為 &lt;code&gt;inner_rob(i)&lt;/code&gt;。在位置 i, 可選擇搶或不搶：&lt;ol&gt;
&lt;li&gt;不搶：最大收穫跟前一個點一樣，為 &lt;code&gt;inner_rob(i - 1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;搶：代表前一個點一定是不搶，所以最大收穫為這個點的 money &lt;code&gt;nums[i]&lt;/code&gt; 再加上前前個點的最大收穫 &lt;code&gt;inner_rob(i - 2)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;所以 &lt;code&gt;inner_rob(i)&lt;/code&gt; 為以上兩種情況取較大的那個
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="recursion" scheme="https://james687.github.io/tags/recursion/"/>
    
      <category term="dynamic programming" scheme="https://james687.github.io/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>Unique Paths</title>
    <link href="https://james687.github.io/2023/03/18/unique-paths/"/>
    <id>https://james687.github.io/2023/03/18/unique-paths/</id>
    <published>2023-03-18T08:08:15.000Z</published>
    <updated>2023-03-30T04:49:45.044Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/unique-paths/description/">題目</a><br>思路</p><ol><li><p>每走一步都會是一個 unique path，到終點的路線是由每一步所組成的，所以可以用遞迴的方式來想，最小的可重複動作就是一步，點 (i, j) 到終點的 unique path count 就是 (i + 1, j) 和 (i, j + 1) 的 unique path count 的和</p></li><li><p>最小可重複動作 <code>return u_paths(i + 1, j) + u_paths(i, j + 1)</code></p><a id="more"></a></li><li><p>終止條件</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> i &gt;= m <span class="keyword">or</span> j &gt;= n:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> i == m - <span class="number">1</span> <span class="keyword">and</span> j == n - <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>已經在終點上了，unique path count 卻是 1，一開始可能會覺得有點怪，不過從終點左邊那個點來想，就不會怪了：<ul><li>左邊那個點的 unique path count = (它的下面那點的 path count) + (它右邊那點的 path count)<ul><li>下面那點：path count 為 0</li><li>右邊那點 (終點)：path count 必須是 1</li></ul></li></ul></li></ul></li><li><p>遞迴解法如下，但時間複雜度 O(2^(m + n)) 太大了 (計算參考<a href="https://james687.github.io/2023/03/21/recursion-time-complexity/">這篇</a>)</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span><span class="params">(self, m: int, n: int)</span> -&gt; int:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">u_paths</span><span class="params">(i, j)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        i, j 為從 0 開始的坐標</span></span><br><span class="line"><span class="string">        @return 由 (i, j) 走到終點的 unique path count</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 終止條件</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= m <span class="keyword">or</span> j &gt;= n:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> i == m - <span class="number">1</span> <span class="keyword">and</span> j == n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 最小可重複動作</span></span><br><span class="line">        <span class="keyword">return</span> u_paths(i + <span class="number">1</span>, j) + u_paths(i, j + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> u_paths(<span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>因為同一個點可能會走到很多次，我們可以把結果存在二維陣列，避免重複計算，以減少時間複雜度</p></li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span><span class="params">(self, m: int, n: int)</span> -&gt; int:</span></span><br><span class="line">    dp = [[<span class="literal">None</span>] * n <span class="keyword">for</span> i <span class="keyword">in</span> range(m)]  <span class="comment"># m * n 的二維陣列</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">u_paths</span><span class="params">(i, j)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        i, j 為從 0 開始的坐標</span></span><br><span class="line"><span class="string">        @return 由 (i, j) 走到終點的 unique path count</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 終止條件</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= m <span class="keyword">or</span> j &gt;= n:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> i == m - <span class="number">1</span> <span class="keyword">and</span> j == n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dp[i][j]:</span><br><span class="line">            <span class="keyword">return</span> dp[i][j]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 最小可重複動作</span></span><br><span class="line">        dp[i][j] = u_paths(i + <span class="number">1</span>, j) + u_paths(i, j + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> u_paths(<span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>時間複雜度：O(m * n)<ul><li>因為有記憶，每個點只會計算一次，共有 <code>m * n</code> 個點</li></ul></li><li>空間複雜度：O(m * n)<ul><li>維護 <code>dp</code> 所需空間。遞迴呼叫所需空間 <code>m</code> 和 <code>n</code> 可忽略</li></ul></li></ul><p>類似題：</p><ul><li><a href="https://leetcode.com/problems/fibonacci-number">Fibonacci Number</a></li><li><a href="https://leetcode.com/problems/unique-paths-ii">Unique Paths II</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/unique-paths/description/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;每走一步都會是一個 unique path，到終點的路線是由每一步所組成的，所以可以用遞迴的方式來想，最小的可重複動作就是一步，點 (i, j) 到終點的 unique path count 就是 (i + 1, j) 和 (i, j + 1) 的 unique path count 的和&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最小可重複動作 &lt;code&gt;return u_paths(i + 1, j) + u_paths(i, j + 1)&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="recursion" scheme="https://james687.github.io/tags/recursion/"/>
    
      <category term="dynamic programming" scheme="https://james687.github.io/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>Merge Two Binary Trees</title>
    <link href="https://james687.github.io/2023/03/16/merge-two-binary-trees/"/>
    <id>https://james687.github.io/2023/03/16/merge-two-binary-trees/</id>
    <published>2023-03-16T03:27:23.000Z</published>
    <updated>2023-03-30T04:48:03.303Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/merge-two-binary-trees/description/">題目</a></p><h3 id="做法一：recursive-DFS"><a href="#做法一：recursive-DFS" class="headerlink" title="做法一：recursive - DFS"></a>做法一：recursive - DFS</h3><ol><li><p>找出最小的可重複動作：merge 兩個 nodes</p><ul><li>題目給的 method 就可以用來做遞迴</li></ul></li><li><p>假設 <code>mergeTrees</code> 已完成，實作此最小可重複動作</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root1.val += root2.val</span><br><span class="line">root1.left = self.mergeTrees(root1.left, root2.left)</span><br><span class="line">root1.right = self.mergeTrees(root1.right, root2.right)</span><br><span class="line"><span class="keyword">return</span> root1</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>寫出遞迴的終止條件</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root1 <span class="keyword">or</span> <span class="keyword">not</span> root2:</span><br><span class="line">    <span class="keyword">return</span> root1 <span class="keyword">or</span> root2</span><br></pre></td></tr></table></figure></li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span><span class="params">(self, root1: Optional[TreeNode], root2: Optional[TreeNode])</span> -&gt; Optional[TreeNode]:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root1 <span class="keyword">or</span> <span class="keyword">not</span> root2:</span><br><span class="line">        <span class="keyword">return</span> root1 <span class="keyword">or</span> root2</span><br><span class="line">    root1.val += root2.val</span><br><span class="line">    root1.left = self.mergeTrees(root1.left, root2.left)</span><br><span class="line">    root1.right = self.mergeTrees(root1.right, root2.right)</span><br><span class="line">    <span class="keyword">return</span> root1</span><br></pre></td></tr></table></figure><p>假設兩棵樹有較少節點的那顆有 n 個節點</p><ul><li>時間複雜度：O(n)</li><li>空間複雜度：n 個節點那棵樹的深度<ul><li>最差情況是 O(n), 平均為 O(log n)</li></ul></li></ul><h3 id="做法二：iterative-BFS"><a href="#做法二：iterative-BFS" class="headerlink" title="做法二：iterative - BFS"></a>做法二：iterative - BFS</h3><ol><li>準備一個 stack 來放待 merge 的 node pairs</li><li>一次從裡面拿一個 pair 出來 merge, 同時也把該 merge 的子節點 pair 丟進去。一直做到 stack 裡面沒東西為止</li><li>因為這邊是 merge 到 root1, 故最後回傳 root1<ul><li>注意不要回傳到 <code>p</code>, 而是應該回傳當初的根節點 root1</li></ul></li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span><span class="params">(self, root1: Optional[TreeNode], root2: Optional[TreeNode])</span> -&gt; Optional[TreeNode]:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root1 <span class="keyword">or</span> <span class="keyword">not</span> root2:</span><br><span class="line">        <span class="keyword">return</span> root1 <span class="keyword">or</span> root2</span><br><span class="line">    stack = [(root1, root2)]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        p, q = stack.pop()  <span class="comment"># 使用暫時的變數 p, q 來操作節點 merge</span></span><br><span class="line">        p.val += q.val</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p.left <span class="keyword">and</span> q.left:</span><br><span class="line">            p.left = q.left</span><br><span class="line">        <span class="keyword">elif</span> p.left <span class="keyword">and</span> q.left:</span><br><span class="line">            stack.append((p.left, q.left))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p.right <span class="keyword">and</span> q.right:</span><br><span class="line">            p.right = q.right</span><br><span class="line">        <span class="keyword">elif</span> p.right <span class="keyword">and</span> q.right:</span><br><span class="line">            stack.append((p.right, q.right))</span><br><span class="line">    <span class="keyword">return</span> root1</span><br></pre></td></tr></table></figure><p>假設兩棵樹有較少節點的那顆有 n 個節點</p><ul><li>時間複雜度：O(n)<ul><li>stack 裡會有 n 個 pairs, 所以會做 n 次</li></ul></li><li>空間複雜度：O(n)<ul><li>需要大小為 n 的 stack</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/merge-two-binary-trees/description/&quot;&gt;題目&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;做法一：recursive-DFS&quot;&gt;&lt;a href=&quot;#做法一：recursive-DFS&quot; class=&quot;headerlink&quot; title=&quot;做法一：recursive - DFS&quot;&gt;&lt;/a&gt;做法一：recursive - DFS&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;找出最小的可重複動作：merge 兩個 nodes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;題目給的 method 就可以用來做遞迴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;假設 &lt;code&gt;mergeTrees&lt;/code&gt; 已完成，實作此最小可重複動作&lt;/p&gt;
 &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root1.val += root2.val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root1.left = self.mergeTrees(root1.left, root2.left)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root1.right = self.mergeTrees(root1.right, root2.right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; root1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="tree" scheme="https://james687.github.io/tags/tree/"/>
    
      <category term="binary tree" scheme="https://james687.github.io/tags/binary-tree/"/>
    
      <category term="depth-first search" scheme="https://james687.github.io/tags/depth-first-search/"/>
    
      <category term="recursion" scheme="https://james687.github.io/tags/recursion/"/>
    
      <category term="breadth-first search" scheme="https://james687.github.io/tags/breadth-first-search/"/>
    
  </entry>
  
  <entry>
    <title>Balanced Binary Tree</title>
    <link href="https://james687.github.io/2023/03/15/balanced-binary-tree/"/>
    <id>https://james687.github.io/2023/03/15/balanced-binary-tree/</id>
    <published>2023-03-15T04:12:23.000Z</published>
    <updated>2023-03-30T04:46:34.670Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/balanced-binary-tree/description/">題目</a></p><h3 id="做法一"><a href="#做法一" class="headerlink" title="做法一"></a>做法一</h3><p>思路：</p><ol><li>依照 height-balanced 的定義，需要符合<strong>每個</strong>node 的左右子樹高度差都不大於 1</li><li>假設有個 function <code>height</code> 可以回傳 node 的 height<ul><li>先不實作內容</li></ul></li><li>使用這個 <code>height</code> 完成 <code>isBalanced</code><a id="more"></a></li><li>實作 <code>height</code> 的內容</li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; bool:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:  <span class="comment"># 終止條件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        lh = height(node.left)</span><br><span class="line">        rh = height(node.right)</span><br><span class="line">        <span class="keyword">return</span> max(lh, rh) + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:  <span class="comment"># 終止條件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    lh = height(root.left)</span><br><span class="line">    rh = height(root.right)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 即使左右子樹高度差不大於一，子樹本身還是有可能是不平衡的，所以要再加上後面的 `isBalanced` 判斷</span></span><br><span class="line">    <span class="keyword">return</span> abs(lh - rh) &lt;= <span class="number">1</span> <span class="keyword">and</span> self.isBalanced(root.left) <span class="keyword">and</span> self.isBalanced(root.right)</span><br></pre></td></tr></table></figure><p>假設有 n 個 node, 樹的高度為 h</p><ul><li>時間複雜度：O(n^2)<ul><li><code>isBalanced</code> 除了呼叫自己之外的複雜度為 O(n)<ul><li>呼叫了 <code>n - 1</code> 次 <code>height</code></li></ul></li><li>每個節點都呼叫了一次 <code>isBalanced</code></li></ul></li><li>空間複雜度：O(h)<ul><li>因為遞迴的呼叫有 DFS 的特性，會從子節點一直呼叫到最下面的葉子節點，所以需要把那些 function calls 放進 stack 裡，等到葉子節點的呼叫到了再一一拿出來執行。因此 stack 的大小需等於呼叫的次數，也就是由根節點走到葉子節點需經過幾個點，即這棵樹的高度<ul><li>只需考慮一次遞迴呼叫所需空間，不需考慮全部遞迴呼叫 (譬如在 function 裡呼叫了自己兩次)，因為程式同時只會處理一個遞迴呼叫</li></ul></li></ul></li></ul><h3 id="做法二"><a href="#做法二" class="headerlink" title="做法二"></a>做法二</h3><p>思路：</p><ol><li>有沒有辦法優化上面做法的時間複雜度呢？因為上面在算高度的時候就已經會算出每個節點的左右子樹的高度了，此時就可以順便看看是否平衡，不用等到最後再遞迴呼叫 <code>isBalanced</code> 增加複雜度</li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; bool:</span></span><br><span class="line">    self.balanced = <span class="literal">True</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        lh = height(node.left)</span><br><span class="line">        rh = height(node.right)</span><br><span class="line">        <span class="keyword">if</span> abs(lh - rh) &gt; <span class="number">1</span>:</span><br><span class="line">            self.balanced = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> max(lh, rh) + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    height(root)</span><br><span class="line">    <span class="keyword">return</span> self.balanced</span><br></pre></td></tr></table></figure><p>假設有 n 個 node, 樹的高度為 h</p><ul><li>時間複雜度：O(n)<ul><li>每個節點都做過一次 <code>height</code></li></ul></li><li>空間複雜度：O(h)<ul><li>同 <code>做法一</code> 的分析</li></ul></li></ul><p>類似題：<a href="https://leetcode.com/problems/symmetric-tree/description/">Symmetric Tree</a> 用 recursive 方法來解</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/balanced-binary-tree/description/&quot;&gt;題目&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;做法一&quot;&gt;&lt;a href=&quot;#做法一&quot; class=&quot;headerlink&quot; title=&quot;做法一&quot;&gt;&lt;/a&gt;做法一&lt;/h3&gt;&lt;p&gt;思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;依照 height-balanced 的定義，需要符合&lt;strong&gt;每個&lt;/strong&gt;node 的左右子樹高度差都不大於 1&lt;/li&gt;
&lt;li&gt;假設有個 function &lt;code&gt;height&lt;/code&gt; 可以回傳 node 的 height&lt;ul&gt;
&lt;li&gt;先不實作內容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用這個 &lt;code&gt;height&lt;/code&gt; 完成 &lt;code&gt;isBalanced&lt;/code&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="tree" scheme="https://james687.github.io/tags/tree/"/>
    
      <category term="binary tree" scheme="https://james687.github.io/tags/binary-tree/"/>
    
      <category term="depth-first search" scheme="https://james687.github.io/tags/depth-first-search/"/>
    
      <category term="recursion" scheme="https://james687.github.io/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>Same Tree</title>
    <link href="https://james687.github.io/2023/02/10/same-tree/"/>
    <id>https://james687.github.io/2023/02/10/same-tree/</id>
    <published>2023-02-10T10:27:23.000Z</published>
    <updated>2023-03-30T04:49:07.119Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/same-tree/description/">題目</a><br>思路：</p><ol><li>要比較所有相同位置的 node 的值是否一樣，可以把所有待比較的 node pair 丟到 stack 裡一一拿出來比較，全部比完都通過的話就是一樣的 tree</li><li>一個 pair 比較後會把下面的所有分支點繼續丟進 stack 等待比較，所以用 <code>while stack:</code> 只要有就繼續比，一直比到完<ul><li>此為廣先搜尋 (Breadth-First Search)<a id="more"></a></li></ul></li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p: Optional[TreeNode], q: Optional[TreeNode])</span> -&gt; bool:</span></span><br><span class="line">    stack = [(p, q)]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        p, q = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> p <span class="keyword">and</span> q <span class="keyword">and</span> p.val == q.val:</span><br><span class="line">            stack.extend([</span><br><span class="line">                (p.left, q.left),</span><br><span class="line">                (p.right, q.right)</span><br><span class="line">            ])</span><br><span class="line">        <span class="keyword">elif</span> p <span class="keyword">or</span> q:  <span class="comment"># 只有在 p, q 都是 None 的情況下才會通過，這代表這兩棵樹在那個位置都沒有葉子</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>假設 p 有 n 個節點，寬度 w1，q 有 m 個節點，寬度 w2</p><ul><li>時間複雜度：O(max(m, n))</li><li>空間複雜度：O(max(w1, w2))<ul><li>因為是 BFS, <code>stack</code> 需儲存當前層次上的節點，故跟寬度成正比</li></ul></li></ul><p>類似題：<a href="https://leetcode.com/problems/symmetric-tree/description/">Symmetric Tree</a> 用 iterative 方法來解</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/same-tree/description/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要比較所有相同位置的 node 的值是否一樣，可以把所有待比較的 node pair 丟到 stack 裡一一拿出來比較，全部比完都通過的話就是一樣的 tree&lt;/li&gt;
&lt;li&gt;一個 pair 比較後會把下面的所有分支點繼續丟進 stack 等待比較，所以用 &lt;code&gt;while stack:&lt;/code&gt; 只要有就繼續比，一直比到完&lt;ul&gt;
&lt;li&gt;此為廣先搜尋 (Breadth-First Search)
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="tree" scheme="https://james687.github.io/tags/tree/"/>
    
      <category term="binary tree" scheme="https://james687.github.io/tags/binary-tree/"/>
    
      <category term="depth-first search" scheme="https://james687.github.io/tags/depth-first-search/"/>
    
      <category term="breadth-first search" scheme="https://james687.github.io/tags/breadth-first-search/"/>
    
  </entry>
  
  <entry>
    <title>Merge Two Sorted Lists</title>
    <link href="https://james687.github.io/2023/02/09/merge-two-sorted-lists/"/>
    <id>https://james687.github.io/2023/02/09/merge-two-sorted-lists/</id>
    <published>2023-02-09T10:27:23.000Z</published>
    <updated>2023-03-30T04:48:20.721Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/merge-two-sorted-lists/description/">題目</a><br>思路：</p><ol><li><p>因為要做一個 linked list，可以用 while 在每次迴圈都接一個 node 出來</p></li><li><p>先設 <code>while True:</code>，等寫迴圈內容時再來確定 while 可繼續執行的條件</p></li><li><p>寫第一 part (如下) 後發現，while 條件需要 <code>l1 and l2</code></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> l1.val &gt; l2.val:</span><br><span class="line">    curr.next = l2</span><br><span class="line">    l2 = l2.next</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    curr.next = l1</span><br><span class="line">    l1 = l1.next</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>post processing: 跳出迴圈後的情形是 <code>l1</code>, <code>l2</code> 其中有一個是 <code>None</code> 或兩個都是 <code>None</code>，此時就把目標 linked list 接上那個不是 <code>None</code> 的即可</p></li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: Optional[ListNode], l2: Optional[ListNode])</span> -&gt; Optional[ListNode]:</span></span><br><span class="line">    dummy_head = ListNode()  <span class="comment"># 需有一個 dummy_head 可以在最後回傳答案時使用</span></span><br><span class="line">    curr = dummy_head  <span class="comment"># 也要有個 curr 可以在每次迴圈中跟著移動</span></span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">        <span class="keyword">if</span> l1.val &gt; l2.val:</span><br><span class="line">            curr.next = l2</span><br><span class="line">            l2 = l2.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            curr.next = l1</span><br><span class="line">            l1 = l1.next</span><br><span class="line">        curr = curr.next</span><br><span class="line">    curr.next = l1 <span class="keyword">or</span> l2  <span class="comment"># post processing</span></span><br><span class="line">    <span class="keyword">return</span> dummy_head.next</span><br></pre></td></tr></table></figure><p>P.S. 有些思路跟 <a href="https://james687.github.io/2023/02/03/add-two-numbers/">Add Two Numbers</a> 重複，這篇就不多寫了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/merge-two-sorted-lists/description/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;因為要做一個 linked list，可以用 while 在每次迴圈都接一個 node 出來&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先設 &lt;code&gt;while True:&lt;/code&gt;，等寫迴圈內容時再來確定 while 可繼續執行的條件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;寫第一 part (如下) 後發現，while 條件需要 &lt;code&gt;l1 and l2&lt;/code&gt;&lt;/p&gt;
 &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; l1.val &amp;gt; l2.val:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    curr.next = l2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    l2 = l2.next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    curr.next = l1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    l1 = l1.next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="linked list" scheme="https://james687.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>Remove Duplicates from Sorted List</title>
    <link href="https://james687.github.io/2023/02/09/remove-duplicates-from-sorted-list/"/>
    <id>https://james687.github.io/2023/02/09/remove-duplicates-from-sorted-list/</id>
    <published>2023-02-09T03:47:23.000Z</published>
    <updated>2023-03-30T04:48:56.471Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/">題目</a><br>思路：</p><ol><li><p>既然是 Linked List，我們可以宣告一個指標 <code>curr</code> 指向第一個 node，用 while 迴圈一次檢查一個 node (檢查完將指標移到下一個 node)</p><ul><li>不能直接用 <code>head</code> 來移動，因為到時候回傳答案的時候需要回傳這個 <code>head</code></li></ul></li><li><p>設定 while 可以繼續檢查的條件：有時要先寫 while 的內容，才會比較確定 while 條件應該怎麼寫，這時可以先寫 <code>while True:</code>，等內容寫完再來改條件</p><a id="more"></a></li><li><p>寫 while 內容</p><ol><li><p>假如 <code>curr.val</code> 跟下一個一樣，就把 next 接到下下個</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> curr.val == curr.next.val:</span><br><span class="line">    curr.next = curr.next.next</span><br></pre></td></tr></table></figure></li><li><p>但假如下下個也一樣呢？=&gt; 把上面的 <code>if</code> 改成 <code>while</code>，讓最後 <code>curr.next</code> 所指的 val 一定是不一樣的</p></li><li><p>改成 while 之後，檢查條件會被重複執行。因為 <code>curr.next</code> 有可能會是 <code>None</code>，所以條件改為<br><code>while curr.val == (curr.next and curr.next.val):</code></p></li><li><p>離開 while 之後：<br><code>curr = curr.next  # 把指標移到下一個 node，以便下次的檢查</code></p></li></ol></li><li><p>回去修改 while 條件：什麼條件成立我們才能繼續檢查(執行 while 內容)？</p><ol><li>首先 <code>curr</code> 不能是 <code>None</code><ul><li><code>curr</code> 有可能是 <code>None</code>，因為我們一直把它指向下一個 Node，到了盡頭 <code>curr</code> 就會是 <code>None</code></li></ul></li><li>即使 <code>curr.next</code> 是 <code>None</code>，還是可以順利執行迴圈內容</li><li>結論：條件為 <code>while curr:</code></li></ol></li><li><p>離開 while 之後就大功告成，回傳答案 <code>head</code></p></li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head: Optional[ListNode])</span> -&gt; Optional[ListNode]:</span></span><br><span class="line">    curr = head  <span class="comment"># 等一下可以在 while 迴圈中移動的指標</span></span><br><span class="line">    <span class="keyword">while</span> curr:</span><br><span class="line">        <span class="keyword">while</span> curr.val == (curr.next <span class="keyword">and</span> curr.next.val):</span><br><span class="line">            curr.next = curr.next.next</span><br><span class="line">        curr = curr.next</span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;既然是 Linked List，我們可以宣告一個指標 &lt;code&gt;curr&lt;/code&gt; 指向第一個 node，用 while 迴圈一次檢查一個 node (檢查完將指標移到下一個 node)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能直接用 &lt;code&gt;head&lt;/code&gt; 來移動，因為到時候回傳答案的時候需要回傳這個 &lt;code&gt;head&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;設定 while 可以繼續檢查的條件：有時要先寫 while 的內容，才會比較確定 while 條件應該怎麼寫，這時可以先寫 &lt;code&gt;while True:&lt;/code&gt;，等內容寫完再來改條件&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="linked list" scheme="https://james687.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>Add Two Numbers</title>
    <link href="https://james687.github.io/2023/02/03/add-two-numbers/"/>
    <id>https://james687.github.io/2023/02/03/add-two-numbers/</id>
    <published>2023-02-03T07:54:07.000Z</published>
    <updated>2023-03-30T04:46:17.784Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/add-two-numbers/description/">題目</a><br>思路：</p><ol><li>既然 Linked List 是由個位數開始，剛好可以用小學學的加法來從個位數開始相加。所以須設計一個迴圈來執行可重複執行的加法動作，一步步構建答案所需的 linked list，一次建立一個 node，直到完成。</li><li>迴圈要可重複執行，需要有個指標，在迴圈內對該指標所指的 node 做操作，並在迴圈結束時讓指標指到下一個 node，讓下一次迴圈來操作<a id="more"></a></li><li>迴圈內算出的當下位數的答案 <code>digit_sum % 10</code> 的 node 為何是指定給 <code>curr.next</code> 而非 <code>curr</code>?<ul><li>因為迴圈結束前 <code>curr</code> 必須指向下一個 node，也就是 <code>curr.next</code>，以下分兩種情況解釋：<ul><li>答案放在 <code>curr</code> 身上：必須創造一個空的 node 來當 <code>curr.next</code>，而假如這次的迴圈已經是最後一次了，此 linked list 的尾巴就會多一個空的 node</li><li>答案放在 <code>curr.next</code> 身上：迴圈結束前 <code>curr</code> 指向 <code>curr.next</code> 繼續下一次的操作，假如此次已是最後一次迴圈，也不會多出空的 node 在 linked list 末端，只會在開頭多出一個沒用到的 dummy_head 而已，因此最後回傳答案時是回傳 <code>dummy_head.next</code></li></ul></li></ul></li></ol><p>Python3 solution</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: Optional[ListNode], l2: Optional[ListNode])</span> -&gt; Optional[ListNode]:</span></span><br><span class="line">    carry = <span class="number">0</span>  <span class="comment"># 位數相加後除以 10 得到的商</span></span><br><span class="line">    dummy_head = ListNode()  <span class="comment"># 用 dummy_head 保留最前面的指標，到時候才有辦法回傳答案</span></span><br><span class="line">    curr = dummy_head        <span class="comment"># 不能只用 `curr = ListNode()`，因為 `curr` 所指的 node 必須一直變</span></span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> carry:  <span class="comment"># 可以繼續加的條件</span></span><br><span class="line">        v1 = l1 <span class="keyword">and</span> l1.val <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">        v2 = l2 <span class="keyword">and</span> l2.val <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">        digit_sum = v1 + v2 + carry</span><br><span class="line">        carry = digit_sum // <span class="number">10</span></span><br><span class="line">        curr.next = ListNode(digit_sum % <span class="number">10</span>)</span><br><span class="line">        curr = curr.next</span><br><span class="line">        l1 = l1 <span class="keyword">and</span> l1.next</span><br><span class="line">        l2 = l2 <span class="keyword">and</span> l2.next</span><br><span class="line">    <span class="keyword">return</span> dummy_head.next</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/add-two-numbers/description/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;既然 Linked List 是由個位數開始，剛好可以用小學學的加法來從個位數開始相加。所以須設計一個迴圈來執行可重複執行的加法動作，一步步構建答案所需的 linked list，一次建立一個 node，直到完成。&lt;/li&gt;
&lt;li&gt;迴圈要可重複執行，需要有個指標，在迴圈內對該指標所指的 node 做操作，並在迴圈結束時讓指標指到下一個 node，讓下一次迴圈來操作
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="linked list" scheme="https://james687.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>Search Insert Position</title>
    <link href="https://james687.github.io/2022/12/08/search-insert-position/"/>
    <id>https://james687.github.io/2022/12/08/search-insert-position/</id>
    <published>2022-12-08T05:21:23.000Z</published>
    <updated>2023-03-30T04:49:20.269Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/search-insert-position/description">題目</a><br>思路：最直覺是直接 iterate nums，不過題目指定要 O(log n)，所以用 binary search 才能達到</p><ol><li><p>設定左右兩個指標作為<strong>可能答案範圍</strong>：[left, right]</p></li><li><p><code>while left &lt; right</code>: 設定 binary search 可繼續執行的條件</p><ul><li>此時會想，要用 <code>&lt;</code> or <code>&lt;=</code> 呢？判斷依據為在迴圈裡變更完 left or right 之後，<strong>不能造成無窮迴圈</strong></li><li>但此時還沒寫迴圈內容，所以可以先直觀的設定一個，譬如 <code>&lt;</code>，等寫完迴圈內容再來驗證是否適合<a id="more"></a></li></ul></li><li><p>迴圈寫完後，回來 check while condition，看看 while 把 left &amp; right 收斂到最後幾個的時候，經過以下的操作會不會有無窮迴圈</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> left = mid + <span class="number">1</span></span><br><span class="line"><span class="number">2.</span> right = mid</span><br></pre></td></tr></table></figure><ol><li><p>剩最後三個：此時 mid 會是中間那個，上面兩種操作都有助於收斂範圍</p></li><li><p>剩最後兩個：此時 mid == left，上面兩種操作一樣可以收斂範圍</p></li><li><p>剩最後一個：此時 left == mid == right，以目前的 while 條件設定，會因為不符而跳出，所以跳出迴圈後的情況就是這個</p><ul><li>如果 while 條件為 <code>left &lt;= right</code>，則 <code>right = mid</code> 這個操作會造成無窮迴圈，因此不能設定為 <code>&lt;=</code></li></ul><p>=&gt; 確認不會造成無窮迴圈，所以此 while 條件設定是正確的</p></li></ol></li><li><p>Post processing: 跳出 while 後的情況為 <code>left == right</code>，此時再跟 target 比，決定答案為何</p><ul><li>為何跳出 while 後的情況不會是 <code>left &gt; right</code>?<ul><li>要讓 <code>left &gt; right</code>，必須執行到 <code>left = mid + 1</code>，而且此時 <code>left</code> 和 <code>right</code> 都必須等於 <code>mid</code>，而如果已經是這個情況，就不會再進到迴圈裡，而是已經跳出了</li></ul></li></ul></li></ol><p>Python3 solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">    left, right = <span class="number">0</span>, len(nums) - <span class="number">1</span>  <span class="comment"># 設定左右兩個指標作為可能答案範圍：[left, right]</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span>  <span class="comment"># Python3 不會有 integer overflow 的問題，所以可以直接 (left + right)，然後用 `//` 無條件捨去，避免小數</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">if</span> nums[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span>  <span class="comment"># 此時最小的可能答案為 `mid + 1`</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid  <span class="comment"># 此時最大的可能答案為 `mid`</span></span><br><span class="line">    <span class="keyword">return</span> left + <span class="number">1</span> <span class="keyword">if</span> nums[left] &lt; target <span class="keyword">else</span> left</span><br></pre></td></tr></table></figure><p>更詳細解說可參考<a href="https://leetcode.com/problems/search-insert-position/solutions/249092/come-on-forget-the-binary-search-pattern-template-try-understand-it/">此篇文章</a></p><p>類似題：<a href="https://leetcode.com/problems/first-bad-version/">First Bad Version</a><br>延伸題：<a href="https://leetcode.com/problems/find-peak-element/description/">Find Peak Element</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/search-insert-position/description&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路：最直覺是直接 iterate nums，不過題目指定要 O(log n)，所以用 binary search 才能達到&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;設定左右兩個指標作為&lt;strong&gt;可能答案範圍&lt;/strong&gt;：[left, right]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;while left &amp;lt; right&lt;/code&gt;: 設定 binary search 可繼續執行的條件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;此時會想，要用 &lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;lt;=&lt;/code&gt; 呢？判斷依據為在迴圈裡變更完 left or right 之後，&lt;strong&gt;不能造成無窮迴圈&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;但此時還沒寫迴圈內容，所以可以先直觀的設定一個，譬如 &lt;code&gt;&amp;lt;&lt;/code&gt;，等寫完迴圈內容再來驗證是否適合
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="binary search" scheme="https://james687.github.io/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>3Sum</title>
    <link href="https://james687.github.io/2022/12/05/3-sum/"/>
    <id>https://james687.github.io/2022/12/05/3-sum/</id>
    <published>2022-12-05T08:51:05.000Z</published>
    <updated>2023-03-30T04:46:03.928Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/3sum/description/">題目</a><br>思路：</p><ul><li>用三個指標，iterate 最左邊那個，找出對應於每個 left 指標的所有 result</li><li>先把 nums 排序，如此移動 mid, right 指標時就有個依據</li></ul><p>Python3 solution</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    nums.sort()</span><br><span class="line">    <span class="keyword">for</span> left <span class="keyword">in</span> range(len(nums) - <span class="number">2</span>):  <span class="comment"># 右邊須留兩個空位給另兩個指標</span></span><br><span class="line">        <span class="keyword">if</span> left &gt; <span class="number">0</span> <span class="keyword">and</span> nums[left] == nums[left - <span class="number">1</span>]:  <span class="comment"># 排除重複的 result，left 必須 &gt; 0 才會有前一個</span></span><br><span class="line">            <span class="keyword">continue</span>                                   <span class="comment"># - 假如 nums[left] 是一樣的，最後找到的 result 也會是一樣的，所以要排除掉</span></span><br><span class="line">        mid = left + <span class="number">1</span></span><br><span class="line">        right = len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> mid &lt; right:  <span class="comment"># 設定有效範圍，在此範圍內尋找符合的 mid, right</span></span><br><span class="line">            t_sum = nums[left] + nums[mid] + nums[right]</span><br><span class="line">            <span class="keyword">if</span> t_sum &lt; <span class="number">0</span>:</span><br><span class="line">                mid += <span class="number">1</span>  <span class="comment"># 此時必須讓 t_sum 變大，所以將 mid 往右移</span></span><br><span class="line">            <span class="keyword">elif</span> t_sum &gt; <span class="number">0</span>:</span><br><span class="line">                right -= <span class="number">1</span>  <span class="comment"># 此時必須讓 t_sum 變小，所以將 right 往左移</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.append([nums[left], nums[mid], nums[right]])</span><br><span class="line">                <span class="keyword">while</span> mid &lt; right <span class="keyword">and</span> nums[mid] == nums[mid + <span class="number">1</span>]:  <span class="comment"># 跳過 mid 重複的部分</span></span><br><span class="line">                    mid += <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> mid &lt; right <span class="keyword">and</span> nums[right] == nums[right - <span class="number">1</span>]:  <span class="comment"># 跳過 right 重複的部分</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 正常的移動 mid, right，尋找下一個符合的 result</span></span><br><span class="line">                mid += <span class="number">1</span></span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/3sum/description/&quot;&gt;題目&lt;/a&gt;&lt;br&gt;思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用三個指標，iterate 最左邊那個，找出對應於每個 left 指標的所有 result&lt;/li&gt;
&lt;li&gt;先把 nums 排序，如此移動 mid, right 指標時就有個依據&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python3 solution&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://james687.github.io/categories/Leetcode/"/>
    
    
      <category term="array" scheme="https://james687.github.io/tags/array/"/>
    
      <category term="two pointers" scheme="https://james687.github.io/tags/two-pointers/"/>
    
      <category term="sorting" scheme="https://james687.github.io/tags/sorting/"/>
    
  </entry>
  
  <entry>
    <title>為什麼 Python dict 的 get item operation 時間複雜度為 O(1) ？</title>
    <link href="https://james687.github.io/2022/07/25/why-dict-o1/"/>
    <id>https://james687.github.io/2022/07/25/why-dict-o1/</id>
    <published>2022-07-25T08:55:03.000Z</published>
    <updated>2023-03-29T09:00:45.167Z</updated>
    
    <content type="html"><![CDATA[<p>如果去 google，大部分查到的都會說因為 Python 會把 key 經過 hash function 運算，得到一個 dict 真正內部在使用的 key，從而找到對應的 value。而一個好的 hash function 它的運算所需時間是不會隨著 n 增加而變大的，所以 dict 的 get item operation 時間複雜度為 O(1) 。</p><p>不過我的疑惑是，經過 hash function 運算得到 key 之後，由這個 key 去找到 value 的時間複雜度是 O(1) 嗎？除非這個也是 O(1) 才能說整個 get item operation 是 O(1) 。</p><a id="more"></a><p>後來再多翻了一些說明，終於看到一兩個回答可以解釋這個疑惑。可以想像成今天我們有一個 array，我們只要知道 index 就可以知道要去哪裡找到對應的 value ( 因此是 O(1) )，經由 hash function 算出來的 key 就好像 array 的 index 一樣，只要看到這個 key 就知道要去哪裡找對應的 value，不會受 n 大小的影響，所以是 O(1)</p><p>另一個比較生活化的例子：hash function 算出來的 key，就好像你在圖書館要找書時用的索引，看到索引你就會知道書在哪一區、哪個櫃子裡，即使你需要照著圖書館的索引指示找一下才能找到，但這個過程所花的時間，跟圖書館有多少書沒有關係。</p><p>References:</p><ul><li><a href="https://qr.ae/pvMCpM">https://qr.ae/pvMCpM</a></li><li><a href="https://qr.ae/pvMCIv">https://qr.ae/pvMCIv</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果去 google，大部分查到的都會說因為 Python 會把 key 經過 hash function 運算，得到一個 dict 真正內部在使用的 key，從而找到對應的 value。而一個好的 hash function 它的運算所需時間是不會隨著 n 增加而變大的，所以 dict 的 get item operation 時間複雜度為 O(1) 。&lt;/p&gt;
&lt;p&gt;不過我的疑惑是，經過 hash function 運算得到 key 之後，由這個 key 去找到 value 的時間複雜度是 O(1) 嗎？除非這個也是 O(1) 才能說整個 get item operation 是 O(1) 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://james687.github.io/categories/Algorithm/"/>
    
    
      <category term="python" scheme="https://james687.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在 Mac 加入 ssh key 的步驟</title>
    <link href="https://james687.github.io/2021/01/14/add-ssh-steps/"/>
    <id>https://james687.github.io/2021/01/14/add-ssh-steps/</id>
    <published>2021-01-14T08:31:44.000Z</published>
    <updated>2023-04-03T10:27:41.027Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><code>ssh-keygen -t ed25519 -C &quot;{你的 email}&quot;</code></p><ul><li>預設路徑假如已有相同檔案，記得指定新的<strong>完整</strong>路徑</li><li>如檔名不用預設的，下面 <code>id_ed25519</code> 自行替換成自己的檔名</li></ul></li><li><p><code>vi ~/.ssh/config</code></p><ul><li><p>舉例：加上如下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host GitHub</span><br><span class="line"> HostName github.com</span><br><span class="line"> IdentityFile ~&#x2F;.ssh&#x2F;id_ed25519</span><br><span class="line"> IdentitiesOnly yes</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>ssh-add -K ~/.ssh/id_ed25519</code></p><ul><li>register your private key with <code>ssh-agent</code></li></ul></li><li><p><code>pbcopy &lt; ~/.ssh/id_ed25519.pub</code></p></li><li><p>貼到所使用的服務網站的相對應設定頁面</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ssh-keygen -t ed25519 -C &amp;quot;{你的 email}&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;預設路徑假如已有相同檔案，記得指定新的&lt;strong&gt;完整&lt;/strong&gt;路徑&lt;/li&gt;
&lt;li&gt;如檔名不
      
    
    </summary>
    
    
      <category term="Development Note" scheme="https://james687.github.io/categories/Development-Note/"/>
    
    
  </entry>
  
  <entry>
    <title>簡單統整 JWT 相對於傳統 Session 驗證的好處</title>
    <link href="https://james687.github.io/2021/01/14/jwt-digest/"/>
    <id>https://james687.github.io/2021/01/14/jwt-digest/</id>
    <published>2021-01-14T05:11:05.000Z</published>
    <updated>2023-03-29T12:50:15.769Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Server 不用存 Session</li><li>只有在 Client 拿新 JWT 時才需要跟 DB 溝通<ul><li>Clent 拿的時機：JWT 到期或第一次拿</li><li>為何不需跟 DB 溝通？<ul><li>因為 JWT 裡已有所需資訊</li><li>但假如業務需求需要另外取敏感資訊的話還是需要碰 DB</li></ul></li></ul></li><li><a href="https://medium.com/%E9%BA%A5%E5%85%8B%E7%9A%84%E5%8D%8A%E8%B7%AF%E5%87%BA%E5%AE%B6%E7%AD%86%E8%A8%98/%E7%AD%86%E8%A8%98-%E9%80%8F%E9%81%8E-jwt-%E5%AF%A6%E4%BD%9C%E9%A9%97%E8%AD%89%E6%A9%9F%E5%88%B6-2e64d72594f8">參考</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Server 不用存 Session&lt;/li&gt;
&lt;li&gt;只有在 Client 拿新 JWT 時才需要跟 DB 溝通&lt;ul&gt;
&lt;li&gt;Clent 拿的時機：JWT 到期或第一次拿&lt;/li&gt;
&lt;li&gt;為何不需跟 DB 溝通？&lt;ul&gt;
&lt;li&gt;因為 JWT 裡已有所需
      
    
    </summary>
    
    
      <category term="Development Note" scheme="https://james687.github.io/categories/Development-Note/"/>
    
    
      <category term="jwt" scheme="https://james687.github.io/tags/jwt/"/>
    
      <category term="authentication" scheme="https://james687.github.io/tags/authentication/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL/MySQL local docker 開發的初始 setup</title>
    <link href="https://james687.github.io/2020/02/07/postgresql-mysql-init-setup/"/>
    <id>https://james687.github.io/2020/02/07/postgresql-mysql-init-setup/</id>
    <published>2020-02-07T02:44:37.000Z</published>
    <updated>2023-03-29T12:46:56.638Z</updated>
    
    <content type="html"><![CDATA[<p>container run 起來之後：<br><strong>PostgreSQL:</strong></p><ol><li><code>docker exec -it {db-container-name} psql -U postgres</code><ul><li>以預設 user <code>postgres</code> 連進 DB</li></ul></li><li><code>create user {username} with password &#39;{password}&#39;;</code></li><li><code>create database {database_name} with owner {username};</code><a id="more"></a></li><li>大功告成，可以用 <code>\l</code> 列出所有 database &amp; <code>\du</code> 列出所有 user 來確認</li></ol><ul><li>P.S. 假如一開始忘了指定 database owner 或想改變 owner: <code>alter database {database_name} owner to {owner_name};</code></li></ul><p><strong>MySQL: (以 5.7 為例)</strong></p><ol><li>環境變數須設置 <code>MYSQL_ROOT_PASSWORD</code></li><li>docker exec -it {db-container-name} mysql -p<ul><li>以預設 user <code>root</code> 連進去，輸入上面環境變數設置的密碼</li></ul></li><li><code>create user &#39;{username}&#39;@&#39;localhost&#39; identified by &#39;{password}&#39;;</code><ul><li>Use <code>localhost</code> due to working on the machine with MySQL.</li></ul></li><li><code>create database {database_name};</code></li><li>確認：<ul><li><code>show databases;</code></li><li><code>SELECT user FROM mysql.user;</code></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;container run 起來之後：&lt;br&gt;&lt;strong&gt;PostgreSQL:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker exec -it {db-container-name} psql -U postgres&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;以預設 user &lt;code&gt;postgres&lt;/code&gt; 連進 DB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create user {username} with password &amp;#39;{password}&amp;#39;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create database {database_name} with owner {username};&lt;/code&gt;
    
    </summary>
    
    
      <category term="Development Note" scheme="https://james687.github.io/categories/Development-Note/"/>
    
    
      <category term="database" scheme="https://james687.github.io/tags/database/"/>
    
      <category term="postgresql" scheme="https://james687.github.io/tags/postgresql/"/>
    
      <category term="docker" scheme="https://james687.github.io/tags/docker/"/>
    
      <category term="mysql" scheme="https://james687.github.io/tags/mysql/"/>
    
  </entry>
  
</feed>
